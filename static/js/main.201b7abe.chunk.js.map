{"version":3,"sources":["service/localStorage.js","service/xivApi.js","store/local/types.js","store/local/actions.js","components/navigation/LodestoneCharacterModal.jsx","components/navigation/LodestoneCharacterMenu.jsx","components/navigation/Navigation.jsx","components/recipes/RecipeSearchForm.jsx","components/common/Pagination.jsx","components/recipes/RecipeSearchResult.jsx","components/recipes/RecipeSearch.jsx","components/recipes/MyList.jsx","store/recipeList/types.js","service/recipe.js","store/recipeList/actions.js","components/common/SortableTableHeaderCell.jsx","components/common/XivIcon.jsx","components/recipes/ShoppingList.jsx","components/calculator/FilterDropdown.jsx","service/calculations.js","components/calculator/CalculationsTableHeader.jsx","components/calculator/CalculationsTableBody.jsx","components/calculator/CraftingGatheringCalculator.jsx","components/RecipeHelper.jsx","components/common/LoadingOverlay.jsx","components/XivCraftingGatheringHelper.jsx","store/local/reducer.js","store/recipeList/reducer.js","store/index.js","components/App.jsx","index.js"],"names":["KEYS","CHARACTER_DATA","CRAFTING_CLASS_DATA","MY_RECIPE_LIST","MY_SHOPPING_LIST","CURRENT_TAB","OWNED_ITEMS","get","key","defaultValue","data","localStorage","getItem","JSON","parse","store","setItem","stringify","clear","removeItem","retrieveAndUpdateCraftingClassData","defaultCraftingClasses","getDefaultCraftingClasses","storedData","craftingClasses","result","forEach","defaultCraftingClass","storedCraftingClass","_find","c","abbreviation","classDiffs","_filter","diff","d","type","length","applyChanges","levelingGuideDiffs","push","retrieveAndUpdateCharacterData","updateCraftingClassDataWithCharacterData","classJobCategories","craftingClassData","characterData","_values","_get","_includes","_map","lodestoneClassData","_set","totalExperience","CRAFTING_CLASSES","currentLevel","currentExperience","experiencePerItem","BASE_URL","getIconUrl","iconRelativePath","concat","findCharacterByServerAndName","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","server","name","page","_args","arguments","wrap","_context","prev","next","undefined","axios","sent","abrupt","stop","_x","_x2","apply","this","getCharacterById","_ref2","_callee2","id","_context2","set","_x3","recipeSearch","_ref3","_callee3","searchString","options","columns","_options$exact","exact","_options$page","_options$includeMaste","includeMasterRecipes","request","_args3","_context3","toLower","replace","indexes","body","query","bool","must","wildcard","NameCombined_en","size","from","sort","RecipeLevelTable.ClassJobLevel","limit","match","SecretRecipeBookTargetID","isArray","minimum_should_match","should","map","ClassJob.Abbreviation_en","post","getRecipesById","_ref4","_callee4","recipeIds","i","_context4","params","ids","join","_x4","getItemsById","_ref5","_callee5","itemIds","_context5","_x5","LOCAL_CLASS_DATA_RETRIEVAL","LOCAL_CLASS_DATA_STORE","LOCAL_CLASS_DATA_CLEAR","LOCAL_CHARACTER_DATA_RETRIEVAL","LOCAL_CHARACTER_DATA_STORE","LOCAL_CHARACTER_DATA_CLEAR","LODESTONE_CHARACTER_DATA_REQUEST","LODESTONE_CHARACTER_DATA_SUCCESS","API_REQUEST_FAILURE","lodestoneCharacterDataRequest","characterId","T","apiRequestSuccess","payload","getLocalClassData","dispatch","localData","localClassDataRetrieve","LocalStorage","saveLocalClassData","classData","clearLocalClassData","saveLocalCharacterData","getLocalCharacterData","localCharacterDataRetrieve","clearLocalCharacterData","LodestoneCharacterModal","state","event","_event$target","target","value","setState","defineProperty","preventDefault","loading","performSearch","XivApi","lodestoneResults","onHide","props","getLodestoneCharacterData","handleClose","_this2","show","_this$state2","results","prevPage","nextPage","react_default","createElement","Modal","bind","Form","onSubmit","handleSearch","onReset","Header","closeButton","Title","Body","Group","Label","Control","as","onChange","handleSetField","XIV_SERVERS","Button","disabled","className","Spinner","animation","variant","Fragment","char","ID","Name","Avatar","Check","htmlFor","src","alt","onClick","Footer","handleSubmitCharacterSelection","React","Component","defaultProps","getDropdownTitle","_characterData$Charac","Character","LodestoneCharacterMenu","showModal","_this$props","searchLodestoneCharacterData","importText","NavDropdown","alignRight","title","Item","Divider","handleModalToggle","navigation_LodestoneCharacterModal","connect","t0","error","Navigation","Navbar","bg","sticky","NavbarBrand","Nav","navigation_LodestoneCharacterMenu","RecipeSearchForm","craftingClassSelections","ButtonGroup","updateCraftingClassSelections","prevProps","prevState","snapshot","recipeSearchClasses","isEqual","handleToggleRecipeSearchClass","buttons","filter","cc","OverlayTrigger","overlay","Tooltip","includes","icon","_this$props2","handleChange","handleReset","handleSubmit","handleToggleRecipeIncludeMaster","recipeSearchIncludeMaster","handleToggleRecipeSearchExact","recipeSearchExact","recipeSearchIsInvalid","recipeSearchString","isInvalid","FormControl","Feedback","checked","Pagination","currentPage","handlePageChange","totalPages","minPage","Math","max","min","maxPage","activePage","option","paginate","RecipeSearchResult","_this","clearRecipeSearch","handleTabChange","handleToggleListItem","myList","pagination","recipeList","pageTotal","pageCurrent","Table","hover","striped","colSpan","Pagination_Pagination","r","iconUrl","craftingClassName","level","isOnList","find","item","index_es","faMinusSquare","faPlusSquare","ready","RecipeSearch","recipeSearchResults","RecipeSearchForm_RecipeSearchForm","RecipeSearchResult_RecipeSearchResult","MyList","handleClearList","handleUpdateQuantity","list","k","Icon","ClassJob","NameEnglish","RecipeLevelTable","ClassJobLevel","quantity","RECIPE_SEARCH_REQUEST","RECIPE_SEARCH_SUCCESS","RECIPE_SEARCH_FAILURE","RECIPE_SEARCH_CLEAR","RECIPE_LIST_CLEAR","RECIPE_LIST_SAVE","SHOPPING_LIST_CREATE","SHOPPING_LIST_CLEAR","getIngredientListForRecipes","ingredientsGatherable","ingredientsCrafted","ingredientsOther","ingredientsPurchased","itemData","getAndSortRecipeResults","XivApiService","foundItem","ig","io","val","addGatheringItemData","orderBy","uniqBy","ic","gatheringItemId","filteredGatheringPoints","GATHERING_ITEM_POINTS","point","startsWith","pointData","getPointData","itemId","filteredFishingSpots","FISHING_SPOTS","spot","path","pd","namePath","areaPath","regionPath","levelPath","typePath","area","region","gatheringClass","Mining","Quarrying","Logging","Harvesting","hasFishingSpotMatch","matched","fishingId","recipeResults","nextRecipeResults","recipe","t1","t2","rr","recipeListEntry","rle","_loop","itemCategory","amount","gatheringMapNode","ITEM_TO_GATHERING_ITEM_MAPPING","mapping","ingredientRecipe","fishingSpotMatch","existingIngredientGatherable","existingAmount","existingIngredientCrafted","ir","existingIngredientOther","ip","_x6","recipeSearchRequest","apiRequestFailure","saveMyRecipeList","myRecipeList","recipeListSave","createMyShoppingList","clearMyRecipeList","clearMyShoppingList","RecipeListService","myShoppingList","shoppingList","SortableTableHeaderCell","text","sortFunc","applySorting","style","cursor","faSort","XivIcon","badge","image","tooltip","htmlImage","url","altText","content","htmlBadge","Badge","cx","ShoppingList","ingredientsGatherableSort","func","direction","itemsOwned","updateGatherableIngredients","gatherableStateVars","objectSpread","ingredientsCrystals","newIngredientsGatherableSort","obtainedItems","_window","window","scrollX","scrollY","clone","pull","x","y","scrollTo","_this$props$shoppingL","_this$state","XivIcon_XivIcon","common_SortableTableHeaderCell","handleApplyIngredientsGatherableSort","handleOwnershipSort","locationSelectId","gatheringType","owned","handleLocationUpdate","handleToggleItemOwned","craftClass","craftLevel","FilterDropdown","label","applyFilterFunc","DropdownButton","Dropdown","craftingClass","calculateRemainingExp","currentExp","totalExp","calculateRemainingItems","remainingExp","expPerItem","ceil","calculateProgressPercentage","floor","tableHeaders","CalculationsTableHeader","applySortFunc","h","CalculationsTableBody","focusedRow","levelingGuide","LEVELING_GUIDE_LINKS","g","matchedPage","pages","p","maxLevel","minLevel","updateField","toNumber","focused","remainingExperience","remainingItems","progressPercentage","popover","Popover","href","getLevelingGuidePageUrl","rel","onFocus","handleRowFocus","onBlur","trigger","placement","rootClose","faIcon","validateNumericFieldChange","ProgressBar","now","CraftingGatheringCalculator","sortDirection","filterFunc","innerText","targetCraftingClass","otherCraftingClasses","EXP_PER_LEVEL","sortedAndFilteredCraftingClassData","getSortedCraftingClassData","getFilteredCraftingClassData","FilterDropdown_FilterDropdown","applyFilter","CalculationsTableHeader_CalculationsTableHeader","applySort","calculator_CalculationsTableBody","RecipeHelper","lastSearch","cloneDeep","splice","indexOf","sortBy","s","toLowerCase","_this$setState","searchRecipes","newValue","document","getElementsByName","focus","search","currentTab","omit","myClonedList","reject","_this$props3","Tabs","activeKey","onSelect","Tab","eventKey","calculator_CraftingGatheringCalculator","RecipeSearch_RecipeSearch","handleFieldUpdate","handleClear","toggleListItem","MyList_MyList","ShoppingList_ShoppingList","recipeActions","string","LoadingOverlay","externalLink","XivCraftingGatheringHelper","Navigation_Navigation","Container","fluid","components_RecipeHelper","process","LoadingOverlay_LoadingOverlay","keys","actions","INITIAL_STATE","rootReducer","combineReducers","local","action","unset","createStore","applyMiddleware","thunk","App","Provider","components_XivCraftingGatheringHelper","ReactDOM","render","components_App","getElementById"],"mappings":"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","file":"static/js/main.201b7abe.chunk.js","sourcesContent":["import CRAFTING_CLASSES from '../data/crafting-classes'\nimport { applyChanges, diff } from 'diff-json'\nimport {\n  filter as _filter,\n  find as _find,\n  get as _get,\n  includes as _includes,\n  map as _map,\n  set as _set,\n  values as _values\n} from 'lodash'\n\nconst KEYS = {\n  CHARACTER_DATA: 'character',\n  CRAFTING_CLASS_DATA: 'craftingClasses',\n  MY_RECIPE_LIST: 'myRecipeList',\n  MY_SHOPPING_LIST: 'myShoppingList',\n  CURRENT_TAB: 'currentTab',\n  OWNED_ITEMS: 'ownedItems'\n}\n\nfunction get (key, defaultValue) {\n  const data = localStorage.getItem(key)\n  if (!!data) {\n    return JSON.parse(data)\n  }\n  return defaultValue\n}\n\nfunction store (key, data) {\n  localStorage.setItem(key, JSON.stringify(data))\n}\n\nfunction clear (key) {\n  if (!!localStorage.getItem(key)) {\n    localStorage.removeItem(key)\n  }\n}\n\nexport function getObtainedItems () {\n  return get(KEYS.OWNED_ITEMS, [])\n}\n\nexport function storeObtainedItems (obtainedItems) {\n  store(KEYS.OWNED_ITEMS, obtainedItems)\n}\n\nexport function getCurrentTab () {\n  return get(KEYS.CURRENT_TAB)\n}\n\nexport function storeCurrentTab (currentTab) {\n  store(KEYS.CURRENT_TAB, currentTab)\n}\n\nexport function getMyRecipeList () {\n  return get(KEYS.MY_RECIPE_LIST, [])\n}\n\nexport function getMyShoppingList () {\n  return get(KEYS.MY_SHOPPING_LIST, {})\n}\n\nexport function storeCharacterData (characterData) {\n  store(KEYS.CHARACTER_DATA, characterData)\n}\n\nexport function storeCraftingClassData (craftingClasses) {\n  store(KEYS.CRAFTING_CLASS_DATA, craftingClasses)\n}\n\nexport function storeMyRecipeList (myRecipeList) {\n  store(KEYS.MY_RECIPE_LIST, myRecipeList)\n}\n\nexport function storeMyShoppingList (myShoppingList) {\n  store(KEYS.MY_SHOPPING_LIST, myShoppingList)\n}\n\nexport function clearCharacterData () {\n  clear(KEYS.CHARACTER_DATA)\n}\n\nexport function clearCraftingClassData () {\n  clear(KEYS.CRAFTING_CLASS_DATA)\n}\n\nexport function clearMyRecipeList () {\n  clear(KEYS.MY_RECIPE_LIST)\n}\n\nexport function clearMyShoppingList () {\n  clear(KEYS.MY_SHOPPING_LIST)\n}\n\nexport function clearObtainedItems () {\n  clear(KEYS.OWNED_ITEMS)\n}\n\nexport function retrieveAndUpdateCraftingClassData () {\n  // get the default crafting class data\n  const defaultCraftingClasses = getDefaultCraftingClasses()\n\n  // retrieve the stored data from local storage\n  const storedData = localStorage.getItem(KEYS.CRAFTING_CLASS_DATA)\n\n  // if there is no stored data, return the default data\n  if (!storedData) {\n    return defaultCraftingClasses\n  }\n\n  // if there is stored data, convert it to JSON\n  const craftingClasses = JSON.parse(storedData)\n\n  // create a variable for the result\n  const result = []\n\n  // cycle through all \"default\" classes\n  defaultCraftingClasses.forEach(defaultCraftingClass => {\n    // retrieve the matching stored class\n    const storedCraftingClass = _find(craftingClasses, c => c.abbreviation === defaultCraftingClass.abbreviation)\n\n    // if there is no matching stored class data, add the default for this class to the result\n    if (!storedCraftingClass) {\n      result.push(defaultCraftingClass)\n      return\n    }\n\n    // get any added data to the default data set and apply it to the stored data\n    const classDiffs = _filter(diff(storedCraftingClass, defaultCraftingClass), d => d.type === 'add')\n    if (classDiffs.length > 0) {\n      applyChanges(storedCraftingClass, classDiffs)\n    }\n\n    // get any leveling guide data and remove it from stored data\n    const levelingGuideDiffs = _filter(diff(storedCraftingClass, defaultCraftingClass), d => d.key === 'levelingGuide')\n    if (levelingGuideDiffs.length > 0) {\n      applyChanges(storedCraftingClass, levelingGuideDiffs)\n    }\n\n    // add this record to the result to return\n    result.push(storedCraftingClass)\n  })\n\n  // send back the updated stored data\n  return result\n}\n\nexport function retrieveAndUpdateCharacterData () {\n  // get the stored character data\n  const storedData = localStorage.getItem(KEYS.CHARACTER_DATA)\n\n  // if there is no character data, return undefined\n  if (!storedData) {\n    return undefined\n  }\n\n  // if there is, update it\n  // TBD\n\n  // return the character data\n  return JSON.parse(storedData)\n}\n\nexport function updateCraftingClassDataWithCharacterData () {\n  const classJobCategories = ['Disciple of the Land', 'Disciple of the Hand']\n  const craftingClassData = retrieveAndUpdateCraftingClassData()\n  const characterData = _filter(_values(_get(retrieveAndUpdateCharacterData(), 'Character.ClassJobs')),\n    c => _includes(classJobCategories, _get(c, 'Class.ClassJobCategory.Name')))\n\n  return _map(craftingClassData, c => {\n    const lodestoneClassData = _find(characterData, d => _get(d, 'Class.Abbreviation') === _get(c, 'abbreviation'))\n    _set(c, 'currentLevel', _get(lodestoneClassData, 'Level', 1))\n    _set(c, 'currentExperience', _get(lodestoneClassData, 'ExpLevel', 0))\n    _set(c, 'totalExperience', _get(lodestoneClassData, 'ExpLevelMax', c.totalExperience))\n    return c\n  })\n}\n\nexport function getDefaultCraftingClasses () {\n  return _map(CRAFTING_CLASSES, c => {\n    c.currentLevel = 1\n    c.currentExperience = 0\n    c.experiencePerItem = 1\n    c.totalExperience = 300\n    return c\n  })\n}\n","import axios from 'axios'\nimport { map, get, isArray, set, toLower } from 'lodash'\n// import UNLOADED_CHARACTER from '../data/mock/unloadedCharacter'\n\n// const PRIVATE_KEY = '257f7d4532a74f15a429b5262d51d0f3938964ea78124b1ca8da9459accc15b7'\nconst BASE_URL = 'https://xivapi.com'\n\n/**\n * Retrieves the URL of an icon provided in a response from XIVAPI.\n * @param   {string}  iconRelativePath  The relative path of the icon.\n * @returns {string}                    The full URL path of the icon.\n */\nexport const getIconUrl = iconRelativePath => `${BASE_URL}${iconRelativePath}`\n\n/**\n * Finds a character by server and name.\n *\n * @param   {string}  server  The name of the server.\n * @param   {string}  name    The name of the character.\n * @param   {number}  page    The page of results to view.\n * @returns {object}          An object containing the search results.\n */\nexport const findCharacterByServerAndName = async (server, name, page = 1) => {\n  const result = await axios.get(`${BASE_URL}/character/search?name=${name}&server=${server}&page=${page}`)\n  return get(result, 'data', [])\n}\n\n/**\n * Retrieves character data by the character's ID.\n *\n * @param   {number}  id  The ID of the character to retrieve.\n * @returns {object}      An object containing the character's data.\n */\nexport const getCharacterById = async id => {\n  const result = await axios.get(`${BASE_URL}/character/${id}?extended=1`)\n  set(result, 'data.characterId', id)\n  return get(result, 'data', {})\n}\n\n/**\n * Searches for recipes via the XIPAPI.\n *\n * @param   {string}          searchString                    The string for which to search.\n * @param   {object}          [options]                       Options to apply to this search.\n * @param   {boolean}         [options.exact]                 Whether we are searching for the exact string (true) or\n *                                                              should substitute spaces for wildcards (false).\n * @param   {number}          [options.page]                  The page on which to begin the search.\n * @param   {string|[string]} [options.abbreviation]          Any crafting class abbreviations that should be queried.\n * @param   {boolean}         [options.includeMasterRecipes]  Indicates whether master recipes should be included.\n * @returns {object}                                          An object containing search results.\n */\nexport const recipeSearch = async (searchString = '', options = {}) => {\n  const indexes = 'recipe'\n  const size = 20\n  const columns = [\n    'ID',\n    'ClassJob.Abbreviation_en',\n    'ClassJob.Icon',\n    'ClassJob.NameEnglish',\n    'RecipeLevelTable.ClassJobLevel',\n    'Name',\n    'Icon'\n  ]\n\n  const { exact = false, page = 1, includeMasterRecipes = false } = options\n\n  searchString = toLower(searchString)\n\n  if (!exact) {\n    searchString = searchString.replace(' ', '*')\n  }\n\n  const request = {\n    indexes,\n    body: {\n      query: {\n        bool: {\n          must: [\n            {\n              wildcard: {\n                'NameCombined_en': `*${searchString}*`\n              }\n            },\n            // {\n            //   match: {\n            //     'SecretRecipeBookTargetID': 0\n            //   }\n            // },\n            // {\n            //   match: {\n            //     'StatusRequiredTargetID': 0\n            //   }\n            // }\n          ]\n        }\n      },\n      size,\n      from: size * (page - 1),\n      sort: [\n        {\n          'RecipeLevelTable.ClassJobLevel': 'asc'\n        }\n      ]\n    },\n    columns,\n    limit: size,\n    page\n  }\n\n  if (!includeMasterRecipes) {\n    request.body.query.bool.must.push({\n      match: {\n        'SecretRecipeBookTargetID': 0\n      }\n    })\n  }\n\n  if (!!options.abbreviation && !!options.abbreviation.length && options.abbreviation.length < 8) {\n    let { abbreviation } = options\n    const minimum_should_match = 1\n\n    abbreviation = isArray(abbreviation) ? abbreviation : [abbreviation]\n\n    request.body.query.bool.minimum_should_match = minimum_should_match\n    request.body.query.bool.should = map(abbreviation, a => ({\n      match: {\n        'ClassJob.Abbreviation_en': a\n      }\n    }))\n  }\n\n  const result = await axios.post(`${BASE_URL}/search`,\n    request\n  )\n  return get(result, 'data', {})\n}\n\n/**\n * Retrieves a list of recipes by their IDs.\n *\n * @param   {[number]}  recipeIds The IDs of the recipes that should be retrieved.\n * @returns {object}              An object containing the recipe data retrieved.\n */\nexport const getRecipesById = async recipeIds => {\n  const columns = [\n    'ID',\n    'Name'\n  ]\n\n  for (let i = 0; i < 10; i++) {\n    columns.push(`AmountIngredient${i}`)\n    columns.push(`ItemIngredient${i}.ID`)\n    columns.push(`ItemIngredient${i}.Icon`)\n    columns.push(`ItemIngredient${i}.Name`)\n    columns.push(`ItemIngredient${i}.ItemSearchCategoryTargetID`)\n    columns.push(`ItemIngredientRecipe${i}`)\n  }\n\n  const result = await axios.get(`${BASE_URL}/recipe`, {\n    params: {\n      ids: recipeIds.join(','),\n      columns: columns.join(',')\n    }\n  })\n  return get(result, 'data', {})\n}\n\n/**\n * Retrieves a list of items by their IDs.\n *\n * @param   {[number]}  itemIds The IDs of the items that should be retrieved.\n * @returns {object}            An object containing the item data retrieved.\n */\nexport const getItemsById = async itemIds => {\n  const columns = [\n    'ID',\n    'Name',\n    'Icon',\n    'GameContentLinks'\n  ]\n\n  const result = await axios.get(`${BASE_URL}/item`, {\n    params: {\n      ids: itemIds.join(','),\n      columns: columns.join(',')\n    }\n  })\n\n  return get(result, 'data', {})\n}\n","const LODESTONE = 'LODESTONE'\nconst LOCAL = 'LOCAL'\n\nconst REQUEST = 'REQUEST'\nconst SUCCESS = 'SUCCESS'\nconst FAILURE = 'FAILURE'\n\nexport const LOCAL_CLASS_DATA_RETRIEVAL = `${LOCAL}_CLASS_DATA_RETRIEVAL`\nexport const LOCAL_CLASS_DATA_STORE = `${LOCAL}_CLASS_DATA_STORE`\nexport const LOCAL_CLASS_DATA_CLEAR = `${LOCAL}_CLASS_DATA_CLEAR`\n\nexport const LOCAL_CHARACTER_DATA_RETRIEVAL = `${LOCAL}_CHARACTER_DATA_RETRIEVAL`\nexport const LOCAL_CHARACTER_DATA_STORE = `${LOCAL}_CHARACTER_DATA_STORE`\nexport const LOCAL_CHARACTER_DATA_CLEAR = `${LOCAL}_CHARACTER_DATA_CLEAR`\n\nexport const LODESTONE_CHARACTER_DATA_REQUEST = `${LODESTONE}_CHARACTER_DATA_${REQUEST}`\nexport const LODESTONE_CHARACTER_DATA_SUCCESS = `${LODESTONE}_CHARACTER_DATA_${SUCCESS}`\nexport const API_REQUEST_FAILURE = `${LODESTONE}_CHARACTER_DATA_${FAILURE}`\n","import * as LocalStorage from '../../service/localStorage'\nimport * as XivApi from '../../service/xivApi'\nimport * as T from './types'\n\nconst localClassDataRetrieve = localData => ({\n  type: T.LOCAL_CLASS_DATA_RETRIEVAL,\n  localData\n})\n\nconst localClassDataStore = localData => ({\n  type: T.LOCAL_CLASS_DATA_STORE,\n  localData\n})\n\nconst localClassDataClear = () => ({\n  type: T.LOCAL_CLASS_DATA_CLEAR\n})\n\nconst localCharacterDataRetrieve = localData => ({\n  type: T.LOCAL_CHARACTER_DATA_RETRIEVAL,\n  localData\n})\n\nconst localCharacterDataStore = localData => ({\n  type: T.LOCAL_CHARACTER_DATA_STORE,\n  localData\n})\n\nconst localCharacterDataClear = () => ({\n  type: T.LOCAL_CHARACTER_DATA_CLEAR\n})\n\nconst lodestoneCharacterDataRequest = characterId => ({\n  type: T.LODESTONE_CHARACTER_DATA_REQUEST,\n  characterId\n})\n\nconst apiRequestSuccess = (type, payload) => ({\n  type,\n  payload\n})\n\nconst apiRequestFailure = (type, error) => ({\n  type,\n  error\n})\n\nexport const getLocalClassData = () => {\n  return dispatch => {\n    const localData = LocalStorage.retrieveAndUpdateCraftingClassData()\n    dispatch(localClassDataRetrieve(localData))\n  }\n}\n\nexport const saveLocalClassData = classData => {\n  return dispatch => {\n    LocalStorage.storeCraftingClassData(classData)\n    dispatch(localClassDataStore(classData))\n  }\n}\n\nexport const clearLocalClassData = () => {\n  return dispatch => {\n    LocalStorage.clearCraftingClassData()\n    dispatch(localClassDataClear())\n  }\n}\n\nexport const saveLocalCharacterData = characterData => {\n  return dispatch => {\n    LocalStorage.storeCharacterData(characterData)\n    dispatch(localCharacterDataStore(characterData))\n  }\n}\n\nexport const getLocalCharacterData = () => {\n  return dispatch => {\n    const localData = LocalStorage.retrieveAndUpdateCharacterData()\n    dispatch(localCharacterDataRetrieve(localData))\n  }\n}\n\nexport const clearLocalCharacterData = () => {\n  return dispatch => {\n    LocalStorage.clearCharacterData()\n    dispatch(localCharacterDataClear())\n  }\n}\n\nexport const getLodestoneCharacterData = characterId => {\n  return async dispatch => {\n    dispatch(lodestoneCharacterDataRequest(characterId))\n    try {\n      const payload = await XivApi.getCharacterById(characterId)\n      dispatch(apiRequestSuccess(T.LODESTONE_CHARACTER_DATA_SUCCESS, payload))\n      dispatch(saveLocalCharacterData(payload))\n      dispatch(saveLocalClassData(LocalStorage.updateCraftingClassDataWithCharacterData()))\n      dispatch(getLocalClassData())\n    } catch (err) {\n      dispatch(apiRequestFailure(T.API_REQUEST_FAILURE, err))\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Form, Spinner, Modal } from 'react-bootstrap'\nimport { get, map as _map } from 'lodash'\nimport XIV_SERVERS from '../../data/xiv-servers'\nimport * as XivApi from '../../service/xivApi'\n\nclass LodestoneCharacterModal extends React.Component {\n  state = {}\n\n  handleSetField (event) {\n    const { target: { name, value } } = event\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleSearch (page = 1, event) {\n    !!event && event.preventDefault()\n    this.setState({\n      loading: true,\n      page\n    }, this.performSearch)\n  }\n\n  async performSearch () {\n    const { name, server, page } = this.state\n    const result = await XivApi.findCharacterByServerAndName(server, name, page)\n    this.setState({\n      lodestoneResults: result,\n      loading: false\n    })\n  }\n\n  handleClose () {\n    const { onHide } = this.props\n    this.setState({\n      name: undefined,\n      server: undefined,\n      lodestoneResults: undefined,\n      characterId: undefined\n    }, onHide)\n  }\n\n  handleSubmitCharacterSelection () {\n    const { getLodestoneCharacterData } = this.props\n    const { characterId } = this.state\n\n    getLodestoneCharacterData(characterId)\n    this.handleClose()\n  }\n\n  render () {\n    const { show } = this.props\n    const { characterId, loading, lodestoneResults, name, server } = this.state\n\n    const results = get(lodestoneResults, 'Results', [])\n    const prevPage = get(lodestoneResults, 'Pagination.PagePrev')\n    const nextPage = get(lodestoneResults, 'Pagination.PageNext')\n\n    return (\n      <Modal show={show} onHide={this.handleClose.bind(this)}>\n        <Form\n          onSubmit={this.handleSearch.bind(this, 1)}\n          onReset={this.handleClose.bind(this)}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Import Character Data\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form.Group>\n              <Form.Label>Server</Form.Label>\n              <Form.Control name=\"server\" as=\"select\" onChange={this.handleSetField.bind(this)}>\n                <option>Choose a Server</option>\n                {_map(XIV_SERVERS, (server, key) => (\n                  <option key={key} value={server}>{server}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Name</Form.Label>\n              <Form.Control name=\"name\" type=\"text\" onChange={this.handleSetField.bind(this)} />\n            </Form.Group>\n            <Button type=\"submit\" disabled={!name || !server}>\n              Search\n            </Button>\n            <hr />\n            {!!loading && (\n              <div className=\"fullWidth text-center\">\n                <Spinner animation=\"grow\" variant=\"danger\" />\n                <Spinner animation=\"grow\" variant=\"warning\" />\n                <Spinner animation=\"grow\" variant=\"success\" />\n              </div>\n            )}\n            {!loading && !results.length && (\n              <div>\n                No results available.\n              </div>\n            )}\n            {!loading && !!results.length && (\n              <React.Fragment>\n                <div className=\"lodestoneResults\">\n                  {results.map((char, key) => {\n                    const { ID, Name, Avatar } = char\n                    return (\n                      <div\n                        key={key}\n                        className=\"flex justify-between items-center\"\n                      >\n                        <Form.Check\n                          id={ID}\n                          type=\"radio\"\n                          name=\"characterId\"\n                          value={ID}\n                          onChange={this.handleSetField.bind(this)}\n                        />\n                        <label htmlFor={ID}>{Name}</label>\n                        <label htmlFor={ID}>\n                          <img className=\"avatar\" src={Avatar} alt={Name} />\n                        </label>\n                      </div>\n                    )\n                  })}\n                </div>\n                <div className=\"flex justify-between items-center pt2\">\n                  <div className=\"w-50 tl\">\n                    {!!prevPage && (\n                      <Button type=\"button\" onClick={this.handleSearch.bind(this, prevPage)}>\n                        Prev Page\n                      </Button>\n                    )}\n                  </div>\n                  <div className=\"w-50 tr\">\n                    {nextPage && (\n                      <Button type=\"button\" onClick={this.handleSearch.bind(this, nextPage)}>\n                        Next Page\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </React.Fragment>\n            )}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"danger\"\n              type=\"reset\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              disabled={!characterId}\n              onClick={this.handleSubmitCharacterSelection.bind(this)}\n            >\n              Load Data\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    )\n  }\n}\n\nLodestoneCharacterModal.propTypes = {\n  show: PropTypes.bool.isRequired,\n  onHide: PropTypes.func.isRequired\n}\n\nLodestoneCharacterModal.defaultProps = {\n  show: false\n}\n\nexport default LodestoneCharacterModal\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { get } from 'lodash'\nimport { NavDropdown } from 'react-bootstrap'\nimport { clearLocalCharacterData, clearLocalClassData, getLodestoneCharacterData } from '../../store/local/actions'\nimport LodestoneCharacterModal from './LodestoneCharacterModal'\n\nconst getDropdownTitle = characterData => {\n  if (get(characterData, 'Character.Avatar')) {\n    const { Character: { Avatar, Name } } = characterData\n    return (\n      <span className=\"items-center\">\n        {Name}\n        <span className=\"ml2\"><img src={Avatar} alt={Name} className=\"avatar\" /></span>\n      </span>\n    )\n  }\n\n  return 'Options'\n}\n\nclass LodestoneCharacterMenu extends React.Component {\n  state = {\n    showModal: false\n  }\n\n  handleModalToggle (showModal) {\n    this.setState({\n      showModal: showModal\n    })\n  }\n\n  render () {\n    const {\n      characterData,\n      clearLocalCharacterData,\n      clearLocalClassData,\n      getLodestoneCharacterData,\n      lodestoneResults,\n      searchLodestoneCharacterData\n    } = this.props\n\n    const importText = `Import ${!characterData ? '' : 'Different'} Character Data`.replace('  ', ' ')\n\n    return (\n      <React.Fragment>\n        <NavDropdown\n          alignRight\n          title={getDropdownTitle(characterData)}\n        >\n          {!!characterData && (\n            <React.Fragment>\n              <NavDropdown.Item onClick={getLodestoneCharacterData.bind(this, characterData.characterId)}>\n                Refresh Character Data\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n            </React.Fragment>\n          )}\n          <NavDropdown.Item onClick={this.handleModalToggle.bind(this, true)}>\n            {importText}\n          </NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item onClick={clearLocalClassData}>\n            Clear Crafting Class Data\n          </NavDropdown.Item>\n          {!!characterData && (\n            <NavDropdown.Item onClick={clearLocalCharacterData}>\n              Clear Character Data\n            </NavDropdown.Item>\n          )}\n        </NavDropdown>\n        <LodestoneCharacterModal\n          lodestoneResults={lodestoneResults}\n          onHide={this.handleModalToggle.bind(this, false)}\n          searchLodestoneCharacterData={searchLodestoneCharacterData}\n          show={this.state.showModal}\n          getLodestoneCharacterData={getLodestoneCharacterData}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nLodestoneCharacterMenu.propTypes = {\n  characterData: PropTypes.shape()\n}\n\nconst mapStateToProps = () => ({})\n\nconst mapDispatchToProps = dispatch => ({\n  getLodestoneCharacterData: characterId => dispatch(getLodestoneCharacterData(characterId)),\n  clearLocalCharacterData: () => dispatch(clearLocalCharacterData()),\n  clearLocalClassData: () => dispatch(clearLocalClassData())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LodestoneCharacterMenu)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Nav, Navbar, NavbarBrand } from 'react-bootstrap'\nimport LodestoneCharacterMenu from './LodestoneCharacterMenu'\n\nexport default class Navigation extends React.Component {\n  render () {\n    const { characterData } = this.props\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <NavbarBrand>\n          FFXIV Crafting & Gathering Helper\n        </NavbarBrand>\n        <Nav className=\"mr-auto\" />\n        <Nav>\n          <LodestoneCharacterMenu\n            characterData={characterData}\n          />\n        </Nav>\n      </Navbar>\n    )\n  }\n}\n\nNavigation.propTypes = {\n  characterData: PropTypes.shape(),\n  craftingClassData: PropTypes.arrayOf(PropTypes.shape())\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, ButtonGroup, Form, FormControl, OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport { filter, forEach, includes, isEqual } from 'lodash'\nimport CRAFTING_CLASSES from '../../data/crafting-classes'\nimport { getIconUrl } from '../../service/xivApi'\n\nexport default class RecipeSearchForm extends React.Component {\n  state = {\n    craftingClassSelections: <ButtonGroup />\n  }\n\n  componentDidMount () {\n    this.updateCraftingClassSelections()\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    const { recipeSearchClasses } = this.props\n    if (!isEqual(recipeSearchClasses, prevProps.recipeSearchClasses)) {\n      this.updateCraftingClassSelections()\n    }\n  }\n\n  updateCraftingClassSelections () {\n    const { recipeSearchClasses, handleToggleRecipeSearchClass } = this.props\n\n    const buttons = []\n\n    forEach(filter(CRAFTING_CLASSES, cc => cc.type === 'crafting'), cc => {\n      buttons.push((\n        <OverlayTrigger\n          key={`overlayTrigger-${cc.abbreviation}`}\n          overlay={\n            <Tooltip id={`tooltip-${cc.abbreviation}`}>\n              {cc.name}\n            </Tooltip>\n          }\n        >\n          <Button\n            className=\"craftingClassSelections\"\n            key={cc.abbreviation}\n            value={cc.abbreviation}\n            variant={includes(recipeSearchClasses, cc.abbreviation) ? 'primary' : 'light'}\n          >\n            <img\n              src={getIconUrl(cc.icon)}\n              alt={cc.name}\n              onClick={handleToggleRecipeSearchClass.bind(this, cc.abbreviation)}\n            />\n          </Button>\n        </OverlayTrigger>\n      ))\n    })\n\n    const craftingClassSelections = (\n      <ButtonGroup>\n        {buttons}\n      </ButtonGroup>\n    )\n\n    this.setState({\n      craftingClassSelections\n    })\n  }\n\n  render () {\n    const {\n      handleChange,\n      handleReset,\n      handleSubmit,\n      handleToggleRecipeIncludeMaster,\n      handleToggleRecipeSearchExact,\n      recipeSearchExact,\n      recipeSearchIncludeMaster,\n      recipeSearchIsInvalid,\n      recipeSearchString\n    } = this.props\n\n    const { craftingClassSelections } = this.state\n\n    return (\n      <React.Fragment>\n        <Form onReset={handleReset} onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>Enter Your Search Term(s)</Form.Label>\n            <Form.Control\n              as=\"input\"\n              name=\"recipeSearchString\"\n              value={recipeSearchString}\n              onChange={handleChange}\n              isInvalid={!!recipeSearchIsInvalid}\n            />\n            <FormControl.Feedback type=\"invalid\">\n              Please enter a search term.\n            </FormControl.Feedback>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>\n              Choose Crafting Classes to Search\n              <br />\n              <small>(if none are selected, all will be searched)</small>\n            </Form.Label>\n            <br />\n            {craftingClassSelections}\n          </Form.Group>\n          <div className=\"flex flex-row\">\n            <Form.Check onChange={handleToggleRecipeIncludeMaster} checked={recipeSearchIncludeMaster} />\n            <Form.Label>Include Master Recipes</Form.Label>\n          </div>\n          {false && (\n            <div className=\"flex flex-row\">\n              <Form.Check onChange={handleToggleRecipeSearchExact} checked={recipeSearchExact} />\n              <Form.Label>Search Exact Phrase</Form.Label>\n            </div>\n          )}\n          <Button type=\"reset\" variant=\"danger\" className=\"mr1\">Clear</Button>\n          <Button type=\"submit\" variant=\"primary\" className=\"ml1\">Go!</Button>\n        </Form>\n      </React.Fragment>\n    )\n  }\n}\n\nRecipeSearchForm.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  handleReset: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  handleToggleRecipeIncludeMaster: PropTypes.func.isRequired,\n  handleToggleRecipeSearchClass: PropTypes.func.isRequired,\n  handleToggleRecipeSearchExact: PropTypes.func.isRequired,\n  recipeSearchClasses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  recipeSearchExact: PropTypes.bool.isRequired,\n  recipeSearchIncludeMaster: PropTypes.bool.isRequired,\n  recipeSearchIsInvalid: PropTypes.bool.isRequired,\n  recipeSearchString: PropTypes.string.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { isEqual } from 'lodash'\nimport { Button, ButtonGroup } from 'react-bootstrap'\n\nexport default class Pagination extends React.Component {\n  state = {}\n\n  paginate () {\n    const { currentPage, handlePageChange, totalPages } = this.props\n    const minPage = Math.max(1, Math.min(currentPage - 3, totalPages - 6))\n    const maxPage = Math.min(totalPages, minPage + 6)\n\n    const options = []\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"first\"\n          value={1}\n          onClick={handlePageChange}\n          disabled={currentPage === 1}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &lt;&lt;\n        </Button>\n      ))\n    }\n\n    if (totalPages > 1) {\n      options.push((\n        <Button\n          key=\"prev\"\n          value={Math.max(currentPage - 1, 1)}\n          onClick={handlePageChange}\n          disabled={currentPage === 1}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &lt;\n        </Button>\n      ))\n    }\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"prevGroup\"\n          value={Math.max(1, currentPage - 7)}\n          onClick={handlePageChange}\n          disabled={minPage === 1}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          ...\n        </Button>\n      ))\n    }\n\n    for (let i = minPage; i <= maxPage; i++) {\n      const activePage = i === currentPage\n      const option = (\n        <Button\n          key={i}\n          value={i}\n          onClick={handlePageChange}\n          variant={activePage ? 'primary' : 'light'}\n          // style={{ border: '1px solid #def' }}\n        >\n          {i}\n        </Button>\n      )\n\n      options.push(option)\n    }\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"nextGroup\"\n          value={Math.min(totalPages, currentPage + 7)}\n          onClick={handlePageChange}\n          disabled={maxPage === totalPages}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          ...\n        </Button>\n      ))\n    }\n\n    if (totalPages > 1) {\n      options.push((\n        <Button\n          key=\"next\"\n          value={Math.min(currentPage + 1, totalPages)}\n          onClick={handlePageChange}\n          disabled={currentPage === totalPages}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &gt;\n        </Button>\n      ))\n    }\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"last\"\n          value={totalPages}\n          onClick={handlePageChange}\n          disabled={currentPage === totalPages}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &gt;&gt;\n        </Button>\n      ))\n    }\n\n    this.setState({\n      options\n    })\n  }\n\n  componentDidMount () {\n    this.paginate()\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    if (!isEqual(this.props, prevProps)) {\n      this.paginate()\n    }\n  }\n\n  render () {\n    const { options } = this.state\n    return (\n      <div>\n        <ButtonGroup>\n          {options}\n        </ButtonGroup>\n      </div>\n    )\n  }\n}\n\nPagination.propTypes = {\n  currentPage: PropTypes.number.isRequired,\n  handlePageChange: PropTypes.func.isRequired,\n  totalPages: PropTypes.number.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { find, get } from 'lodash'\nimport { Button, Table } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusSquare, faMinusSquare } from '@fortawesome/free-solid-svg-icons'\nimport { getIconUrl } from '../../service/xivApi'\nimport Pagination from '../common/Pagination'\n\nexport default class RecipeSearchResult extends React.Component {\n  render () {\n    const {\n      clearRecipeSearch,\n      handlePageChange,\n      handleTabChange,\n      handleToggleListItem,\n      myList,\n      pagination,\n      recipeList\n    } = this.props\n\n    if (!recipeList.length) {\n      return (\n        <div className=\"tc\">\n          No Results to Display\n        </div>\n      )\n    }\n\n    const pageTotal = get(pagination, 'PageTotal')\n    const pageCurrent = get(pagination, 'Page')\n\n    return (\n      <Table className=\"recipes\" hover striped>\n        <thead>\n        <tr>\n          <td colSpan={5} className=\"tc\">\n            <Pagination currentPage={pageCurrent} totalPages={pageTotal} handlePageChange={handlePageChange} />\n          </td>\n        </tr>\n        <tr>\n          <th />\n          <th>Crafting Class</th>\n          <th>Item Name</th>\n          <th>Required Level to Craft</th>\n          <th>Add/Remove</th>\n        </tr>\n        </thead>\n        <tbody>\n        {recipeList.map((r, key) => {\n          const iconUrl = getIconUrl(get(r, 'Icon', ''))\n          const name = get(r, 'Name')\n          const craftingClassName = get(r, 'ClassJob.NameEnglish')\n          const level = get(r, 'RecipeLevelTable.ClassJobLevel')\n          const isOnList = !!find(myList, item => get(item, 'ID') === get(r, 'ID'))\n\n          return (\n            <tr key={key}>\n              <td><img src={iconUrl} alt={name} /></td>\n              <td>{craftingClassName}</td>\n              <td>{name}</td>\n              <td>{level}</td>\n              <td>\n                <Button onClick={handleToggleListItem.bind(this, r)} variant={isOnList ? 'danger' : 'success'}>\n                  <FontAwesomeIcon\n                    icon={isOnList ? faMinusSquare : faPlusSquare}\n                  />\n                </Button>\n              </td>\n            </tr>\n          )\n        })}\n        </tbody>\n        <tfoot>\n        <tr>\n          <td colSpan={5} className=\"tc\">\n            <Pagination currentPage={pageCurrent} totalPages={pageTotal} handlePageChange={handlePageChange} />\n          </td>\n        </tr>\n        <tr>\n          <td colSpan={5}>\n            <div className=\"w-100 dib tc\">\n              <Button className=\"mh1\" onClick={clearRecipeSearch.bind(this)} variant=\"danger\">\n                Clear Recipe Search\n              </Button>\n              <Button className=\"mh1\" onClick={handleTabChange.bind(this, 'recipe-list')}>\n                Go to Recipe List\n              </Button>\n            </div>\n          </td>\n        </tr>\n        </tfoot>\n      </Table>\n    )\n  }\n}\n\nRecipeSearchResult.propTypes = {\n  clearRecipeSearch: PropTypes.func.isRequired,\n  handlePageChange: PropTypes.func.isRequired,\n  handleTabChange: PropTypes.func.isRequired,\n  handleToggleListItem: PropTypes.func.isRequired,\n  myList: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  pagination: PropTypes.shape().isRequired,\n  recipeList: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  ready: PropTypes.bool.isRequired\n}\n\nRecipeSearchResult.defaultProps = {\n  myList: [],\n  pagination: {},\n  recipeList: [],\n  ready: true\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { get } from 'lodash'\nimport RecipeSearchForm from './RecipeSearchForm'\nimport RecipeSearchResult from './RecipeSearchResult'\n\nexport default class RecipeSearch extends React.Component {\n  render () {\n    const {\n      clearRecipeSearch,\n      handleChange,\n      handlePageChange,\n      handleReset,\n      handleSubmit,\n      handleTabChange,\n      handleToggleListItem,\n      handleToggleRecipeIncludeMaster,\n      handleToggleRecipeSearchClass,\n      handleToggleRecipeSearchExact,\n      myList,\n      recipeSearchClasses,\n      recipeSearchExact,\n      recipeSearchIncludeMaster,\n      recipeSearchIsInvalid,\n      recipeSearchResults,\n      recipeSearchString\n    } = this.props\n\n    const pagination = get(recipeSearchResults, 'Pagination')\n    const recipeList = get(recipeSearchResults, 'Results')\n\n    return (\n      <React.Fragment>\n        <RecipeSearchForm\n          handleChange={handleChange}\n          handleReset={handleReset}\n          handleSubmit={handleSubmit}\n          handleToggleRecipeIncludeMaster={handleToggleRecipeIncludeMaster}\n          handleToggleRecipeSearchClass={handleToggleRecipeSearchClass}\n          handleToggleRecipeSearchExact={handleToggleRecipeSearchExact}\n          recipeSearchClasses={recipeSearchClasses}\n          recipeSearchExact={recipeSearchExact}\n          recipeSearchIncludeMaster={recipeSearchIncludeMaster}\n          recipeSearchIsInvalid={recipeSearchIsInvalid}\n          recipeSearchString={recipeSearchString}\n        />\n        <hr />\n        <RecipeSearchResult\n          clearRecipeSearch={clearRecipeSearch}\n          handlePageChange={handlePageChange}\n          handleTabChange={handleTabChange}\n          handleToggleListItem={handleToggleListItem}\n          myList={myList}\n          pagination={pagination}\n          recipeList={recipeList}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nRecipeSearch.propTypes = {\n  clearRecipeSearch: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handlePageChange: PropTypes.func.isRequired,\n  handleReset: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  handleTabChange: PropTypes.func.isRequired,\n  handleToggleListItem: PropTypes.func.isRequired,\n  handleToggleRecipeIncludeMaster: PropTypes.func.isRequired,\n  handleToggleRecipeSearchClass: PropTypes.func.isRequired,\n  handleToggleRecipeSearchExact: PropTypes.func.isRequired,\n  myList: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  recipeSearchClasses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  recipeSearchExact: PropTypes.bool.isRequired,\n  recipeSearchIncludeMaster: PropTypes.bool.isRequired,\n  recipeSearchIsInvalid: PropTypes.bool.isRequired,\n  recipeSearchResults: PropTypes.shape(),\n  recipeSearchString: PropTypes.string.isRequired\n}\n\nRecipeSearch.defaultProps = {\n  myList: [],\n  recipeSearchExact: false,\n  recipeSearchIncludeMaster: false,\n  recipeSearchResults: {}\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Form, Table } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMinusSquare } from '@fortawesome/free-solid-svg-icons'\nimport { getIconUrl } from '../../service/xivApi'\n\nexport default class MyList extends React.Component {\n  render () {\n    const {\n      handleClearList,\n      handleTabChange,\n      handleToggleListItem,\n      handleUpdateQuantity,\n      list\n    } = this.props\n\n    if (!list.length) {\n      return (\n        <div className=\"tc\">\n          No Items in List\n          <hr />\n          <Button onClick={handleTabChange.bind(this, 'search')}>\n            Back to Search\n          </Button>\n        </div>\n      )\n    }\n\n    return (\n      <Table className=\"recipes\" hover striped>\n        <thead>\n        <tr>\n          <th />\n          <th>Crafting Class</th>\n          <th>Item Name</th>\n          <th>Required Level to Craft</th>\n          <th>Quantity</th>\n          <th>Remove</th>\n        </tr>\n        </thead>\n        <tbody>\n        {list.map((i, k) => (\n          <tr key={k}>\n            <td><img src={getIconUrl(i.Icon)} alt={i.Name} /></td>\n            <td>{i.ClassJob.NameEnglish}</td>\n            <td>{i.Name}</td>\n            <td>{i.RecipeLevelTable.ClassJobLevel}</td>\n            <td>\n              <Form.Control type=\"number\" value={i.quantity} onChange={handleUpdateQuantity.bind(this, i)} />\n            </td>\n            <td>\n              <Button variant=\"danger\" onClick={handleToggleListItem.bind(this, i)}>\n                <FontAwesomeIcon icon={faMinusSquare} />\n              </Button>\n            </td>\n          </tr>\n        ))}\n        </tbody>\n        {list.length && (\n          <tfoot>\n          <tr>\n            <td colSpan={6} className=\"tc\">\n              <div className=\"space-between\">\n                <Button variant=\"danger\" onClick={handleClearList}>\n                  Clear Recipe List\n                </Button>\n                <Button variant=\"primary\" onClick={handleTabChange.bind(this, 'shopping-list')}>\n                  View My Shopping List\n                </Button>\n              </div>\n            </td>\n          </tr>\n          </tfoot>\n        )}\n      </Table>\n    )\n  }\n}\n\nMyList.propTypes = {\n  handleClearList: PropTypes.func.isRequired,\n  handleTabChange: PropTypes.func.isRequired,\n  handleToggleListItem: PropTypes.func.isRequired,\n  handleUpdateQuantity: PropTypes.func.isRequired,\n  list: PropTypes.arrayOf(PropTypes.shape({\n    ClassJob: PropTypes.shape({\n      Abbreviation_en: PropTypes.string.isRequired,\n      NameEnglish: PropTypes.string.isRequired\n    }),\n    Icon: PropTypes.string.isRequired,\n    Name: PropTypes.string.isRequired,\n    quantity: PropTypes.number,\n    RecipeLevelTable: PropTypes.shape({\n      ClassJobLevel: PropTypes.number.isRequired\n    }).isRequired\n  })).isRequired\n}\n\nMyList.defaultProps = {\n  list: []\n}\n","const RECIPE_SEARCH = 'RECIPE_SEARCH'\nconst RECIPE_LIST = 'RECIPE_LIST'\nconst SHOPPING_LIST = 'SHOPPING_LIST'\n\nexport const RECIPE_SEARCH_REQUEST = `${RECIPE_SEARCH}_SEARCH`\nexport const RECIPE_SEARCH_SUCCESS = `${RECIPE_SEARCH}_SUCCESS`\nexport const RECIPE_SEARCH_FAILURE = `${RECIPE_SEARCH}_FAILURE`\nexport const RECIPE_SEARCH_CLEAR = `${RECIPE_SEARCH}_CLEAR`\n\n// export const RECIPE_LIST_ADD = `${RECIPE_LIST}_ADD`\n// export const RECIPE_LIST_REMOVE = `${RECIPE_LIST}_REMOVE`\nexport const RECIPE_LIST_CLEAR = `${RECIPE_LIST}_CLEAR`\nexport const RECIPE_LIST_SAVE = `${RECIPE_LIST}_SAVE`\n\nexport const SHOPPING_LIST_CREATE = `${SHOPPING_LIST}_CREATE`\nexport const SHOPPING_LIST_CLEAR = `${SHOPPING_LIST}_CLEAR`\n","import { concat, filter, find, forEach, get, includes, map, set, toLower, uniqBy, orderBy } from 'lodash'\nimport ITEM_TO_GATHERING_ITEM_MAPPING from '../data/item-to-gathering-item-mapping'\nimport GATHERING_ITEM_POINTS from '../data/gathering-item-points'\nimport FISHING_SPOTS from '../data/fishing-spots'\nimport * as XivApiService from './xivApi'\n\n/**\n * Gets a list of ingredients required to craft a given set of recipes.\n *\n * @param recipeList\n * @returns {Promise<*>}\n */\nexport const getIngredientListForRecipes = async recipeList => {\n  if (!recipeList || !recipeList.length) return {}\n\n  // we will want to keep the following lists:\n  // 1. Ingredients that can be gathered\n  const ingredientsGatherable = []\n\n  // 2. Ingredients that can be crafted\n  const ingredientsCrafted = []\n\n  // 3. Ingredients that can be obtained from monsters\n  const ingredientsOther = []\n\n  // 3. Ingredients that can be bought (that cannot be gathered or dropped by monsters)\n  const ingredientsPurchased = []\n\n  await getAndSortRecipeResults(recipeList,\n    ingredientsGatherable,\n    ingredientsCrafted,\n    ingredientsPurchased,\n    ingredientsOther\n  )\n\n  // get item IDs for the gatherable and purchasable things so we can get their info\n  const itemIds = map(concat(ingredientsGatherable, ingredientsOther), item => get(item, 'itemId'))\n  const itemData = await XivApiService.getItemsById(itemIds)\n\n  forEach(get(itemData, 'Results', []), item => {\n    const foundItem = find(ingredientsGatherable, ig => get(ig, 'itemId') === get(item, 'ID')) ||\n      find(ingredientsOther, io => get(io, 'itemId') === get(item, 'ID'))\n    set(foundItem, 'name', get(item, 'Name'))\n    set(foundItem, 'icon', XivApiService.getIconUrl(get(item, 'Icon')))\n    // set(foundItem, 'gameContentLinks', get(item, 'GameContentLinks', {}))\n    set(foundItem, 'gameContentLinks',\n      filter(\n        map(\n          get(item, 'GameContentLinks', {}), (value, key) => ({ key, value })\n        ), result => {\n          const val = toLower(result.key)\n          return includes(val, 'shop') && !includes(val, 'special')\n        }\n      )\n    )\n\n    if (!!get(foundItem, 'gameContentLinks.length')) {\n      ingredientsPurchased.push(foundItem)\n    }\n  })\n\n  // add gathering item data\n  addGatheringItemData(ingredientsGatherable)\n\n  // sort the results\n  return {\n    ingredientsCrafted: orderBy(uniqBy(ingredientsCrafted, ic => get(ic, 'ID')), 'Name'),\n    ingredientsGatherable: orderBy(ingredientsGatherable, 'name'),\n    ingredientsPurchased: orderBy(ingredientsPurchased, 'name'),\n    ingredientsOther: orderBy(ingredientsOther, 'name')\n  }\n}\n\nconst addGatheringItemData = ingredientsGatherable => {\n  forEach(ingredientsGatherable, item => {\n    const gatheringItemId = get(item, 'gatheringItemId')\n\n    if (!!gatheringItemId) {\n      const filteredGatheringPoints = filter(\n        GATHERING_ITEM_POINTS, point => get(point, 'ID', '').startsWith(`${gatheringItemId}.`)\n      )\n\n      const namePath = 'GatheringPoint.PlaceName.Name_en'\n      const areaPath = 'GatheringPoint.TerritoryType.PlaceName.Name_en'\n      const regionPath = 'GatheringPoint.TerritoryType.PlaceNameRegion.Name_en'\n      const levelPath = 'GatheringPoint.GatheringPointBase.GatheringLevel'\n      const typePath = 'GatheringPoint.GatheringPointBase.GatheringType.Name_en'\n      const aetherytePath = 'GatheringPoint.TerritoryType.AetheryteTargetID'\n\n      const pointData = map(filteredGatheringPoints, point => getPointData(\n        point,\n        namePath,\n        areaPath,\n        regionPath,\n        levelPath,\n        typePath,\n        aetherytePath\n      ))\n\n      set(item, 'pointData', orderBy(pointData, ['region', 'area', 'name']))\n    } else {\n      const itemId = get(item, 'itemId')\n      const filteredFishingSpots = filter(FISHING_SPOTS, spot => {\n        for (let i = 0; i < 10; i++) {\n          const path = `Item${i}TargetID`\n          const fishId = get(spot, path)\n          if (fishId === itemId) return true\n        }\n      })\n\n      const namePath = 'PlaceName.Name_en'\n      const areaPath = 'TerritoryType.PlaceName.Name_en'\n      const regionPath = 'TerritoryType.PlaceNameRegion.Name_en'\n      const levelPath = 'GatheringLevel'\n\n      const pointData = map(filteredFishingSpots, point => {\n        const pd = getPointData(\n          point,\n          namePath,\n          areaPath,\n          regionPath,\n          levelPath,\n          ''\n        )\n        set(pd, 'type', 'Fishing')\n        set(pd, 'gatheringClass', 'Fisherman')\n        return pd\n      })\n\n      set(item, 'pointData', orderBy(pointData, ['region', 'area', 'name']))\n    }\n  })\n}\n\nconst getPointData = (data, namePath, areaPath, regionPath, levelPath, typePath) => {\n  const typeMap = {\n    'Mining': 'Miner',\n    'Quarrying': 'Miner',\n    'Logging': 'Botanist',\n    'Harvesting': 'Botanist'\n  }\n  const name = get(data, namePath)\n  const area = get(data, areaPath)\n  const region = get(data, regionPath)\n  const level = get(data, levelPath)\n  const type = get(data, typePath)\n\n  return {\n    name,\n    area,\n    region,\n    level,\n    gatheringClass: get(typeMap, type),\n    type,\n    id: get(data, 'ID')\n  }\n}\n\nconst hasFishingSpotMatch = itemId => {\n  let matched = false\n  forEach(FISHING_SPOTS, spot => {\n    for (let i = 0; i < 10; i++) {\n      const path = `Item${i}TargetID`\n      const fishingId = get(spot, path)\n      if (itemId === fishingId) {\n        matched = true\n        return\n      }\n    }\n  })\n\n  return matched\n}\n\nconst getAndSortRecipeResults = async (\n  recipeList,\n  ingredientsGatherable,\n  ingredientsCrafted,\n  ingredientsPurchased,\n  ingredientsOther\n) => {\n  const recipeIds = map(recipeList, recipe => get(recipe, 'ID'))\n  const recipeResults = get(await XivApiService.getRecipesById(recipeIds), 'Results', [])\n  const nextRecipeResults = []\n  forEach(recipeResults, rr => {\n    const recipeListEntry = find(recipeList, rle => get(rle, 'ID') === get(rr, 'ID'))\n    set(rr, 'quantity', get(recipeListEntry, 'quantity'))\n\n    // go through each ingredient\n    for (let i = 0; i < 10; i++) {\n      const itemId = get(rr, `ItemIngredient${i}.ID`)\n      const itemCategory = get(rr, `ItemIngredient${i}.ItemSearchCategoryTargetID`)\n      const amount = get(rr, `AmountIngredient${i}`)\n      const gatheringMapNode = find(ITEM_TO_GATHERING_ITEM_MAPPING, mapping => get(mapping, 'ItemID') === itemId)\n      const gatheringItemId = get(gatheringMapNode, 'GatheringItemID')\n      const ingredientRecipe = get(rr, `ItemIngredientRecipe${i}[0]`)\n      const quantity = get(rr, 'quantity')\n      const fishingSpotMatch = hasFishingSpotMatch(itemId)\n\n      if (!!gatheringItemId || !!fishingSpotMatch) {\n        const existingIngredientGatherable = find(ingredientsGatherable, ig => get(ig, 'itemId') === itemId)\n        if (!!existingIngredientGatherable) {\n          const existingAmount = get(existingIngredientGatherable, 'amount')\n          set(existingIngredientGatherable, 'amount', existingAmount + (amount * quantity))\n        } else {\n          ingredientsGatherable.push({ itemId, gatheringItemId, amount: amount * quantity, itemCategory })\n        }\n      }\n\n      if (!!ingredientRecipe) {\n        const existingIngredientCrafted = find(ingredientsCrafted, ir => get(ingredientRecipe, 'ID') === get(ir, 'ID'))\n        const existingAmount = get(existingIngredientCrafted, 'quantity', 0)\n        set(existingIngredientCrafted || ingredientRecipe, 'quantity', existingAmount + (quantity * amount))\n        if (!existingIngredientCrafted) {\n          nextRecipeResults.push(ingredientRecipe)\n          ingredientsCrafted.push(ingredientRecipe)\n        }\n      }\n\n      if (!gatheringItemId && !ingredientRecipe && !fishingSpotMatch && !!itemId) {\n        const existingIngredientOther = find(ingredientsOther, ip => get(ip, 'itemId') === itemId)\n        if (!!existingIngredientOther) {\n          const existingAmount = get(existingIngredientOther, 'amount')\n          set(existingIngredientOther, 'amount', existingAmount + (amount * quantity))\n        } else {\n          ingredientsOther.push({ itemId, amount: amount * quantity })\n        }\n      }\n    }\n  })\n\n  if (!!nextRecipeResults.length) {\n    await getAndSortRecipeResults(nextRecipeResults,\n      ingredientsGatherable,\n      ingredientsCrafted,\n      ingredientsPurchased,\n      ingredientsOther\n    )\n  }\n}\n","import * as T from './types'\nimport * as LocalStorageService from '../../service/localStorage'\nimport * as RecipeListService from '../../service/recipe'\nimport * as XivApiService from '../../service/xivApi'\n\nconst recipeListClear = () => ({\n  type: T.RECIPE_LIST_CLEAR\n})\n\nconst recipeListSave = recipeList => ({\n  type: T.RECIPE_LIST_SAVE,\n  recipeList\n})\n\nconst shoppingListClear = () => ({\n  type: T.SHOPPING_LIST_CLEAR\n})\n\nconst shoppingListCreate = shoppingList => ({\n  type: T.SHOPPING_LIST_CREATE,\n  shoppingList\n})\n\nconst recipeSearchRequest = params => ({\n  type: T.RECIPE_SEARCH_REQUEST,\n  params\n})\n\nconst apiRequestSuccess = (type, payload) => ({\n  type,\n  payload\n})\n\nconst apiRequestFailure = (type, error) => ({\n  type, error\n})\n\nconst recipeSearchClear = () => ({\n  type: T.RECIPE_SEARCH_CLEAR\n})\n\nexport const saveMyRecipeList = recipeList => dispatch => {\n  LocalStorageService.storeMyRecipeList(recipeList)\n  dispatch(recipeListSave(recipeList))\n  dispatch(createMyShoppingList(recipeList))\n}\n\nexport const clearMyRecipeList = () => dispatch => {\n  LocalStorageService.clearMyRecipeList()\n  dispatch(recipeListClear())\n  dispatch(clearMyShoppingList())\n}\n\nexport const createMyShoppingList = recipeList => async dispatch => {\n  const result = await RecipeListService.getIngredientListForRecipes(recipeList)\n  LocalStorageService.storeMyShoppingList(result)\n  dispatch(shoppingListCreate(result))\n}\n\nexport const clearMyShoppingList = () => dispatch => {\n  LocalStorageService.clearMyShoppingList()\n  dispatch(shoppingListClear())\n}\n\nexport const searchRecipes = (string, params) => async dispatch => {\n  dispatch(recipeSearchRequest({string, ...params}))\n  try {\n    const result = await XivApiService.recipeSearch(string, params)\n    dispatch(apiRequestSuccess(T.RECIPE_SEARCH_SUCCESS, result))\n  } catch (err) {\n    dispatch(apiRequestFailure(T.RECIPE_SEARCH_FAILURE, err))\n  }\n}\n\nexport const clearRecipeSearch = () => dispatch => {\n  dispatch(recipeSearchClear())\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSort } from '@fortawesome/free-solid-svg-icons'\n\nclass SortableTableHeaderCell extends React.Component {\n  render () {\n    const { className, text, sortFunc, applySorting } = this.props\n    return (\n      <th className={className} onClick={applySorting.bind(this, sortFunc)}\n        style={{ cursor: 'pointer' }}\n      >\n        {text}\n        <FontAwesomeIcon\n          className=\"margin-left\"\n          icon={faSort}\n        />\n      </th>\n    )\n  }\n}\n\nSortableTableHeaderCell.propTypes = {\n  text: PropTypes.string.isRequired,\n  sortFunc: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  applySorting: PropTypes.func.isRequired\n}\n\nexport default SortableTableHeaderCell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { get } from 'lodash'\nimport { Badge, OverlayTrigger, Tooltip } from 'react-bootstrap'\n\nexport default class XivIcon extends React.Component {\n  render () {\n    const { badge, className, image, tooltip } = this.props\n\n    const htmlImage = (\n      <img src={image.url} alt={image.altText} />\n    )\n\n    const content = get(tooltip, 'text') ? (\n      <OverlayTrigger overlay={(\n        <Tooltip>\n          {get(tooltip, 'text')}\n        </Tooltip>\n      )}>\n        {htmlImage}\n      </OverlayTrigger>\n    ) : htmlImage\n\n    const htmlBadge = get(badge, 'text') ? (\n      <React.Fragment>\n        <br />\n        <Badge variant={get(badge, 'variant', 'primary')} className=\"xiv-icon-badge\">\n          {get(badge, 'text')}\n        </Badge>\n      </React.Fragment>\n    ) : null\n\n    return (\n      <div className={cx(className)}>\n        {content}\n        {htmlBadge}\n      </div>\n    )\n  }\n}\n\nXivIcon.propTypes = {\n  badge: PropTypes.shape({\n    variant: PropTypes.oneOf(['primary', 'secondary', 'success', 'warning', 'danger', 'light', 'dark']),\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired\n  }),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  image: PropTypes.shape({\n    altText: PropTypes.string.isRequired,\n    className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n    url: PropTypes.string.isRequired\n  }).isRequired,\n  tooltip: PropTypes.shape({\n    text: PropTypes.string.isRequired\n  })\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { FormControl, Table } from 'react-bootstrap'\nimport { clone, filter, get, includes, isEqual, orderBy, pull } from 'lodash'\nimport { getIconUrl } from '../../service/xivApi'\nimport { clearObtainedItems, getObtainedItems, storeObtainedItems } from '../../service/localStorage'\nimport SortableTableHeaderCell from '../common/SortableTableHeaderCell'\nimport XivIcon from '../common/XivIcon'\n\n/**\n * Scrolls to a position on the screen.\n *\n * @param {number} x The X coordinate for scrolling.\n * @param {number} y The Y coodrinate for scrolling.\n */\nfunction scrollToPosition (x, y) {\n  window.scrollTo(x, y)\n}\n\n/**\n * The number of columns in a row.  This allows the subheadings to take up the full width of the table.\n * @type {number}\n */\nconst headingColumns = 7\n\nexport default class ShoppingList extends React.Component {\n  state = {\n    ingredientsGatherableSort: {\n      func: 'name',\n      direction: 'asc'\n    },\n    itemsOwned: getObtainedItems()\n  }\n\n  componentDidMount () {\n    this.updateGatherableIngredients()\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    const { shoppingList } = this.props\n\n    if (!isEqual(shoppingList, prevProps.shoppingList)) {\n      this.updateGatherableIngredients()\n    }\n  }\n\n  updateGatherableIngredients () {\n    const { shoppingList } = this.props\n    const {\n      // ingredientsCrafted,\n      // ingredientsPurchased,\n      ingredientsGatherable\n      // ingredientsOther\n    } = shoppingList\n\n    const gatherableStateVars = {}\n    if (ingredientsGatherable) {\n      ingredientsGatherable.forEach(item => {\n        const key = `gatherable-${item.itemId}-location`\n        gatherableStateVars[key] = get(item, 'pointData[0]', {})\n      })\n    }\n\n    clearObtainedItems()\n\n    this.setState({\n      ...gatherableStateVars,\n      ingredientsGatherable: filter(ingredientsGatherable, ig => get(ig, 'itemCategory') !== 58),\n      ingredientsCrystals: filter(ingredientsGatherable, ig => get(ig, 'itemCategory') === 58),\n      itemsOwned: []\n    })\n  }\n\n  handleLocationUpdate (event) {\n    event.preventDefault()\n\n    const { target: { value, id } } = event\n\n    this.setState({\n      [id]: JSON.parse(value)\n    })\n  }\n\n  handleApplyIngredientsGatherableSort (sortFunc) {\n    const { ingredientsGatherableSort } = this.state\n\n    const sortDirection =\n      // isEqual(JSON.stringify(sortFunc), JSON.stringify(ingredientsGatherableSort.func)) && ingredientsGatherableSort.direction === 'asc'\n      isEqual(\n        JSON.stringify(sortFunc),\n        JSON.stringify(ingredientsGatherableSort.func)\n      ) && ingredientsGatherableSort.direction === 'asc'\n        ? 'desc'\n        : 'asc'\n\n    const newIngredientsGatherableSort = {\n      func: sortFunc,\n      direction: sortDirection\n    }\n\n    this.setState({\n      ingredientsGatherableSort: newIngredientsGatherableSort\n    })\n  }\n\n  handleToggleItemOwned (itemId) {\n    const { scrollX, scrollY } = window\n    const itemsOwned = clone(get(this.state, 'itemsOwned', []))\n\n    if (includes(itemsOwned, itemId)) {\n      pull(itemsOwned, itemId)\n    } else {\n      itemsOwned.push(itemId)\n    }\n\n    storeObtainedItems(itemsOwned)\n\n    this.setState({\n      itemsOwned\n    }, scrollToPosition.bind(this, scrollX, scrollY))\n  }\n\n  handleOwnershipSort (item) {\n    const itemId = get(item, 'itemId', get(item, 'ItemResult.ID'))\n    return includes(get(this.state, 'itemsOwned', []), itemId)\n    // return !!itemId\n  }\n\n  render () {\n    const { shoppingList: { ingredientsCrafted, ingredientsPurchased, ingredientsOther } } = this.props\n    const { ingredientsCrystals, ingredientsGatherable, ingredientsGatherableSort } = this.state\n\n    if (!get(ingredientsGatherable, 'length') && !ingredientsCrafted && !ingredientsPurchased) {\n      return (\n        <div className=\"tc\">\n          No Results to Display\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <div className=\"flex flex-row justify-center items-center\">\n          {!!ingredientsCrystals && (\n            ingredientsCrystals.map(ic => {\n              const { amount, name, icon } = ic\n              return (\n                <span key={name} className=\"ph1\">\n                  <XivIcon\n                    badge={{ text: amount }}\n                    image={{ url: icon, altText: name }}\n                    tooltip={{ text: name }}\n                  />\n                </span>\n              )\n            })\n          )}\n        </div>\n        <Table hover striped className=\"shopping-list\">\n          {!!ingredientsGatherable && !!ingredientsGatherable.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Gatherable Items</th>\n              </tr>\n              <tr>\n                <th />\n                <SortableTableHeaderCell\n                  text=\"Name\"\n                  sortFunc=\"name\"\n                  applySorting={this.handleApplyIngredientsGatherableSort.bind(this)}\n                />\n                <th>Required Class</th>\n                <th>Required Level</th>\n                <th>Quantity</th>\n                <SortableTableHeaderCell\n                  text=\"Location\"\n                  sortFunc={ig => {\n                    const point = get(this.state, `gatherable-${ig.itemId}-location`)\n                    return `${point.region} - ${point.area} - ${point.name}`\n                  }}\n                  applySorting={this.handleApplyIngredientsGatherableSort.bind(this)}\n                />\n                <th>Obtained</th>\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsGatherable,\n                [this.handleOwnershipSort.bind(this), ingredientsGatherableSort.func],\n                ['asc', ingredientsGatherableSort.direction]\n              ).map(item => {\n                const { name, icon, itemId, amount, pointData } = item\n                const key = `gatherable-${itemId}`\n                const locationSelectId = `${key}-location`\n                const gatheringClass = get(this.state, `${locationSelectId}.gatheringClass`)\n                const gatheringType = get(this.state, `${locationSelectId}.type`)\n                const level = get(this.state, `${locationSelectId}.level`)\n                const owned = includes(get(this.state, 'itemsOwned', []), itemId)\n\n                return (\n                  <tr key={key} className={cx(owned ? 'owned' : '')}>\n                    <td><XivIcon image={{ url: icon, altText: name }} /></td>\n                    <td>{name}</td>\n                    <td>{gatheringClass}{!!gatheringType && ` (${gatheringType})`}</td>\n                    <td>{level}</td>\n                    <td>{amount}</td>\n                    <td>\n                      {pointData.length === 1 && (\n                        <React.Fragment>\n                          {pointData[0].region} - {pointData[0].area} {pointData[0].name ? `- ${pointData[0].name}` : '(Unspoiled)'}\n                        </React.Fragment>\n                      )}\n                      {pointData.length > 1 && (\n                        <FormControl\n                          id={locationSelectId}\n                          as=\"select\"\n                          onChange={this.handleLocationUpdate.bind(this)}\n                        >\n                          {pointData.map((point, key) => (\n                            <option key={key} value={JSON.stringify(point)}>\n                              {point.region} - {point.area} {point.name ? `- ${point.name}` : '(Unspoiled)'} (Level {point.level}, {point.gatheringClass})\n                            </option>\n                          ))}\n                        </FormControl>\n                      )}\n                    </td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={itemId}\n                        checked={owned}\n                        onChange={this.handleToggleItemOwned.bind(this, itemId)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n          {!!ingredientsOther && !!ingredientsOther.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Items Obtained Elsewhere</th>\n              </tr>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th />\n                <th />\n                <th>Quantity</th>\n                <th>Location</th>\n                <th>Obtained</th>\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsOther,\n                this.handleOwnershipSort.bind(this),\n                'asc'\n              ).map(item => {\n                const { name, icon, itemId, amount } = item\n                const owned = includes(get(this.state, 'itemsOwned', []), itemId)\n                return (\n                  <tr key={`purchasable-${itemId}`} className={cx(owned ? 'owned' : '')}>\n                    <td><XivIcon image={{ url: icon, altText: name }} /></td>\n                    <td>{name}</td>\n                    <td />\n                    <td />\n                    <td>{amount}</td>\n                    <td>???</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={itemId}\n                        checked={owned}\n                        onChange={this.handleToggleItemOwned.bind(this, itemId)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n          {!!ingredientsPurchased && !!ingredientsPurchased.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Purchasable Items</th>\n              </tr>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Currency</th>\n                <th>Cost</th>\n                <th>Quantity</th>\n                <th>Location</th>\n                <th>Obtained</th>\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsPurchased,\n                this.handleOwnershipSort.bind(this),\n                'asc'\n              ).map(item => {\n                const { name, icon, itemId, amount } = item\n                const owned = includes(get(this.state, 'itemsOwned', []), itemId)\n                return (\n                  <tr key={`purchasable-${itemId}`} className={cx(owned ? 'owned' : '')}>\n                    <td><XivIcon image={{ url: icon, altText: name }} /></td>\n                    <td>{name}</td>\n                    <td>???</td>\n                    <td>???</td>\n                    <td>{amount}</td>\n                    <td>???</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={itemId}\n                        checked={owned}\n                        onChange={this.handleToggleItemOwned.bind(this, itemId)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n          {!!ingredientsCrafted && !!ingredientsCrafted.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Prerequisite Crafts</th>\n              </tr>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Required Class</th>\n                <th>Required Level</th>\n                <th>Quantity</th>\n                <th>Location</th>\n                <th>Obtained</th>\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsCrafted,\n                [this.handleOwnershipSort.bind(this), 'ItemResult.Name_en'],\n                ['asc', 'asc']\n              ).map(item => {\n                const name = get(item, 'ItemResult.Name_en')\n                const icon = get(item, 'ItemResult.Icon')\n                const id = get(item, 'ID')\n                const quantity = get(item, 'quantity')\n                const craftClass = get(item, 'ClassJob.NameEnglish')\n                const craftLevel = get(item, 'RecipeLevelTable.ClassJobLevel')\n                const itemId = get(item, 'ItemResult.ID')\n                const owned = includes(get(this.state, 'itemsOwned', []), itemId)\n                return (\n                  <tr key={`crafted-${id}`} className={cx(owned ? 'owned' : '')}>\n                    <td><XivIcon image={{ url: getIconUrl(icon), altText: name }} /></td>\n                    <td>{name}</td>\n                    <td>{craftClass}</td>\n                    <td>{craftLevel}</td>\n                    <td>{quantity}</td>\n                    <td>N/A</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={itemId}\n                        checked={owned}\n                        onChange={this.handleToggleItemOwned.bind(this, itemId)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n        </Table>\n      </div>\n    )\n  }\n}\n\nShoppingList.propTypes = {\n  shoppingList: PropTypes.shape().isRequired\n}\n\nShoppingList.defaultProps = {\n  shoppingList: {}\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Dropdown, DropdownButton } from 'react-bootstrap'\nimport { orderBy } from 'lodash'\nimport CRAFTING_CLASSES from '../../data/crafting-classes'\n\nexport default class FilterDropdown extends React.Component {\n  render () {\n    const { label, applyFilterFunc } = this.props\n    return (\n      <DropdownButton title={`Showing ${label}`}>\n        <Dropdown.Item onClick={applyFilterFunc.bind(this, c => !!c)}>\n          All\n        </Dropdown.Item>\n        <Dropdown.Divider/>\n        <Dropdown.Item onClick={applyFilterFunc.bind(this, c => c.type === 'crafting')}>\n          Crafting Classes\n        </Dropdown.Item>\n        <Dropdown.Item onClick={applyFilterFunc.bind(this, c => c.type === 'gathering')}>\n          Gathering Classes\n        </Dropdown.Item>\n        <Dropdown.Divider/>\n        {orderBy(CRAFTING_CLASSES, 'name').map((craftingClass, key) => (\n          <Dropdown.Item\n            key={key}\n            onClick={applyFilterFunc.bind(this, c => c.abbreviation === craftingClass.abbreviation)}\n          >\n            {craftingClass.name}\n          </Dropdown.Item>\n        ))}\n      </DropdownButton>\n    )\n  }\n}\n\nFilterDropdown.propTypes = {\n  label: PropTypes.string.isRequired,\n  applyFilterFunc: PropTypes.func.isRequired\n}\n","export function calculateRemainingExp (currentExp, totalExp) {\n  return Math.max(totalExp - currentExp, 0)\n}\n\nexport function calculateRemainingItems (remainingExp, expPerItem) {\n  return Math.ceil(remainingExp / expPerItem)\n}\n\nexport function calculateProgressPercentage (currentExp, totalExp) {\n  return totalExp <= 0 ? 0 : Math.floor((currentExp / totalExp) * 100)\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { calculateProgressPercentage, calculateRemainingExp, calculateRemainingItems } from '../../service/calculations'\nimport SortableTableHeaderCell from '../common/SortableTableHeaderCell'\n\nconst tableHeaders = [\n  { name: 'Class', sortFunc: 'name' },\n  { name: 'Level', sortFunc: 'currentLevel' },\n  { name: 'Current Exp.', sortFunc: 'currentExperience' },\n  { name: 'Required Exp.', sortFunc: undefined },\n  { name: 'Remaining Exp.', sortFunc: c => calculateRemainingExp(c.currentExperience, c.totalExperience) },\n  { name: 'Exp. Per Item', sortFunc: 'experiencePerItem' },\n  {\n    name: 'Remaining Items',\n    sortFunc: c => calculateRemainingItems(\n      calculateRemainingExp(c.currentExperience, c.totalExperience), c.experiencePerItem\n    )\n  },\n  { name: 'Progress', sortFunc: c => calculateProgressPercentage(c.currentExperience, c.totalExperience) }\n]\n\nexport default class CalculationsTableHeader extends React.Component {\n  render () {\n    const { applySortFunc } = this.props\n    return (\n      <thead>\n      <tr>\n        {tableHeaders.map((h, key) => {\n          if (h.sortFunc) {\n            return (\n              <SortableTableHeaderCell\n                key={key}\n                text={h.name}\n                sortFunc={h.sortFunc}\n                applySorting={applySortFunc}\n              />\n            )\n          } else {\n            return (\n              <th key={key}>\n                {h.name}\n              </th>\n            )\n          }\n        })}\n      </tr>\n      </thead>\n    )\n  }\n}\n\nCalculationsTableHeader.propTypes = {\n  applySortFunc: PropTypes.func.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { calculateProgressPercentage, calculateRemainingExp, calculateRemainingItems } from '../../service/calculations'\nimport Form from 'react-bootstrap/es/Form'\nimport { OverlayTrigger, Popover, ProgressBar } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfoCircle as faIcon } from '@fortawesome/free-solid-svg-icons'\nimport { find, set, toNumber } from 'lodash'\nimport LEVELING_GUIDE_LINKS from '../../data/leveling-guide-links'\n\nclass CalculationsTableBody extends React.Component {\n  state = {\n    focusedRow: undefined\n  }\n\n  getLevelingGuidePageUrl (abbreviation, currentLevel) {\n    const classGuideData = find(LEVELING_GUIDE_LINKS, g => g.abbreviation === abbreviation)\n    const { levelingGuide } = classGuideData\n\n    const matchedPage = find(levelingGuide.pages, p => {\n      const { maxLevel, minLevel } = p\n\n      if (currentLevel >= minLevel && currentLevel <= maxLevel) {\n        return true\n      }\n    })\n\n    return !!matchedPage ? `${levelingGuide.url}/${matchedPage.page}/` : levelingGuide.url\n  }\n\n  validateNumericFieldChange (abbreviation, event) {\n    const { target: { value, max, min } } = event\n    const { updateField } = this.props\n\n    if (!!min && toNumber(value) < min) {\n      set(event, 'target.value', min)\n    }\n\n    if (!!max && toNumber(value) > max) {\n      set(event, 'target.value', max)\n    }\n\n    updateField(abbreviation, event)\n  }\n\n  handleRowFocus (abbreviation, focused) {\n    this.setState({\n      focusedRow: focused ? abbreviation : undefined\n    })\n  }\n\n  render () {\n    const { craftingClasses } = this.props\n    return (\n      <tbody>\n      {craftingClasses.map(c => {\n        const remainingExperience = calculateRemainingExp(c.currentExperience, c.totalExperience)\n        const remainingItems = calculateRemainingItems(remainingExperience, c.experiencePerItem)\n        const progressPercentage = calculateProgressPercentage(c.currentExperience, c.totalExperience)\n\n        const popover = (\n          <Popover id={`links-${c.name}`}>\n            <a\n              href={this.getLevelingGuidePageUrl(c.abbreviation, c.currentLevel)}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Leveling Guide\n            </a>\n          </Popover>\n        )\n\n        return (\n          <tr\n            key={`calculationTableRow${c.abbreviation}`}\n            onFocus={this.handleRowFocus.bind(this, c.abbreviation, true)}\n            onBlur={this.handleRowFocus.bind(this, c.abbreviation, false)}\n            className={cx(this.state.focusedRow === c.abbreviation ? 'focused' : undefined)}\n          >\n            <td>\n              <div className=\"flex justify-between items-center\">\n                {c.name}\n                <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover} rootClose>\n                  <FontAwesomeIcon icon={faIcon} className=\"text-primary pointer\" />\n                </OverlayTrigger>\n              </div>\n            </td>\n            <td>\n              <Form.Control\n                name=\"currentLevel\"\n                type=\"number\"\n                value={c.currentLevel}\n                min=\"1\"\n                max=\"70\"\n                onChange={this.validateNumericFieldChange.bind(this, c.abbreviation)}\n              />\n            </td>\n            <td>\n              <Form.Control\n                name=\"currentExperience\"\n                type=\"number\"\n                value={c.currentExperience}\n                min=\"0\"\n                max={c.totalExperience}\n                onChange={this.validateNumericFieldChange.bind(this, c.abbreviation)}\n              />\n            </td>\n            <td>{c.totalExperience}</td>\n            <td>{remainingExperience}</td>\n            <td>\n              <Form.Control\n                name=\"experiencePerItem\"\n                type=\"number\"\n                value={c.experiencePerItem}\n                min=\"1\"\n                onChange={this.validateNumericFieldChange.bind(this, c.abbreviation)}\n              />\n            </td>\n            <td>{remainingItems}</td>\n            <td>\n              <ProgressBar\n                now={progressPercentage}\n                label={`${c.currentExperience} / ${c.totalExperience} (${progressPercentage}%)`}\n              />\n            </td>\n          </tr>\n        )\n      })}\n      </tbody>\n    )\n  }\n}\n\nCalculationsTableBody.propTypes = {\n  craftingClasses: PropTypes.arrayOf(PropTypes.shape()).isRequired\n}\n\nexport default CalculationsTableBody\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Table } from 'react-bootstrap'\nimport { concat, filter, find, isEqual, orderBy, set, toNumber } from 'lodash'\nimport FilterDropdown from './FilterDropdown'\nimport CalculationsTableHeader from './CalculationsTableHeader'\nimport CalculationsTableBody from './CalculationsTableBody'\nimport EXP_PER_LEVEL from '../../data/exp-per-level'\nimport { saveLocalClassData } from '../../store/local/actions'\n\nclass CraftingGatheringCalculator extends React.Component {\n  state = {\n    sort: {\n      func: 'name',\n      direction: 'asc'\n    },\n    filter: {\n      func: undefined,\n      label: 'All'\n    }\n  }\n\n  applySort (sortFunc) {\n    const { sort } = this.state\n    const sortDirection = isEqual(sortFunc, sort.func) && sort.direction === 'asc' ? 'desc' : 'asc'\n    this.setState({\n      sort: {\n        func: sortFunc,\n        direction: sortDirection\n      }\n    })\n  }\n\n  applyFilter (filterFunc, event) {\n    this.setState({\n      filter: {\n        func: filterFunc,\n        label: event.target.innerText\n      }\n    })\n  }\n\n  getSortedCraftingClassData (craftingClassData) {\n    const { sort } = this.state\n    return orderBy(craftingClassData, sort.func, sort.direction)\n  }\n\n  getFilteredCraftingClassData (craftingClassData) {\n    const { filter: { func } } = this.state\n    return filter(craftingClassData, func)\n  }\n\n  updateField (abbreviation, event) {\n    const { target: { value, name } } = event\n    const { craftingClassData, saveLocalClassData } = this.props\n\n    const targetCraftingClass = find(craftingClassData, c => c.abbreviation === abbreviation)\n    const otherCraftingClasses = filter(craftingClassData, c => c.abbreviation !== abbreviation)\n    set(targetCraftingClass, name, toNumber(value))\n\n    if (name === 'currentLevel') {\n      set(targetCraftingClass, 'totalExperience', EXP_PER_LEVEL[value])\n    }\n\n    const updatedCraftingClasses = orderBy(concat(otherCraftingClasses, targetCraftingClass), ['type', 'name'])\n\n    saveLocalClassData(updatedCraftingClasses)\n  }\n\n  render () {\n    const { craftingClassData } = this.props\n    const sortedAndFilteredCraftingClassData = this.getSortedCraftingClassData(\n      this.getFilteredCraftingClassData(craftingClassData)\n    )\n\n    return (\n      <div>\n        <div className=\"w-100 pv3 tc\">\n          <FilterDropdown label={this.state.filter.label} applyFilterFunc={this.applyFilter.bind(this)} />\n        </div>\n        <div className=\"table-responsive\">\n          <Table className=\"calculations\" striped hover>\n            <CalculationsTableHeader applySortFunc={this.applySort.bind(this)} />\n            <CalculationsTableBody\n              craftingClasses={sortedAndFilteredCraftingClassData}\n              updateField={this.updateField.bind(this)}\n            />\n          </Table>\n        </div>\n      </div>\n    )\n  }\n}\n\nCraftingGatheringCalculator.propTypes = {\n  craftingClassData: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  characterData: PropTypes.shape()\n}\n\nconst mapStateToProps = () => ({})\nconst mapDispatchToProps = dispatch => ({\n  saveLocalClassData: (classData) => dispatch(saveLocalClassData(classData))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CraftingGatheringCalculator)\n","import React from 'react'\nimport { Badge, Tab, Tabs } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { cloneDeep, find, get, includes, indexOf, omit, reject, sortBy, toNumber } from 'lodash'\nimport { getCurrentTab, storeCurrentTab } from '../service/localStorage'\nimport RecipeSearch from './recipes/RecipeSearch'\nimport MyList from './recipes/MyList'\nimport * as recipeActions from '../store/recipeList/actions'\nimport ShoppingList from './recipes/ShoppingList'\nimport CraftingGatheringCalculator from './calculator/CraftingGatheringCalculator'\n\nclass RecipeHelper extends React.Component {\n  state = {\n    recipeSearchClasses: [],\n    recipeSearchExact: false,\n    recipeSearchString: '',\n    recipeSearchIncludeMaster: false,\n    recipeSearchIsInvalid: false,\n    myList: [],\n    lastSearch: undefined\n  }\n\n  componentDidMount () {\n    this.setState({\n      key: getCurrentTab()\n    })\n  }\n\n  handleToggleRecipeSearchClass (event) {\n    const recipeSearchClasses = cloneDeep(get(this.state, 'recipeSearchClasses', []))\n    const abbreviation = get(event, 'target.value', event)\n\n    if (includes(recipeSearchClasses, abbreviation)) {\n      recipeSearchClasses.splice(recipeSearchClasses.indexOf(abbreviation), 1)\n    } else {\n      recipeSearchClasses.push(abbreviation)\n    }\n\n    this.setState({\n      recipeSearchClasses: sortBy(recipeSearchClasses, s => s.toLowerCase())\n    })\n  }\n\n  handleToggleRecipeSearchExact (event) {\n    const recipeSearchExact = get(event, 'target.checked', false)\n    this.setState({\n      recipeSearchExact\n    })\n  }\n\n  handleToggleRecipeIncludeMaster (event) {\n    const checked = get(event, 'target.checked')\n\n    this.setState({\n      recipeSearchIncludeMaster: checked\n    })\n  }\n\n  handleFieldUpdate (event) {\n    const { target: { name, value } } = event\n\n    let recipeSearchIsInvalid = false\n    if (!value) {\n      recipeSearchIsInvalid = true\n    }\n\n    this.setState({\n      [name]: value,\n      recipeSearchIsInvalid\n    })\n  }\n\n  handleClearList () {\n    const { clearMyRecipeList } = this.props\n    clearMyRecipeList()\n    this.handleTabChange('search')\n  }\n\n  search (page = 1) {\n    const { searchRecipes } = this.props\n    const { recipeSearchClasses, recipeSearchExact, recipeSearchIncludeMaster, recipeSearchString } = this.state\n    const params = {\n      page,\n      abbreviation: recipeSearchClasses,\n      exact: recipeSearchExact,\n      includeMasterRecipes: recipeSearchIncludeMaster\n    }\n\n    searchRecipes(recipeSearchString, params)\n  }\n\n  handleUpdateQuantity (item, event) {\n    const newValue = Math.max(1, toNumber(event.target.value))\n\n    const { myRecipeList, saveMyRecipeList } = this.props\n    const myListItemIndex = indexOf(myRecipeList, item)\n    myRecipeList[myListItemIndex].quantity = newValue\n    saveMyRecipeList(myRecipeList)\n  }\n\n  handleSearch (event) {\n    event.preventDefault()\n    const page = get(event, 'target.value', 1)\n    const { recipeSearchString } = this.state\n    if (!recipeSearchString) {\n      document.getElementsByName('recipeSearchString')[0].focus()\n      this.setState({\n        recipeSearchIsInvalid: true\n      })\n      return\n    }\n\n    this.search(page)\n  }\n\n  handleClear () {\n    document.getElementsByName('recipeSearchString')[0].focus()\n    this.setState({\n      recipeSearchIsInvalid: false,\n      recipeSearchString: ''\n    })\n  }\n\n  handlePageChange (event) {\n    this.handleSearch(event)\n  }\n\n  handleTabChange (key) {\n    storeCurrentTab(key)\n    this.setState({ key })\n  }\n\n  toggleListItem (item) {\n    item = omit(item, 'quantity')\n    const { myRecipeList, saveMyRecipeList } = this.props\n    let myClonedList = cloneDeep(myRecipeList)\n    const foundItem = find(myRecipeList, i => get(i, 'ID') === get(item, 'ID'))\n\n    if (!!foundItem) {\n      myClonedList = reject(myRecipeList, item)\n    } else {\n      item.quantity = 1\n      myClonedList.push(item)\n    }\n\n    saveMyRecipeList(myClonedList)\n  }\n\n  render () {\n    const {\n      recipeSearchExact,\n      recipeSearchClasses,\n      recipeSearchIncludeMaster,\n      recipeSearchIsInvalid,\n      recipeSearchString\n    } = this.state\n\n    const {\n      characterData,\n      clearRecipeSearch,\n      craftingClassData,\n      myRecipeList,\n      myShoppingList,\n      recipeSearchResults\n    } = this.props\n\n    return (\n      <div className=\"recipe-list pt3\">\n        <Tabs\n          activeKey={this.state.key}\n          onSelect={this.handleTabChange.bind(this)}\n        >\n          <Tab eventKey=\"calculator\" title=\"Calculations\">\n            <div className=\"recipe-tab\">\n              <CraftingGatheringCalculator characterData={characterData} craftingClassData={craftingClassData} />\n            </div>\n          </Tab>\n          <Tab eventKey=\"search\" title=\"Recipe Search\">\n            <div className=\"recipe-tab\">\n              <RecipeSearch\n                clearRecipeSearch={clearRecipeSearch.bind(this)}\n                handleChange={this.handleFieldUpdate.bind(this)}\n                handlePageChange={this.handlePageChange.bind(this)}\n                handleReset={this.handleClear.bind(this)}\n                handleSubmit={this.handleSearch.bind(this)}\n                handleTabChange={this.handleTabChange.bind(this)}\n                handleToggleRecipeIncludeMaster={this.handleToggleRecipeIncludeMaster.bind(this)}\n                handleToggleListItem={this.toggleListItem.bind(this)}\n                handleToggleRecipeSearchClass={this.handleToggleRecipeSearchClass.bind(this)}\n                handleToggleRecipeSearchExact={this.handleToggleRecipeSearchExact.bind(this)}\n                myList={myRecipeList}\n                recipeSearchIncludeMaster={recipeSearchIncludeMaster}\n                recipeSearchClasses={recipeSearchClasses}\n                recipeSearchExact={recipeSearchExact}\n                recipeSearchResults={recipeSearchResults}\n                recipeSearchIsInvalid={recipeSearchIsInvalid}\n                recipeSearchString={recipeSearchString}\n              />\n            </div>\n          </Tab>\n          <Tab eventKey=\"recipe-list\" title={`My Recipe List (${myRecipeList.length})`}>\n            <div className=\"recipe-tab\">\n              <MyList\n                list={myRecipeList}\n                handleClearList={this.handleClearList.bind(this)}\n                handleTabChange={this.handleTabChange.bind(this)}\n                handleToggleListItem={this.toggleListItem.bind(this)}\n                handleUpdateQuantity={this.handleUpdateQuantity.bind(this)}\n              />\n            </div>\n          </Tab>\n          <Tab eventKey=\"shopping-list\" title={(\n            <span>\n              Shopping List <Badge variant=\"primary\">Beta</Badge>\n            </span>\n          )}>\n            <div className=\"recipe-tab\">\n              <ShoppingList\n                shoppingList={myShoppingList}\n              />\n            </div>\n          </Tab>\n        </Tabs>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  myRecipeList: get(state, 'recipeList.myRecipeList', []),\n  myShoppingList: get(state, 'recipeList.myShoppingList', {}),\n  recipeSearchResults: get(state, 'recipeList.recipeSearchResults', {})\n})\n\nconst mapDispatchToProps = dispatch => ({\n  saveMyRecipeList: recipeList => dispatch(recipeActions.saveMyRecipeList(recipeList)),\n  clearMyRecipeList: () => dispatch(recipeActions.clearMyRecipeList()),\n  createMyShoppingList: recipeList => dispatch(recipeActions.createMyShoppingList(recipeList)),\n  clearMyShoppingList: () => dispatch(recipeActions.clearMyShoppingList()),\n  searchRecipes: (string, params) => dispatch(recipeActions.searchRecipes(string, params)),\n  clearRecipeSearch: () => dispatch(recipeActions.clearRecipeSearch())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecipeHelper)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Spinner } from 'react-bootstrap'\n\nexport default class LoadingOverlay extends React.Component {\n  render () {\n    const { show } = this.props\n\n    if (!show) {\n      return null\n    }\n\n    return (\n      <div className=\"loading-overlay\">\n        <div>\n          <Spinner animation=\"border\" variant=\"light\" />\n        </div>\n      </div>\n    )\n  }\n}\n\nLoadingOverlay.propTypes = {\n  show: PropTypes.bool.isRequired\n}\n\nLoadingOverlay.defaultProps = {\n  show: false\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Container } from 'react-bootstrap'\nimport { get } from 'lodash'\nimport * as actions from '../store/local/actions'\nimport Navigation from './navigation/Navigation'\nimport RecipeHelper from './RecipeHelper'\nimport LoadingOverlay from './common/LoadingOverlay'\n\nconst externalLink = (url, text) => (\n  <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n)\n\nclass XivCraftingGatheringHelper extends React.Component {\n  componentDidMount () {\n    this.props.getLocalClassData()\n    this.props.getLocalCharacterData()\n  }\n\n  render () {\n    const { characterData, craftingClassData, loading } = this.props\n\n    return (\n      <React.Fragment>\n        <Navigation\n          characterData={characterData}\n          craftingClassData={craftingClassData}\n        />\n        <Container fluid>\n          <RecipeHelper characterData={characterData} craftingClassData={craftingClassData} />\n          <hr />\n          <div className=\"tc text-muted\">\n            Created by {externalLink('https://na.finalfantasyxiv.com/lodestone/character/22858010/',\n            'Xythyt')} with the help of {externalLink('https://www.xivapi.com', 'XIVAPI')}.\n            <br />\n            Version {process.env.REACT_APP_VERSION}\n          </div>\n        </Container>\n        <LoadingOverlay show={loading} />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  craftingClassData: get(state, 'local.classData'),\n  characterData: get(state, 'local.characterData'),\n  loading: (\n    Object.keys(get(state, 'local.loading', {})).length > 0 ||\n    Object.keys(get(state, 'recipeList.loading', {})).length > 0\n  )\n})\n\nconst mapDispatchToProps = dispatch => ({\n  getLocalCharacterData: () => dispatch(actions.getLocalCharacterData()),\n  getLocalClassData: () => dispatch(actions.getLocalClassData())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(XivCraftingGatheringHelper)\n","import { get, set, unset } from 'lodash'\nimport * as LocalStorage from '../../service/localStorage'\nimport * as T from './types'\n\nconst INITIAL_STATE = {\n  classData: LocalStorage.getDefaultCraftingClasses(),\n  loading: {}\n}\n\nexport default (state = INITIAL_STATE, action) => {\n  const { loading } = state\n  switch (action.type) {\n    case T.LODESTONE_CHARACTER_DATA_REQUEST:\n      set(loading, 'characterData', true)\n      return {\n        ...state,\n        loading\n      }\n    case T.LOCAL_CLASS_DATA_STORE:\n    case T.LOCAL_CLASS_DATA_RETRIEVAL:\n      return {\n        ...state,\n        classData: get(action, 'localData')\n      }\n    case T.LOCAL_CHARACTER_DATA_CLEAR:\n      return {\n        ...state,\n        characterData: undefined\n      }\n    case T.LOCAL_CHARACTER_DATA_STORE:\n    case T.LOCAL_CHARACTER_DATA_RETRIEVAL:\n      return {\n        ...state,\n        characterData: get(action, 'localData')\n      }\n    case T.LOCAL_CLASS_DATA_CLEAR:\n      return {\n        ...state,\n        classData: LocalStorage.getDefaultCraftingClasses()\n      }\n    case T.LODESTONE_CHARACTER_DATA_SUCCESS:\n      unset(loading, 'characterData')\n      return {\n        ...state,\n        characterData: get(action, 'payload'),\n        loading\n      }\n    case T.API_REQUEST_FAILURE:\n      unset(loading, 'characterData')\n      return {\n        ...state,\n        error: action.error,\n        loading\n      }\n    default:\n      return state\n  }\n}\n","import { set, unset } from 'lodash'\nimport * as LocalStorageService from '../../service/localStorage'\nimport * as T from './types'\n\nconst INITIAL_STATE = {\n  loading: {},\n  myRecipeList: LocalStorageService.getMyRecipeList(),\n  myShoppingList: LocalStorageService.getMyShoppingList(),\n  recipeSearchResults: {}\n}\n\nexport default (state = INITIAL_STATE, action) => {\n  const { loading } = state\n  unset(state, 'error')\n  switch (action.type) {\n    case T.SHOPPING_LIST_CREATE:\n      unset(loading, 'shoppingList')\n      return {\n        ...state,\n        myShoppingList: action.shoppingList,\n        loading\n      }\n    case T.SHOPPING_LIST_CLEAR:\n      return {\n        ...state,\n        myShoppingList: {}\n      }\n    case T.RECIPE_LIST_SAVE:\n      set(loading, 'shoppingList', true)\n      return {\n        ...state,\n        myRecipeList: action.recipeList,\n        loading\n      }\n    case T.RECIPE_LIST_CLEAR:\n      return {\n        ...state,\n        myRecipeList: []\n      }\n    case T.RECIPE_SEARCH_REQUEST:\n      set(loading, 'recipeSearch', true)\n      return {\n        ...state,\n        loading,\n        params: action.params\n      }\n    case T.RECIPE_SEARCH_SUCCESS:\n      unset(loading, 'recipeSearch')\n      return {\n        ...state,\n        loading,\n        recipeSearchResults: action.payload\n      }\n    case T.RECIPE_SEARCH_FAILURE:\n      unset(loading, 'recipeSearch')\n      return {\n        ...state,\n        loading,\n        error: action.error\n      }\n    case T.RECIPE_SEARCH_CLEAR:\n      unset(state, 'params')\n      return {\n        ...state,\n        recipeSearchResults: {}\n      }\n    default:\n      return state\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducer from './local/reducer'\nimport recipeListReducer from './recipeList/reducer'\n\nconst rootReducer = combineReducers({\n  local: reducer,\n  recipeList: recipeListReducer\n})\n\nexport default createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n)\n","import React from 'react'\nimport XivCraftingGatheringHelper from './XivCraftingGatheringHelper'\nimport Provider from 'react-redux/es/components/Provider'\nimport store from '../store'\n\nclass App extends React.Component {\n  render () {\n    return (\n      <Provider store={store}>\n        <XivCraftingGatheringHelper />\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport './styles/index.scss'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}