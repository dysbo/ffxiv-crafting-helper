{"version":3,"sources":["service/localStorage.js","service/xivApi.js","store/local/types.js","store/local/actions.js","components/navigation/LodestoneCharacterModal.jsx","components/navigation/LodestoneCharacterMenu.jsx","components/navigation/Navigation.jsx","components/recipes/RecipeSearchForm.jsx","components/common/Pagination.jsx","components/recipes/RecipeSearchResult.jsx","components/recipes/RecipeSearch.jsx","components/recipes/MyList.jsx","store/recipeList/types.js","service/recipe.js","store/recipeList/actions.js","components/common/SortableTableHeaderCell.jsx","components/common/XivIcon.jsx","components/recipes/ShoppingList.jsx","components/calculator/FilterDropdown.jsx","service/calculations.js","components/calculator/CalculationsTableHeader.jsx","components/calculator/CalculationsTableBody.jsx","components/calculator/FirstTimeImport.jsx","components/calculator/CraftingGatheringCalculator.jsx","components/RecipeHelper.jsx","components/common/LoadingOverlay.jsx","components/XivCraftingGatheringHelper.jsx","store/local/reducer.js","store/recipeList/reducer.js","store/index.js","components/App.jsx","index.js"],"names":["KEYS","get","key","defaultValue","data","localStorage","getItem","JSON","parse","store","setItem","stringify","clear","removeItem","retrieveAndUpdateCraftingClassData","defaultCraftingClasses","getDefaultCraftingClasses","storedData","craftingClasses","result","forEach","defaultCraftingClass","storedCraftingClass","_find","c","abbreviation","classDiffs","_filter","diff","d","type","length","applyChanges","levelingGuideDiffs","push","retrieveAndUpdateCharacterData","updateCraftingClassDataWithCharacterData","classJobCategories","craftingClassData","characterData","_values","_get","_includes","_map","lodestoneClassData","_set","totalExperience","CRAFTING_CLASSES","currentLevel","currentExperience","experiencePerItem","BASE_URL","getIconUrl","iconRelativePath","getServerList","a","axios","findCharacterByServerAndName","server","name","page","getCharacterById","id","set","recipeSearch","searchString","options","indexes","size","columns","exact","includeMasterRecipes","toLower","replace","request","body","query","bool","must","wildcard","match","from","sort","limit","minimum_should_match","isArray","should","map","post","getRecipesById","recipeIds","i","params","ids","join","getItemsById","itemIds","LOCAL_CLASS_DATA_RETRIEVAL","LOCAL_CLASS_DATA_STORE","LOCAL_CLASS_DATA_CLEAR","LOCAL_CHARACTER_DATA_RETRIEVAL","LOCAL_CHARACTER_DATA_STORE","LOCAL_CHARACTER_DATA_CLEAR","LODESTONE_CHARACTER_DATA_REQUEST","LODESTONE_CHARACTER_DATA_SUCCESS","API_REQUEST_FAILURE","lodestoneCharacterDataRequest","characterId","T","apiRequestSuccess","payload","getLocalClassData","dispatch","localData","localClassDataRetrieve","LocalStorage","saveLocalClassData","classData","clearLocalClassData","saveLocalCharacterData","getLocalCharacterData","localCharacterDataRetrieve","clearLocalCharacterData","getLodestoneCharacterData","XivApi","error","LodestoneCharacterModal","state","this","sortBy","s","toString","toLowerCase","servers","setState","event","target","value","preventDefault","loading","performSearch","lodestoneResults","onHide","props","undefined","handleClose","show","results","prevPage","nextPage","Modal","bind","Form","onSubmit","handleSearch","onReset","Header","closeButton","Title","Body","Group","Label","Control","as","onChange","handleSetField","Button","disabled","className","Spinner","animation","variant","Fragment","char","ID","Name","Avatar","Check","htmlFor","src","alt","onClick","Footer","handleSubmitCharacterSelection","React","Component","defaultProps","getDropdownTitle","Character","LodestoneCharacterMenu","showModal","searchLodestoneCharacterData","importText","NavDropdown","alignRight","title","Item","Divider","handleModalToggle","connect","Navigation","Navbar","bg","sticky","NavbarBrand","Nav","RecipeSearchForm","craftingClassSelections","ButtonGroup","updateCraftingClassSelections","prevProps","prevState","snapshot","recipeSearchClasses","isEqual","handleToggleRecipeSearchClass","buttons","filter","cc","OverlayTrigger","overlay","Tooltip","includes","icon","handleChange","handleReset","handleSubmit","handleToggleRecipeIncludeMaster","recipeSearchIncludeMaster","handleToggleRecipeSearchExact","recipeSearchExact","recipeSearchIsInvalid","recipeSearchString","isInvalid","FormControl","Feedback","checked","Pagination","currentPage","handlePageChange","totalPages","minPage","Math","max","min","maxPage","activePage","option","paginate","RecipeSearchResult","clearRecipeSearch","handleTabChange","handleToggleListItem","myList","pagination","recipeList","pageTotal","pageCurrent","Table","hover","striped","colSpan","r","iconUrl","craftingClassName","level","isOnList","find","item","faMinusSquare","faPlusSquare","ready","RecipeSearch","recipeSearchResults","MyList","mapping","createItemQuantityMapping","list","l","quantity","handleUpdateQuantity","toNumber","handleClearList","Icon","ClassJob","NameEnglish","RecipeLevelTable","ClassJobLevel","handleItemQuantityUpdate","onBlur","handleQuantityFieldBlur","RECIPE_SEARCH_REQUEST","RECIPE_SEARCH_SUCCESS","RECIPE_SEARCH_FAILURE","RECIPE_SEARCH_CLEAR","RECIPE_LIST_CLEAR","RECIPE_LIST_SAVE","SHOPPING_LIST_CREATE","SHOPPING_LIST_CLEAR","SHOPPING_LIST_ERROR","getIngredientListForRecipes","ingredientsGatherable","ingredientsCrafted","ingredientsOther","ingredientsPurchased","getAndSortRecipeResults","concat","XivApiService","itemData","foundItem","ig","io","val","addGatheringItemData","orderBy","uniqBy","ic","gatheringItemId","filteredGatheringPoints","GATHERING_ITEM_POINTS","point","startsWith","pointData","getPointData","itemId","filteredFishingSpots","FISHING_SPOTS","spot","path","pd","namePath","areaPath","regionPath","levelPath","typePath","area","region","gatheringClass","hasFishingSpotMatch","matched","fishingId","recipe","recipeResults","nextRecipeResults","rr","recipeListEntry","rle","itemCategory","amount","gatheringMapNode","ITEM_TO_GATHERING_ITEM_MAPPING","ingredientRecipe","fishingSpotMatch","existingIngredientGatherable","existingAmount","existingIngredientCrafted","ir","existingIngredientOther","ip","recipeSearchRequest","apiRequestFailure","saveMyRecipeList","recipeListSave","createMyShoppingList","clearMyRecipeList","clearMyShoppingList","RecipeListService","shoppingList","SortableTableHeaderCell","text","sortFunc","applySorting","style","cursor","faSort","XivIcon","badge","image","tooltip","htmlImage","url","altText","content","htmlBadge","Badge","cx","scrollToPosition","x","y","window","scrollTo","ShoppingList","ingredientsGatherableSort","func","direction","itemsOwned","updateGatherableIngredients","gatherableStateVars","ingredientsCrystals","newIngredientsGatherableSort","scrollX","scrollY","clone","pull","handleApplyIngredientsGatherableSort","handleOwnershipSort","locationSelectId","gatheringType","owned","handleLocationUpdate","handleToggleItemOwned","craftClass","craftLevel","handleClearOwnershipInfo","FilterDropdown","label","applyFilterFunc","DropdownButton","Dropdown","craftingClass","calculateRemainingExp","currentExp","totalExp","calculateRemainingItems","remainingExp","expPerItem","ceil","calculateProgressPercentage","floor","tableHeaders","CalculationsTableHeader","applySortFunc","h","CalculationsTableBody","focusedRow","levelingGuide","LEVELING_GUIDE_LINKS","g","matchedPage","pages","p","maxLevel","minLevel","updateField","focused","remainingExperience","remainingItems","progressPercentage","popover","Popover","href","getLevelingGuidePageUrl","rel","onFocus","handleRowFocus","trigger","placement","rootClose","faIcon","validateNumericFieldChange","ProgressBar","now","FirstTimeImport","timer","startTimer","endTimer","timeLeft","setInterval","executeTimer","clearInterval","timeLeftMessage","CraftingGatheringCalculator","sortDirection","filterFunc","innerText","targetCraftingClass","otherCraftingClasses","EXP_PER_LEVEL","sortedAndFilteredCraftingClassData","getSortedCraftingClassData","getFilteredCraftingClassData","applyFilter","applySort","RecipeHelper","lastSearch","cloneDeep","splice","indexOf","searchRecipes","newValue","myRecipeList","document","getElementsByName","focus","search","omit","myClonedList","reject","myShoppingList","Tabs","activeKey","onSelect","Tab","eventKey","handleFieldUpdate","handleClear","toggleListItem","recipeActions","string","LoadingOverlay","externalLink","XivCraftingGatheringHelper","toast","Container","fluid","process","Toast","onClose","handleToastClose","position","top","right","zIndex","minWidth","time","message","Date","toISOString","Object","keys","actions","INITIAL_STATE","rootReducer","combineReducers","local","action","unset","createStore","applyMiddleware","thunk","App","Provider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a5811184.chunk.js","sourcesContent":["import CRAFTING_CLASSES from '../data/crafting-classes'\nimport { applyChanges, diff } from 'diff-json'\nimport {\n  filter as _filter,\n  find as _find,\n  get as _get,\n  includes as _includes,\n  map as _map,\n  set as _set,\n  values as _values\n} from 'lodash'\n\nconst KEYS = {\n  CHARACTER_DATA: 'character',\n  CRAFTING_CLASS_DATA: 'craftingClasses',\n  MY_RECIPE_LIST: 'myRecipeList',\n  MY_SHOPPING_LIST: 'myShoppingList',\n  CURRENT_TAB: 'currentTab',\n  OWNED_ITEMS: 'ownedItems'\n}\n\nfunction get (key, defaultValue) {\n  const data = localStorage.getItem(key)\n  if (!!data) {\n    return JSON.parse(data)\n  }\n  return defaultValue\n}\n\nfunction store (key, data) {\n  localStorage.setItem(key, JSON.stringify(data))\n}\n\nfunction clear (key) {\n  if (!!localStorage.getItem(key)) {\n    localStorage.removeItem(key)\n  }\n}\n\nexport function getObtainedItems () {\n  return get(KEYS.OWNED_ITEMS, [])\n}\n\nexport function storeObtainedItems (obtainedItems) {\n  store(KEYS.OWNED_ITEMS, obtainedItems)\n}\n\nexport function getCurrentTab () {\n  return get(KEYS.CURRENT_TAB)\n}\n\nexport function storeCurrentTab (currentTab) {\n  store(KEYS.CURRENT_TAB, currentTab)\n}\n\nexport function getMyRecipeList () {\n  return get(KEYS.MY_RECIPE_LIST, [])\n}\n\nexport function getMyShoppingList () {\n  return get(KEYS.MY_SHOPPING_LIST, {})\n}\n\nexport function storeCharacterData (characterData) {\n  store(KEYS.CHARACTER_DATA, characterData)\n}\n\nexport function storeCraftingClassData (craftingClasses) {\n  store(KEYS.CRAFTING_CLASS_DATA, craftingClasses)\n}\n\nexport function storeMyRecipeList (myRecipeList) {\n  store(KEYS.MY_RECIPE_LIST, myRecipeList)\n}\n\nexport function storeMyShoppingList (myShoppingList) {\n  store(KEYS.MY_SHOPPING_LIST, myShoppingList)\n}\n\nexport function clearCharacterData () {\n  clear(KEYS.CHARACTER_DATA)\n}\n\nexport function clearCraftingClassData () {\n  clear(KEYS.CRAFTING_CLASS_DATA)\n}\n\nexport function clearMyRecipeList () {\n  clear(KEYS.MY_RECIPE_LIST)\n}\n\nexport function clearMyShoppingList () {\n  clear(KEYS.MY_SHOPPING_LIST)\n}\n\nexport function clearObtainedItems () {\n  clear(KEYS.OWNED_ITEMS)\n}\n\nexport function retrieveAndUpdateCraftingClassData () {\n  // get the default crafting class data\n  const defaultCraftingClasses = getDefaultCraftingClasses()\n\n  // retrieve the stored data from local storage\n  const storedData = localStorage.getItem(KEYS.CRAFTING_CLASS_DATA)\n\n  // if there is no stored data, return the default data\n  if (!storedData) {\n    return defaultCraftingClasses\n  }\n\n  // if there is stored data, convert it to JSON\n  const craftingClasses = JSON.parse(storedData)\n\n  // create a variable for the result\n  const result = []\n\n  // cycle through all \"default\" classes\n  defaultCraftingClasses.forEach(defaultCraftingClass => {\n    // retrieve the matching stored class\n    const storedCraftingClass = _find(craftingClasses, c => c.abbreviation === defaultCraftingClass.abbreviation)\n\n    // if there is no matching stored class data, add the default for this class to the result\n    if (!storedCraftingClass) {\n      result.push(defaultCraftingClass)\n      return\n    }\n\n    // get any added data to the default data set and apply it to the stored data\n    const classDiffs = _filter(diff(storedCraftingClass, defaultCraftingClass), d => d.type === 'add')\n    if (classDiffs.length > 0) {\n      applyChanges(storedCraftingClass, classDiffs)\n    }\n\n    // get any leveling guide data and remove it from stored data\n    const levelingGuideDiffs = _filter(diff(storedCraftingClass, defaultCraftingClass), d => d.key === 'levelingGuide')\n    if (levelingGuideDiffs.length > 0) {\n      applyChanges(storedCraftingClass, levelingGuideDiffs)\n    }\n\n    // add this record to the result to return\n    result.push(storedCraftingClass)\n  })\n\n  // send back the updated stored data\n  return result\n}\n\nexport function retrieveAndUpdateCharacterData () {\n  // get the stored character data\n  const storedData = localStorage.getItem(KEYS.CHARACTER_DATA)\n\n  // if there is no character data, return undefined\n  if (!storedData) {\n    return undefined\n  }\n\n  // if there is, update it\n  // TBD\n\n  // return the character data\n  return JSON.parse(storedData)\n}\n\nexport function updateCraftingClassDataWithCharacterData () {\n  const classJobCategories = ['Disciple of the Land', 'Disciple of the Hand']\n  const craftingClassData = retrieveAndUpdateCraftingClassData()\n  const characterData = _filter(_values(_get(retrieveAndUpdateCharacterData(), 'Character.ClassJobs')),\n    c => _includes(classJobCategories, _get(c, 'Class.ClassJobCategory.Name')))\n\n  return _map(craftingClassData, c => {\n    const lodestoneClassData = _find(characterData, d => _get(d, 'Class.Abbreviation') === _get(c, 'abbreviation'))\n    _set(c, 'currentLevel', _get(lodestoneClassData, 'Level', 1))\n    _set(c, 'currentExperience', _get(lodestoneClassData, 'ExpLevel', 0))\n    _set(c, 'totalExperience', _get(lodestoneClassData, 'ExpLevelMax', c.totalExperience))\n    return c\n  })\n}\n\nexport function getDefaultCraftingClasses () {\n  return _map(CRAFTING_CLASSES, c => {\n    c.currentLevel = 1\n    c.currentExperience = 0\n    c.experiencePerItem = 1\n    c.totalExperience = 300\n    return c\n  })\n}\n","import axios from 'axios'\nimport { map, get, isArray, set, toLower } from 'lodash'\n// import UNLOADED_CHARACTER from '../data/mock/unloadedCharacter'\n\n// const PRIVATE_KEY = '257f7d4532a74f15a429b5262d51d0f3938964ea78124b1ca8da9459accc15b7'\nconst BASE_URL = 'https://xivapi.com'\n\n// this is for testing\n// let attempt = 0\n\n/**\n * Retrieves the URL of an icon provided in a response from XIVAPI.\n * @param   {string}  iconRelativePath  The relative path of the icon.\n * @returns {string}                    The full URL path of the icon.\n */\nexport const getIconUrl = iconRelativePath => `${BASE_URL}${iconRelativePath}`\n\n/**\n * Retrieves a list of servers in FFXIV.\n * @returns {[object]} A list of server names.\n */\nexport const getServerList = async () => {\n  const result = await axios.get(`${BASE_URL}/servers`)\n  return get(result, 'data', [])\n}\n\n/**\n * Finds a character by server and name.\n *\n * @param   {string}  server  The name of the server.\n * @param   {string}  name    The name of the character.\n * @param   {number}  page    The page of results to view.\n * @returns {object}          An object containing the search results.\n */\nexport const findCharacterByServerAndName = async (server, name, page = 1) => {\n  const result = await axios.get(`${BASE_URL}/character/search?name=${name}&server=${server}&page=${page}`)\n  return get(result, 'data', [])\n}\n\n/**\n * Retrieves character data by the character's ID.\n *\n * @param   {number}  id  The ID of the character to retrieve.\n * @returns {object}      An object containing the character's data.\n */\nexport const getCharacterById = async id => {\n  // use this for normal functionality\n  const result = await axios.get(`${BASE_URL}/character/${id}?extended=1&data=CJ`)\n\n  // use this when testing the \"first import\" message\n  // console.log('this is attempt', attempt.toString())\n  // let result\n  // if (!attempt) {\n  //   result = { data: UNLOADED_CHARACTER }\n  // } else {\n  //   result = await axios.get(`${BASE_URL}/character/${id}?extended=1`)\n  // }\n  // attempt++\n\n  // use this when testing the behavior when character does not load from Lodestone\n  // const result = { data: UNLOADED_CHARACTER }\n\n  set(result, 'data.characterId', id)\n  return get(result, 'data', {})\n}\n\n/**\n * Searches for recipes via the XIPAPI.\n *\n * @param   {string}          searchString                    The string for which to search.\n * @param   {object}          [options]                       Options to apply to this search.\n * @param   {boolean}         [options.exact]                 Whether we are searching for the exact string (true) or\n *                                                              should substitute spaces for wildcards (false).\n * @param   {number}          [options.page]                  The page on which to begin the search.\n * @param   {string|[string]} [options.abbreviation]          Any crafting class abbreviations that should be queried.\n * @param   {boolean}         [options.includeMasterRecipes]  Indicates whether master recipes should be included.\n * @returns {object}                                          An object containing search results.\n */\nexport const recipeSearch = async (searchString = '', options = {}) => {\n  const indexes = 'recipe'\n  const size = 20\n  const columns = [\n    'ID',\n    'ClassJob.Abbreviation_en',\n    'ClassJob.Icon',\n    'ClassJob.NameEnglish',\n    'RecipeLevelTable.ClassJobLevel',\n    'Name',\n    'Icon'\n  ]\n\n  const { exact = false, page = 1, includeMasterRecipes = false } = options\n\n  searchString = toLower(searchString)\n\n  if (!exact) {\n    searchString = searchString.replace(' ', '*')\n  }\n\n  const request = {\n    indexes,\n    body: {\n      query: {\n        bool: {\n          must: [\n            {\n              wildcard: {\n                'NameCombined_en': `*${searchString}*`\n              }\n            },\n            {\n              match: {\n                'ExpRewarded': 1\n              }\n            },\n            {\n              match: {\n                'ItemRequiredTargetID': 0\n              }\n            }\n          ]\n        }\n      },\n      size,\n      from: size * (page - 1),\n      sort: [\n        {\n          'RecipeLevelTable.ClassJobLevel': 'asc'\n        }\n      ]\n    },\n    columns,\n    limit: size,\n    page\n  }\n\n  if (!includeMasterRecipes) {\n    request.body.query.bool.must.push({\n      match: {\n        'SecretRecipeBookTargetID': 0\n      }\n    })\n  }\n\n  if (!!options.abbreviation && !!options.abbreviation.length && options.abbreviation.length < 8) {\n    let { abbreviation } = options\n    const minimum_should_match = 1\n\n    abbreviation = isArray(abbreviation) ? abbreviation : [abbreviation]\n\n    request.body.query.bool.minimum_should_match = minimum_should_match\n    request.body.query.bool.should = map(abbreviation, a => ({\n      match: {\n        'ClassJob.Abbreviation_en': a\n      }\n    }))\n  }\n\n  const result = await axios.post(`${BASE_URL}/search`,\n    request\n  )\n  return get(result, 'data', {})\n}\n\n/**\n * Retrieves a list of recipes by their IDs.\n *\n * @param   {[number]}  recipeIds The IDs of the recipes that should be retrieved.\n * @returns {object}              An object containing the recipe data retrieved.\n */\nexport const getRecipesById = async recipeIds => {\n  const columns = [\n    'ID',\n    'Name'\n  ]\n\n  for (let i = 0; i < 10; i++) {\n    columns.push(`AmountIngredient${i}`)\n    columns.push(`ItemIngredient${i}.ID`)\n    columns.push(`ItemIngredient${i}.Icon`)\n    columns.push(`ItemIngredient${i}.Name`)\n    columns.push(`ItemIngredient${i}.ItemSearchCategoryTargetID`)\n    columns.push(`ItemIngredientRecipe${i}`)\n  }\n\n  const result = await axios.get(`${BASE_URL}/recipe`, {\n    params: {\n      ids: recipeIds.join(','),\n      columns: columns.join(',')\n    }\n  })\n  return get(result, 'data', {})\n}\n\n/**\n * Retrieves a list of items by their IDs.\n *\n * @param   {[number]}  itemIds The IDs of the items that should be retrieved.\n * @returns {object}            An object containing the item data retrieved.\n */\nexport const getItemsById = async itemIds => {\n  const columns = [\n    'ID',\n    'Name',\n    'Icon',\n    'GameContentLinks'\n  ]\n\n  const result = await axios.get(`${BASE_URL}/item`, {\n    params: {\n      ids: itemIds.join(','),\n      columns: columns.join(',')\n    }\n  })\n\n  return get(result, 'data', {})\n}\n","const LODESTONE = 'LODESTONE'\nconst LOCAL = 'LOCAL'\n\nconst REQUEST = 'REQUEST'\nconst SUCCESS = 'SUCCESS'\nconst FAILURE = 'FAILURE'\n\nexport const LOCAL_CLASS_DATA_RETRIEVAL = `${LOCAL}_CLASS_DATA_RETRIEVAL`\nexport const LOCAL_CLASS_DATA_STORE = `${LOCAL}_CLASS_DATA_STORE`\nexport const LOCAL_CLASS_DATA_CLEAR = `${LOCAL}_CLASS_DATA_CLEAR`\n\nexport const LOCAL_CHARACTER_DATA_RETRIEVAL = `${LOCAL}_CHARACTER_DATA_RETRIEVAL`\nexport const LOCAL_CHARACTER_DATA_STORE = `${LOCAL}_CHARACTER_DATA_STORE`\nexport const LOCAL_CHARACTER_DATA_CLEAR = `${LOCAL}_CHARACTER_DATA_CLEAR`\n\nexport const LODESTONE_CHARACTER_DATA_REQUEST = `${LODESTONE}_CHARACTER_DATA_${REQUEST}`\nexport const LODESTONE_CHARACTER_DATA_SUCCESS = `${LODESTONE}_CHARACTER_DATA_${SUCCESS}`\nexport const API_REQUEST_FAILURE = `${LODESTONE}_CHARACTER_DATA_${FAILURE}`\n","import * as LocalStorage from '../../service/localStorage'\nimport * as XivApi from '../../service/xivApi'\nimport * as T from './types'\n\nconst localClassDataRetrieve = localData => ({\n  type: T.LOCAL_CLASS_DATA_RETRIEVAL,\n  localData\n})\n\nconst localClassDataStore = localData => ({\n  type: T.LOCAL_CLASS_DATA_STORE,\n  localData\n})\n\nconst localClassDataClear = () => ({\n  type: T.LOCAL_CLASS_DATA_CLEAR\n})\n\nconst localCharacterDataRetrieve = localData => ({\n  type: T.LOCAL_CHARACTER_DATA_RETRIEVAL,\n  localData\n})\n\nconst localCharacterDataStore = localData => ({\n  type: T.LOCAL_CHARACTER_DATA_STORE,\n  localData\n})\n\nconst localCharacterDataClear = () => ({\n  type: T.LOCAL_CHARACTER_DATA_CLEAR\n})\n\nconst lodestoneCharacterDataRequest = characterId => ({\n  type: T.LODESTONE_CHARACTER_DATA_REQUEST,\n  characterId\n})\n\nconst apiRequestSuccess = (type, payload) => ({\n  type,\n  payload\n})\n\nconst apiRequestFailure = (type, error) => ({\n  type,\n  error\n})\n\nexport const getLocalClassData = () => {\n  return dispatch => {\n    const localData = LocalStorage.retrieveAndUpdateCraftingClassData()\n    dispatch(localClassDataRetrieve(localData))\n  }\n}\n\nexport const saveLocalClassData = classData => {\n  return dispatch => {\n    LocalStorage.storeCraftingClassData(classData)\n    dispatch(localClassDataStore(classData))\n  }\n}\n\nexport const clearLocalClassData = () => {\n  return dispatch => {\n    LocalStorage.clearCraftingClassData()\n    dispatch(localClassDataClear())\n  }\n}\n\nexport const saveLocalCharacterData = characterData => {\n  return dispatch => {\n    LocalStorage.storeCharacterData(characterData)\n    dispatch(localCharacterDataStore(characterData))\n  }\n}\n\nexport const getLocalCharacterData = () => {\n  return dispatch => {\n    const localData = LocalStorage.retrieveAndUpdateCharacterData()\n    dispatch(localCharacterDataRetrieve(localData))\n  }\n}\n\nexport const clearLocalCharacterData = () => {\n  return dispatch => {\n    LocalStorage.clearCharacterData()\n    dispatch(localCharacterDataClear())\n  }\n}\n\nexport const getLodestoneCharacterData = characterId => {\n  return async dispatch => {\n    dispatch(lodestoneCharacterDataRequest(characterId))\n    try {\n      const payload = await XivApi.getCharacterById(characterId)\n      dispatch(apiRequestSuccess(T.LODESTONE_CHARACTER_DATA_SUCCESS, payload))\n      dispatch(saveLocalCharacterData(payload))\n      dispatch(saveLocalClassData(LocalStorage.updateCraftingClassDataWithCharacterData()))\n      dispatch(getLocalClassData())\n    } catch (err) {\n      dispatch(apiRequestFailure(T.API_REQUEST_FAILURE, err))\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Form, Spinner, Modal } from 'react-bootstrap'\nimport { get, sortBy, map as _map } from 'lodash'\nimport * as XivApi from '../../service/xivApi'\n\nclass LodestoneCharacterModal extends React.Component {\n  state = {}\n\n  async componentDidMount() {\n    if (get(this.state, 'servers', []).length === 0) {\n      const servers = sortBy(await XivApi.getServerList(), s => s.toString().toLowerCase())\n      this.setState({\n        servers\n      })\n    }\n  }\n\n  handleSetField (event) {\n    const { target: { name, value } } = event\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleSearch (page = 1, event) {\n    !!event && event.preventDefault()\n    this.setState({\n      loading: true,\n      page\n    }, this.performSearch)\n  }\n\n  async performSearch () {\n    const { name, server, page } = this.state\n    const result = await XivApi.findCharacterByServerAndName(server, name, page)\n    this.setState({\n      lodestoneResults: result,\n      loading: false\n    })\n  }\n\n  handleClose () {\n    const { onHide } = this.props\n    this.setState({\n      name: undefined,\n      server: undefined,\n      lodestoneResults: undefined,\n      characterId: undefined\n    }, onHide)\n  }\n\n  handleSubmitCharacterSelection () {\n    const { getLodestoneCharacterData } = this.props\n    const { characterId } = this.state\n\n    getLodestoneCharacterData(characterId)\n    this.handleClose()\n  }\n\n  render () {\n    const { show } = this.props\n    const { characterId, loading, lodestoneResults, name, server, servers } = this.state\n\n    const results = get(lodestoneResults, 'Results', [])\n    const prevPage = get(lodestoneResults, 'Pagination.PagePrev')\n    const nextPage = get(lodestoneResults, 'Pagination.PageNext')\n\n    return (\n      <Modal show={show} onHide={this.handleClose.bind(this)}>\n        <Form\n          onSubmit={this.handleSearch.bind(this, 1)}\n          onReset={this.handleClose.bind(this)}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Import Character Data\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form.Group>\n              <Form.Label>Server</Form.Label>\n              <Form.Control name=\"server\" as=\"select\" onChange={this.handleSetField.bind(this)}>\n                <option>Choose a Server</option>\n                {_map(servers, (server, key) => (\n                  <option key={key} value={server}>{server}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Name</Form.Label>\n              <Form.Control name=\"name\" type=\"text\" onChange={this.handleSetField.bind(this)} />\n            </Form.Group>\n            <Button type=\"submit\" disabled={!name || !server}>\n              Search\n            </Button>\n            <hr />\n            {!!loading && (\n              <div className=\"fullWidth text-center\">\n                <Spinner animation=\"grow\" variant=\"danger\" />\n                <Spinner animation=\"grow\" variant=\"warning\" />\n                <Spinner animation=\"grow\" variant=\"success\" />\n              </div>\n            )}\n            {!loading && !results.length && (\n              <div>\n                No results available.\n              </div>\n            )}\n            {!loading && !!results.length && (\n              <React.Fragment>\n                <div className=\"lodestoneResults\">\n                  {results.map((char, key) => {\n                    const { ID, Name, Avatar } = char\n                    return (\n                      <div\n                        key={key}\n                        className=\"flex justify-between items-center\"\n                      >\n                        <Form.Check\n                          id={ID}\n                          type=\"radio\"\n                          name=\"characterId\"\n                          value={ID}\n                          onChange={this.handleSetField.bind(this)}\n                        />\n                        <label htmlFor={ID}>{Name}</label>\n                        <label htmlFor={ID}>\n                          <img className=\"avatar\" src={Avatar} alt={Name} />\n                        </label>\n                      </div>\n                    )\n                  })}\n                </div>\n                <div className=\"flex justify-between items-center pt2\">\n                  <div className=\"w-50 tl\">\n                    {!!prevPage && (\n                      <Button type=\"button\" onClick={this.handleSearch.bind(this, prevPage)}>\n                        Prev Page\n                      </Button>\n                    )}\n                  </div>\n                  <div className=\"w-50 tr\">\n                    {nextPage && (\n                      <Button type=\"button\" onClick={this.handleSearch.bind(this, nextPage)}>\n                        Next Page\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </React.Fragment>\n            )}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"danger\"\n              type=\"reset\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              disabled={!characterId}\n              onClick={this.handleSubmitCharacterSelection.bind(this)}\n            >\n              Load Data\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    )\n  }\n}\n\nLodestoneCharacterModal.propTypes = {\n  show: PropTypes.bool.isRequired,\n  onHide: PropTypes.func.isRequired\n}\n\nLodestoneCharacterModal.defaultProps = {\n  show: false\n}\n\nexport default LodestoneCharacterModal\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { get } from 'lodash'\nimport { NavDropdown } from 'react-bootstrap'\nimport { clearLocalCharacterData, clearLocalClassData, getLodestoneCharacterData } from '../../store/local/actions'\nimport LodestoneCharacterModal from './LodestoneCharacterModal'\n\nconst getDropdownTitle = characterData => {\n  if (get(characterData, 'Character.Avatar')) {\n    const { Character: { Avatar, Name } } = characterData\n    return (\n      <span className=\"items-center\">\n        {Name}\n        <span className=\"ml2\"><img src={Avatar} alt={Name} className=\"avatar\" /></span>\n      </span>\n    )\n  }\n\n  return 'Options'\n}\n\nclass LodestoneCharacterMenu extends React.Component {\n  state = {\n    showModal: false\n  }\n\n  handleModalToggle (showModal) {\n    this.setState({\n      showModal: showModal\n    })\n  }\n\n  render () {\n    const {\n      characterData,\n      clearLocalCharacterData,\n      clearLocalClassData,\n      getLodestoneCharacterData,\n      lodestoneResults,\n      searchLodestoneCharacterData\n    } = this.props\n\n    const importText = `Import ${!characterData ? '' : 'Different'} Character Data`.replace('  ', ' ')\n\n    return (\n      <React.Fragment>\n        <NavDropdown\n          alignRight\n          title={getDropdownTitle(characterData)}\n        >\n          {!!characterData && (\n            <React.Fragment>\n              <NavDropdown.Item onClick={getLodestoneCharacterData.bind(this, characterData.characterId)}>\n                Refresh Character Data\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n            </React.Fragment>\n          )}\n          <NavDropdown.Item onClick={this.handleModalToggle.bind(this, true)}>\n            {importText}\n          </NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item onClick={clearLocalClassData}>\n            Clear Crafting Class Data\n          </NavDropdown.Item>\n          {!!characterData && (\n            <NavDropdown.Item onClick={clearLocalCharacterData}>\n              Clear Character Data\n            </NavDropdown.Item>\n          )}\n        </NavDropdown>\n        <LodestoneCharacterModal\n          lodestoneResults={lodestoneResults}\n          onHide={this.handleModalToggle.bind(this, false)}\n          searchLodestoneCharacterData={searchLodestoneCharacterData}\n          show={this.state.showModal}\n          getLodestoneCharacterData={getLodestoneCharacterData}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nLodestoneCharacterMenu.propTypes = {\n  characterData: PropTypes.shape()\n}\n\nconst mapStateToProps = () => ({})\n\nconst mapDispatchToProps = dispatch => ({\n  getLodestoneCharacterData: characterId => dispatch(getLodestoneCharacterData(characterId)),\n  clearLocalCharacterData: () => dispatch(clearLocalCharacterData()),\n  clearLocalClassData: () => dispatch(clearLocalClassData())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LodestoneCharacterMenu)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Nav, Navbar, NavbarBrand } from 'react-bootstrap'\nimport LodestoneCharacterMenu from './LodestoneCharacterMenu'\n\nexport default class Navigation extends React.Component {\n  render () {\n    const { characterData } = this.props\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <NavbarBrand>\n          FFXIV Crafting & Gathering Helper\n        </NavbarBrand>\n        <Nav className=\"mr-auto\" />\n        <Nav>\n          <LodestoneCharacterMenu\n            characterData={characterData}\n          />\n        </Nav>\n      </Navbar>\n    )\n  }\n}\n\nNavigation.propTypes = {\n  characterData: PropTypes.shape(),\n  craftingClassData: PropTypes.arrayOf(PropTypes.shape())\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, ButtonGroup, Form, FormControl, OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport { filter, forEach, includes, isEqual } from 'lodash'\nimport CRAFTING_CLASSES from '../../data/crafting-classes'\nimport { getIconUrl } from '../../service/xivApi'\n\nexport default class RecipeSearchForm extends React.Component {\n  state = {\n    craftingClassSelections: <ButtonGroup />\n  }\n\n  componentDidMount () {\n    this.updateCraftingClassSelections()\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    const { recipeSearchClasses } = this.props\n    if (!isEqual(recipeSearchClasses, prevProps.recipeSearchClasses)) {\n      this.updateCraftingClassSelections()\n    }\n  }\n\n  updateCraftingClassSelections () {\n    const { recipeSearchClasses, handleToggleRecipeSearchClass } = this.props\n\n    const buttons = []\n\n    forEach(filter(CRAFTING_CLASSES, cc => cc.type === 'crafting'), cc => {\n      buttons.push((\n        <OverlayTrigger\n          key={`overlayTrigger-${cc.abbreviation}`}\n          overlay={\n            <Tooltip id={`tooltip-${cc.abbreviation}`}>\n              {cc.name}\n            </Tooltip>\n          }\n        >\n          <Button\n            className=\"craftingClassSelections\"\n            key={cc.abbreviation}\n            value={cc.abbreviation}\n            variant={includes(recipeSearchClasses, cc.abbreviation) ? 'primary' : 'light'}\n          >\n            <img\n              src={getIconUrl(cc.icon)}\n              alt={cc.name}\n              onClick={handleToggleRecipeSearchClass.bind(this, cc.abbreviation)}\n            />\n          </Button>\n        </OverlayTrigger>\n      ))\n    })\n\n    const craftingClassSelections = (\n      <ButtonGroup>\n        {buttons}\n      </ButtonGroup>\n    )\n\n    this.setState({\n      craftingClassSelections\n    })\n  }\n\n  render () {\n    const {\n      handleChange,\n      handleReset,\n      handleSubmit,\n      handleToggleRecipeIncludeMaster,\n      handleToggleRecipeSearchExact,\n      recipeSearchExact,\n      recipeSearchIncludeMaster,\n      recipeSearchIsInvalid,\n      recipeSearchString\n    } = this.props\n\n    const { craftingClassSelections } = this.state\n\n    return (\n      <React.Fragment>\n        <Form onReset={handleReset} onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>Enter Your Search Term(s)</Form.Label>\n            <Form.Control\n              as=\"input\"\n              name=\"recipeSearchString\"\n              value={recipeSearchString}\n              onChange={handleChange}\n              isInvalid={!!recipeSearchIsInvalid}\n            />\n            <FormControl.Feedback type=\"invalid\">\n              Please enter a search term.\n            </FormControl.Feedback>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>\n              Choose Crafting Classes to Search\n              <br />\n              <small>(if none are selected, all will be searched)</small>\n            </Form.Label>\n            <br />\n            {craftingClassSelections}\n          </Form.Group>\n          <div className=\"flex flex-row\">\n            <Form.Check onChange={handleToggleRecipeIncludeMaster} checked={recipeSearchIncludeMaster} />\n            <Form.Label>Include Master Recipes</Form.Label>\n          </div>\n          {false && (\n            <div className=\"flex flex-row\">\n              <Form.Check onChange={handleToggleRecipeSearchExact} checked={recipeSearchExact} />\n              <Form.Label>Search Exact Phrase</Form.Label>\n            </div>\n          )}\n          <Button type=\"reset\" variant=\"danger\" className=\"mr1\">Clear</Button>\n          <Button type=\"submit\" variant=\"primary\" className=\"ml1\">Go!</Button>\n        </Form>\n      </React.Fragment>\n    )\n  }\n}\n\nRecipeSearchForm.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  handleReset: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  handleToggleRecipeIncludeMaster: PropTypes.func.isRequired,\n  handleToggleRecipeSearchClass: PropTypes.func.isRequired,\n  handleToggleRecipeSearchExact: PropTypes.func.isRequired,\n  recipeSearchClasses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  recipeSearchExact: PropTypes.bool.isRequired,\n  recipeSearchIncludeMaster: PropTypes.bool.isRequired,\n  recipeSearchIsInvalid: PropTypes.bool.isRequired,\n  recipeSearchString: PropTypes.string.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { isEqual } from 'lodash'\nimport { Button, ButtonGroup } from 'react-bootstrap'\n\nexport default class Pagination extends React.Component {\n  state = {}\n\n  paginate () {\n    const { currentPage, handlePageChange, totalPages } = this.props\n    const minPage = Math.max(1, Math.min(currentPage - 3, totalPages - 6))\n    const maxPage = Math.min(totalPages, minPage + 6)\n\n    const options = []\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"first\"\n          value={1}\n          onClick={handlePageChange}\n          disabled={currentPage === 1}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &lt;&lt;\n        </Button>\n      ))\n    }\n\n    if (totalPages > 1) {\n      options.push((\n        <Button\n          key=\"prev\"\n          value={Math.max(currentPage - 1, 1)}\n          onClick={handlePageChange}\n          disabled={currentPage === 1}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &lt;\n        </Button>\n      ))\n    }\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"prevGroup\"\n          value={Math.max(1, currentPage - 7)}\n          onClick={handlePageChange}\n          disabled={minPage === 1}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          ...\n        </Button>\n      ))\n    }\n\n    for (let i = minPage; i <= maxPage; i++) {\n      const activePage = i === currentPage\n      const option = (\n        <Button\n          key={i}\n          value={i}\n          onClick={handlePageChange}\n          variant={activePage ? 'primary' : 'light'}\n          // style={{ border: '1px solid #def' }}\n        >\n          {i}\n        </Button>\n      )\n\n      options.push(option)\n    }\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"nextGroup\"\n          value={Math.min(totalPages, currentPage + 7)}\n          onClick={handlePageChange}\n          disabled={maxPage === totalPages}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          ...\n        </Button>\n      ))\n    }\n\n    if (totalPages > 1) {\n      options.push((\n        <Button\n          key=\"next\"\n          value={Math.min(currentPage + 1, totalPages)}\n          onClick={handlePageChange}\n          disabled={currentPage === totalPages}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &gt;\n        </Button>\n      ))\n    }\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"last\"\n          value={totalPages}\n          onClick={handlePageChange}\n          disabled={currentPage === totalPages}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &gt;&gt;\n        </Button>\n      ))\n    }\n\n    this.setState({\n      options\n    })\n  }\n\n  componentDidMount () {\n    this.paginate()\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    if (!isEqual(this.props, prevProps)) {\n      this.paginate()\n    }\n  }\n\n  render () {\n    const { options } = this.state\n    return (\n      <div>\n        <ButtonGroup>\n          {options}\n        </ButtonGroup>\n      </div>\n    )\n  }\n}\n\nPagination.propTypes = {\n  currentPage: PropTypes.number.isRequired,\n  handlePageChange: PropTypes.func.isRequired,\n  totalPages: PropTypes.number.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { find, get } from 'lodash'\nimport { Button, Table } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusSquare, faMinusSquare } from '@fortawesome/free-solid-svg-icons'\nimport { getIconUrl } from '../../service/xivApi'\nimport Pagination from '../common/Pagination'\n\nexport default class RecipeSearchResult extends React.Component {\n  render () {\n    const {\n      clearRecipeSearch,\n      handlePageChange,\n      handleTabChange,\n      handleToggleListItem,\n      myList,\n      pagination,\n      recipeList\n    } = this.props\n\n    if (!recipeList.length) {\n      return (\n        <div className=\"tc\">\n          No Results to Display\n        </div>\n      )\n    }\n\n    const pageTotal = get(pagination, 'PageTotal')\n    const pageCurrent = get(pagination, 'Page')\n\n    return (\n      <Table className=\"recipes\" hover striped>\n        <thead>\n        <tr>\n          <td colSpan={5} className=\"tc\">\n            <Pagination currentPage={pageCurrent} totalPages={pageTotal} handlePageChange={handlePageChange} />\n          </td>\n        </tr>\n        <tr>\n          <th />\n          <th>Crafting Class</th>\n          <th>Item Name</th>\n          <th>Required Level to Craft</th>\n          <th>Add/Remove</th>\n        </tr>\n        </thead>\n        <tbody>\n        {recipeList.map((r, key) => {\n          const iconUrl = getIconUrl(get(r, 'Icon', ''))\n          const name = get(r, 'Name')\n          const craftingClassName = get(r, 'ClassJob.NameEnglish')\n          const level = get(r, 'RecipeLevelTable.ClassJobLevel')\n          const isOnList = !!find(myList, item => get(item, 'ID') === get(r, 'ID'))\n\n          return (\n            <tr key={key}>\n              <td><img src={iconUrl} alt={name} /></td>\n              <td>{craftingClassName}</td>\n              <td>{name}</td>\n              <td>{level}</td>\n              <td>\n                <Button onClick={handleToggleListItem.bind(this, r)} variant={isOnList ? 'danger' : 'success'}>\n                  <FontAwesomeIcon\n                    icon={isOnList ? faMinusSquare : faPlusSquare}\n                  />\n                </Button>\n              </td>\n            </tr>\n          )\n        })}\n        </tbody>\n        <tfoot>\n        <tr>\n          <td colSpan={5} className=\"tc\">\n            <Pagination currentPage={pageCurrent} totalPages={pageTotal} handlePageChange={handlePageChange} />\n          </td>\n        </tr>\n        <tr>\n          <td colSpan={5}>\n            <div className=\"w-100 dib tc\">\n              <Button className=\"mh1\" onClick={clearRecipeSearch.bind(this)} variant=\"danger\">\n                Clear Recipe Search\n              </Button>\n              <Button className=\"mh1\" onClick={handleTabChange.bind(this, 'recipe-list')}>\n                Go to Recipe List\n              </Button>\n            </div>\n          </td>\n        </tr>\n        </tfoot>\n      </Table>\n    )\n  }\n}\n\nRecipeSearchResult.propTypes = {\n  clearRecipeSearch: PropTypes.func.isRequired,\n  handlePageChange: PropTypes.func.isRequired,\n  handleTabChange: PropTypes.func.isRequired,\n  handleToggleListItem: PropTypes.func.isRequired,\n  myList: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  pagination: PropTypes.shape().isRequired,\n  recipeList: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  ready: PropTypes.bool.isRequired\n}\n\nRecipeSearchResult.defaultProps = {\n  myList: [],\n  pagination: {},\n  recipeList: [],\n  ready: true\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { get } from 'lodash'\nimport RecipeSearchForm from './RecipeSearchForm'\nimport RecipeSearchResult from './RecipeSearchResult'\n\nexport default class RecipeSearch extends React.Component {\n  render () {\n    const {\n      clearRecipeSearch,\n      handleChange,\n      handlePageChange,\n      handleReset,\n      handleSubmit,\n      handleTabChange,\n      handleToggleListItem,\n      handleToggleRecipeIncludeMaster,\n      handleToggleRecipeSearchClass,\n      handleToggleRecipeSearchExact,\n      myList,\n      recipeSearchClasses,\n      recipeSearchExact,\n      recipeSearchIncludeMaster,\n      recipeSearchIsInvalid,\n      recipeSearchResults,\n      recipeSearchString\n    } = this.props\n\n    const pagination = get(recipeSearchResults, 'Pagination')\n    const recipeList = get(recipeSearchResults, 'Results')\n\n    return (\n      <React.Fragment>\n        <RecipeSearchForm\n          handleChange={handleChange}\n          handleReset={handleReset}\n          handleSubmit={handleSubmit}\n          handleToggleRecipeIncludeMaster={handleToggleRecipeIncludeMaster}\n          handleToggleRecipeSearchClass={handleToggleRecipeSearchClass}\n          handleToggleRecipeSearchExact={handleToggleRecipeSearchExact}\n          recipeSearchClasses={recipeSearchClasses}\n          recipeSearchExact={recipeSearchExact}\n          recipeSearchIncludeMaster={recipeSearchIncludeMaster}\n          recipeSearchIsInvalid={recipeSearchIsInvalid}\n          recipeSearchString={recipeSearchString}\n        />\n        <hr />\n        <RecipeSearchResult\n          clearRecipeSearch={clearRecipeSearch}\n          handlePageChange={handlePageChange}\n          handleTabChange={handleTabChange}\n          handleToggleListItem={handleToggleListItem}\n          myList={myList}\n          pagination={pagination}\n          recipeList={recipeList}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nRecipeSearch.propTypes = {\n  clearRecipeSearch: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handlePageChange: PropTypes.func.isRequired,\n  handleReset: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  handleTabChange: PropTypes.func.isRequired,\n  handleToggleListItem: PropTypes.func.isRequired,\n  handleToggleRecipeIncludeMaster: PropTypes.func.isRequired,\n  handleToggleRecipeSearchClass: PropTypes.func.isRequired,\n  handleToggleRecipeSearchExact: PropTypes.func.isRequired,\n  myList: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  recipeSearchClasses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  recipeSearchExact: PropTypes.bool.isRequired,\n  recipeSearchIncludeMaster: PropTypes.bool.isRequired,\n  recipeSearchIsInvalid: PropTypes.bool.isRequired,\n  recipeSearchResults: PropTypes.shape(),\n  recipeSearchString: PropTypes.string.isRequired\n}\n\nRecipeSearch.defaultProps = {\n  myList: [],\n  recipeSearchExact: false,\n  recipeSearchIncludeMaster: false,\n  recipeSearchResults: {}\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { isEqual, set, toNumber } from 'lodash'\nimport { Button, Form, Table } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMinusSquare } from '@fortawesome/free-solid-svg-icons'\nimport { getIconUrl } from '../../service/xivApi'\n\nexport default class MyList extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      mapping: this.createItemQuantityMapping()\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    const { list } = this.props\n    if (!isEqual(list, prevProps.list)) {\n      const mapping = this.createItemQuantityMapping()\n      this.setState({\n        mapping\n      })\n    }\n  }\n\n  createItemQuantityMapping () {\n    const { list } = this.props\n    const mapping = {}\n\n    list.forEach(l => {\n      mapping[l.ID] = l.quantity\n    })\n\n    return mapping\n  }\n\n  handleItemQuantityUpdate (i, event) {\n    const { mapping } = this.state\n    set(mapping, i.ID, event.target.value)\n    this.setState({\n      mapping\n    })\n  }\n\n  handleQuantityFieldBlur (item) {\n    const { handleUpdateQuantity } = this.props\n    const { mapping } = this.state\n\n    const quantity = toNumber(mapping[item.ID]) || 1\n\n    handleUpdateQuantity(item, quantity)\n  }\n\n  render () {\n    const {\n      handleClearList,\n      handleTabChange,\n      handleToggleListItem,\n      list\n    } = this.props\n\n    const { mapping } = this.state\n\n    if (!list.length) {\n      return (\n        <div className=\"tc\">\n          No Items in List\n          <hr />\n          <Button onClick={handleTabChange.bind(this, 'search')}>\n            Back to Search\n          </Button>\n        </div>\n      )\n    }\n\n    return (\n      <Table className=\"recipes\" hover striped>\n        <thead>\n        <tr>\n          <th />\n          <th>Crafting Class</th>\n          <th>Item Name</th>\n          <th>Required Level to Craft</th>\n          <th>Quantity</th>\n          <th>Remove</th>\n        </tr>\n        </thead>\n        <tbody>\n        {list.map((i) => {\n          return (\n            <tr key={i.ID}>\n              <td><img src={getIconUrl(i.Icon)} alt={i.Name} /></td>\n              <td>{i.ClassJob.NameEnglish}</td>\n              <td>{i.Name}</td>\n              <td>{i.RecipeLevelTable.ClassJobLevel}</td>\n              <td>\n                <Form.Control\n                  type=\"number\"\n                  value={mapping[i.ID] || 1}\n                  onChange={this.handleItemQuantityUpdate.bind(this, i)}\n                  onBlur={this.handleQuantityFieldBlur.bind(this, i)}\n                />\n              </td>\n              <td>\n                <Button variant=\"danger\" onClick={handleToggleListItem.bind(this, i)}>\n                  <FontAwesomeIcon icon={faMinusSquare} />\n                </Button>\n              </td>\n            </tr>\n          )\n        })}\n        </tbody>\n        {list.length && (\n          <tfoot>\n          <tr>\n            <td colSpan={6} className=\"tc\">\n              <div className=\"space-between\">\n                <Button variant=\"danger\" onClick={handleClearList}>\n                  Clear Recipe List\n                </Button>\n                <Button variant=\"primary\" onClick={handleTabChange.bind(this, 'shopping-list')}>\n                  View My Shopping List\n                </Button>\n              </div>\n            </td>\n          </tr>\n          </tfoot>\n        )}\n      </Table>\n    )\n  }\n}\n\nMyList.propTypes = {\n  handleClearList: PropTypes.func.isRequired,\n  handleTabChange: PropTypes.func.isRequired,\n  handleToggleListItem: PropTypes.func.isRequired,\n  handleUpdateQuantity: PropTypes.func.isRequired,\n  list: PropTypes.arrayOf(PropTypes.shape({\n    ClassJob: PropTypes.shape({\n      Abbreviation_en: PropTypes.string.isRequired,\n      NameEnglish: PropTypes.string.isRequired\n    }),\n    Icon: PropTypes.string.isRequired,\n    Name: PropTypes.string.isRequired,\n    quantity: PropTypes.number,\n    RecipeLevelTable: PropTypes.shape({\n      ClassJobLevel: PropTypes.number.isRequired\n    }).isRequired\n  })).isRequired\n}\n\nMyList.defaultProps = {\n  list: []\n}\n","const RECIPE_SEARCH = 'RECIPE_SEARCH'\nconst RECIPE_LIST = 'RECIPE_LIST'\nconst SHOPPING_LIST = 'SHOPPING_LIST'\n\nexport const RECIPE_SEARCH_REQUEST = `${RECIPE_SEARCH}_SEARCH`\nexport const RECIPE_SEARCH_SUCCESS = `${RECIPE_SEARCH}_SUCCESS`\nexport const RECIPE_SEARCH_FAILURE = `${RECIPE_SEARCH}_FAILURE`\nexport const RECIPE_SEARCH_CLEAR = `${RECIPE_SEARCH}_CLEAR`\n\n// export const RECIPE_LIST_ADD = `${RECIPE_LIST}_ADD`\n// export const RECIPE_LIST_REMOVE = `${RECIPE_LIST}_REMOVE`\nexport const RECIPE_LIST_CLEAR = `${RECIPE_LIST}_CLEAR`\nexport const RECIPE_LIST_SAVE = `${RECIPE_LIST}_SAVE`\n\nexport const SHOPPING_LIST_CREATE = `${SHOPPING_LIST}_CREATE`\nexport const SHOPPING_LIST_CLEAR = `${SHOPPING_LIST}_CLEAR`\nexport const SHOPPING_LIST_ERROR = `${SHOPPING_LIST}_ERROR`\n","import { concat, filter, find, forEach, get, includes, map, set, toLower, uniqBy, orderBy } from 'lodash'\nimport ITEM_TO_GATHERING_ITEM_MAPPING from '../data/item-to-gathering-item-mapping'\nimport GATHERING_ITEM_POINTS from '../data/gathering-item-points'\nimport FISHING_SPOTS from '../data/fishing-spots'\nimport * as XivApiService from './xivApi'\n\n/**\n * Gets a list of ingredients required to craft a given set of recipes.\n *\n * @param recipeList\n * @returns {Promise<*>}\n */\nexport const getIngredientListForRecipes = async recipeList => {\n  if (!recipeList || !recipeList.length) return {}\n\n  // we will want to keep the following lists:\n  // 1. Ingredients that can be gathered\n  const ingredientsGatherable = []\n\n  // 2. Ingredients that can be crafted\n  const ingredientsCrafted = []\n\n  // 3. Ingredients that can be obtained from monsters\n  const ingredientsOther = []\n\n  // 3. Ingredients that can be bought (that cannot be gathered or dropped by monsters)\n  const ingredientsPurchased = []\n\n  await getAndSortRecipeResults(recipeList,\n    ingredientsGatherable,\n    ingredientsCrafted,\n    ingredientsPurchased,\n    ingredientsOther\n  )\n\n  // get item IDs for the gatherable and purchasable things so we can get their info\n  const itemIds = map(concat(ingredientsGatherable, ingredientsOther), item => get(item, 'itemId'))\n  const itemData = await XivApiService.getItemsById(itemIds)\n\n  forEach(get(itemData, 'Results', []), item => {\n    const foundItem = find(ingredientsGatherable, ig => get(ig, 'itemId') === get(item, 'ID')) ||\n      find(ingredientsOther, io => get(io, 'itemId') === get(item, 'ID'))\n    set(foundItem, 'name', get(item, 'Name'))\n    set(foundItem, 'icon', XivApiService.getIconUrl(get(item, 'Icon')))\n    // set(foundItem, 'gameContentLinks', get(item, 'GameContentLinks', {}))\n    set(foundItem, 'gameContentLinks',\n      filter(\n        map(\n          get(item, 'GameContentLinks', {}), (value, key) => ({ key, value })\n        ), result => {\n          const val = toLower(result.key)\n          return includes(val, 'shop') && !includes(val, 'special')\n        }\n      )\n    )\n\n    if (!!get(foundItem, 'gameContentLinks.length')) {\n      ingredientsPurchased.push(foundItem)\n    }\n  })\n\n  // add gathering item data\n  addGatheringItemData(ingredientsGatherable)\n\n  // sort the results\n  return {\n    ingredientsCrafted: orderBy(uniqBy(ingredientsCrafted, ic => get(ic, 'ID')), 'Name'),\n    ingredientsGatherable: orderBy(ingredientsGatherable, 'name'),\n    ingredientsPurchased: orderBy(ingredientsPurchased, 'name'),\n    ingredientsOther: orderBy(ingredientsOther, 'name')\n  }\n}\n\nconst addGatheringItemData = ingredientsGatherable => {\n  forEach(ingredientsGatherable, item => {\n    const gatheringItemId = get(item, 'gatheringItemId')\n\n    if (!!gatheringItemId) {\n      const filteredGatheringPoints = filter(\n        GATHERING_ITEM_POINTS, point => get(point, 'ID', '').startsWith(`${gatheringItemId}.`)\n      )\n\n      const namePath = 'GatheringPoint.PlaceName.Name_en'\n      const areaPath = 'GatheringPoint.TerritoryType.PlaceName.Name_en'\n      const regionPath = 'GatheringPoint.TerritoryType.PlaceNameRegion.Name_en'\n      const levelPath = 'GatheringPoint.GatheringPointBase.GatheringLevel'\n      const typePath = 'GatheringPoint.GatheringPointBase.GatheringType.Name_en'\n      const aetherytePath = 'GatheringPoint.TerritoryType.AetheryteTargetID'\n\n      const pointData = map(filteredGatheringPoints, point => getPointData(\n        point,\n        namePath,\n        areaPath,\n        regionPath,\n        levelPath,\n        typePath,\n        aetherytePath\n      ))\n\n      set(item, 'pointData', orderBy(pointData, ['region', 'area', 'name']))\n    } else {\n      const itemId = get(item, 'itemId')\n      const filteredFishingSpots = filter(FISHING_SPOTS, spot => {\n        for (let i = 0; i < 10; i++) {\n          const path = `Item${i}TargetID`\n          const fishId = get(spot, path)\n          if (fishId === itemId) return true\n        }\n      })\n\n      const namePath = 'PlaceName.Name_en'\n      const areaPath = 'TerritoryType.PlaceName.Name_en'\n      const regionPath = 'TerritoryType.PlaceNameRegion.Name_en'\n      const levelPath = 'GatheringLevel'\n\n      const pointData = map(filteredFishingSpots, point => {\n        const pd = getPointData(\n          point,\n          namePath,\n          areaPath,\n          regionPath,\n          levelPath,\n          ''\n        )\n        set(pd, 'type', 'Fishing')\n        set(pd, 'gatheringClass', 'Fisherman')\n        return pd\n      })\n\n      set(item, 'pointData', orderBy(pointData, ['region', 'area', 'name']))\n    }\n  })\n}\n\nconst getPointData = (data, namePath, areaPath, regionPath, levelPath, typePath) => {\n  const typeMap = {\n    'Mining': 'Miner',\n    'Quarrying': 'Miner',\n    'Logging': 'Botanist',\n    'Harvesting': 'Botanist'\n  }\n  const name = get(data, namePath)\n  const area = get(data, areaPath)\n  const region = get(data, regionPath)\n  const level = get(data, levelPath)\n  const type = get(data, typePath)\n\n  return {\n    name,\n    area,\n    region,\n    level,\n    gatheringClass: get(typeMap, type),\n    type,\n    id: get(data, 'ID')\n  }\n}\n\nconst hasFishingSpotMatch = itemId => {\n  let matched = false\n  forEach(FISHING_SPOTS, spot => {\n    for (let i = 0; i < 10; i++) {\n      const path = `Item${i}TargetID`\n      const fishingId = get(spot, path)\n      if (itemId === fishingId) {\n        matched = true\n        return\n      }\n    }\n  })\n\n  return matched\n}\n\nconst getAndSortRecipeResults = async (\n  recipeList,\n  ingredientsGatherable,\n  ingredientsCrafted,\n  ingredientsPurchased,\n  ingredientsOther\n) => {\n  const recipeIds = map(recipeList, recipe => get(recipe, 'ID'))\n  const recipeResults = get(await XivApiService.getRecipesById(recipeIds), 'Results', [])\n  const nextRecipeResults = []\n  forEach(recipeResults, rr => {\n    const recipeListEntry = find(recipeList, rle => get(rle, 'ID') === get(rr, 'ID'))\n    set(rr, 'quantity', get(recipeListEntry, 'quantity'))\n\n    // go through each ingredient\n    for (let i = 0; i < 10; i++) {\n      const itemId = get(rr, `ItemIngredient${i}.ID`)\n      const itemCategory = get(rr, `ItemIngredient${i}.ItemSearchCategoryTargetID`)\n      const amount = get(rr, `AmountIngredient${i}`)\n      const gatheringMapNode = find(ITEM_TO_GATHERING_ITEM_MAPPING, mapping => get(mapping, 'ItemID') === itemId)\n      const gatheringItemId = get(gatheringMapNode, 'GatheringItemID')\n      const ingredientRecipe = get(rr, `ItemIngredientRecipe${i}[0]`)\n      const quantity = get(rr, 'quantity')\n      const fishingSpotMatch = hasFishingSpotMatch(itemId)\n\n      if (!!gatheringItemId || !!fishingSpotMatch) {\n        const existingIngredientGatherable = find(ingredientsGatherable, ig => get(ig, 'itemId') === itemId)\n        if (!!existingIngredientGatherable) {\n          const existingAmount = get(existingIngredientGatherable, 'amount')\n          set(existingIngredientGatherable, 'amount', existingAmount + (amount * quantity))\n        } else {\n          ingredientsGatherable.push({ itemId, gatheringItemId, amount: amount * quantity, itemCategory })\n        }\n      }\n\n      if (!!ingredientRecipe) {\n        const existingIngredientCrafted = find(ingredientsCrafted, ir => get(ingredientRecipe, 'ID') === get(ir, 'ID'))\n        const existingAmount = get(existingIngredientCrafted, 'quantity', 0)\n        set(existingIngredientCrafted || ingredientRecipe, 'quantity', existingAmount + (quantity * amount))\n        if (!existingIngredientCrafted) {\n          nextRecipeResults.push(ingredientRecipe)\n          ingredientsCrafted.push(ingredientRecipe)\n        }\n      }\n\n      if (!gatheringItemId && !ingredientRecipe && !fishingSpotMatch && !!itemId) {\n        const existingIngredientOther = find(ingredientsOther, ip => get(ip, 'itemId') === itemId)\n        if (!!existingIngredientOther) {\n          const existingAmount = get(existingIngredientOther, 'amount')\n          set(existingIngredientOther, 'amount', existingAmount + (amount * quantity))\n        } else {\n          ingredientsOther.push({ itemId, amount: amount * quantity })\n        }\n      }\n    }\n  })\n\n  if (!!nextRecipeResults.length) {\n    await getAndSortRecipeResults(nextRecipeResults,\n      ingredientsGatherable,\n      ingredientsCrafted,\n      ingredientsPurchased,\n      ingredientsOther\n    )\n  }\n}\n","import * as T from './types'\nimport * as LocalStorageService from '../../service/localStorage'\nimport * as RecipeListService from '../../service/recipe'\nimport * as XivApiService from '../../service/xivApi'\n\nconst recipeListClear = () => ({\n  type: T.RECIPE_LIST_CLEAR\n})\n\nconst recipeListSave = recipeList => ({\n  type: T.RECIPE_LIST_SAVE,\n  recipeList\n})\n\nconst shoppingListClear = () => ({\n  type: T.SHOPPING_LIST_CLEAR\n})\n\nconst shoppingListCreate = shoppingList => ({\n  type: T.SHOPPING_LIST_CREATE,\n  shoppingList\n})\n\nconst recipeSearchRequest = params => ({\n  type: T.RECIPE_SEARCH_REQUEST,\n  params\n})\n\nconst apiRequestSuccess = (type, payload) => ({\n  type,\n  payload\n})\n\nconst apiRequestFailure = (type, error) => ({\n  type, error\n})\n\nconst recipeSearchClear = () => ({\n  type: T.RECIPE_SEARCH_CLEAR\n})\n\nconst shoppingListFailure = error => ({\n  type: T.SHOPPING_LIST_ERROR,\n  error\n})\n\nexport const saveMyRecipeList = recipeList => dispatch => {\n  LocalStorageService.storeMyRecipeList(recipeList)\n  dispatch(recipeListSave(recipeList))\n  dispatch(createMyShoppingList(recipeList))\n}\n\nexport const clearMyRecipeList = () => dispatch => {\n  LocalStorageService.clearMyRecipeList()\n  dispatch(recipeListClear())\n  dispatch(clearMyShoppingList())\n}\n\nexport const createMyShoppingList = recipeList => async dispatch => {\n  try {\n    const result = await RecipeListService.getIngredientListForRecipes(recipeList)\n    LocalStorageService.storeMyShoppingList(result)\n    dispatch(shoppingListCreate(result))\n  } catch (err) {\n    dispatch(shoppingListFailure(err))\n  }\n}\n\nexport const clearMyShoppingList = () => dispatch => {\n  LocalStorageService.clearMyShoppingList()\n  dispatch(shoppingListClear())\n}\n\nexport const searchRecipes = (string, params) => async dispatch => {\n  dispatch(recipeSearchRequest({string, ...params}))\n  try {\n    const result = await XivApiService.recipeSearch(string, params)\n    dispatch(apiRequestSuccess(T.RECIPE_SEARCH_SUCCESS, result))\n  } catch (err) {\n    dispatch(apiRequestFailure(T.RECIPE_SEARCH_FAILURE, err))\n  }\n}\n\nexport const clearRecipeSearch = () => dispatch => {\n  dispatch(recipeSearchClear())\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSort } from '@fortawesome/free-solid-svg-icons'\n\nclass SortableTableHeaderCell extends React.Component {\n  render () {\n    const { className, text, sortFunc, applySorting } = this.props\n    return (\n      <th className={className} onClick={applySorting.bind(this, sortFunc)}\n        style={{ cursor: 'pointer' }}\n      >\n        {text}\n        <FontAwesomeIcon\n          className=\"margin-left\"\n          icon={faSort}\n        />\n      </th>\n    )\n  }\n}\n\nSortableTableHeaderCell.propTypes = {\n  text: PropTypes.string.isRequired,\n  sortFunc: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  applySorting: PropTypes.func.isRequired\n}\n\nexport default SortableTableHeaderCell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { get } from 'lodash'\nimport { Badge, OverlayTrigger, Tooltip } from 'react-bootstrap'\n\nexport default class XivIcon extends React.Component {\n  render () {\n    const { badge, className, image, tooltip } = this.props\n\n    const htmlImage = (\n      <img src={image.url} alt={image.altText} />\n    )\n\n    const content = get(tooltip, 'text') ? (\n      <OverlayTrigger overlay={(\n        <Tooltip>\n          {get(tooltip, 'text')}\n        </Tooltip>\n      )}>\n        {htmlImage}\n      </OverlayTrigger>\n    ) : htmlImage\n\n    const htmlBadge = get(badge, 'text') ? (\n      <React.Fragment>\n        <br />\n        <Badge variant={get(badge, 'variant', 'primary')} className=\"xiv-icon-badge\">\n          {get(badge, 'text')}\n        </Badge>\n      </React.Fragment>\n    ) : null\n\n    return (\n      <div className={cx(className)}>\n        {content}\n        {htmlBadge}\n      </div>\n    )\n  }\n}\n\nXivIcon.propTypes = {\n  badge: PropTypes.shape({\n    variant: PropTypes.oneOf(['primary', 'secondary', 'success', 'warning', 'danger', 'light', 'dark']),\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired\n  }),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  image: PropTypes.shape({\n    altText: PropTypes.string.isRequired,\n    className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n    url: PropTypes.string.isRequired\n  }).isRequired,\n  tooltip: PropTypes.shape({\n    text: PropTypes.string.isRequired\n  })\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { Button, FormControl, Table } from 'react-bootstrap'\nimport { clone, filter, get, includes, isEqual, orderBy, pull } from 'lodash'\nimport { getIconUrl } from '../../service/xivApi'\nimport { clearObtainedItems, getObtainedItems, storeObtainedItems } from '../../service/localStorage'\nimport SortableTableHeaderCell from '../common/SortableTableHeaderCell'\nimport XivIcon from '../common/XivIcon'\n\n/**\n * Scrolls to a position on the screen.\n *\n * @param {number} x The X coordinate for scrolling.\n * @param {number} y The Y coodrinate for scrolling.\n */\nfunction scrollToPosition (x, y) {\n  window.scrollTo(x, y)\n}\n\n/**\n * The number of columns in a row.  This allows the subheadings to take up the full width of the table.\n * @type {number}\n */\nconst headingColumns = 7\n\nexport default class ShoppingList extends React.Component {\n\n\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      ingredientsGatherableSort: {\n        func: 'name',\n        direction: 'asc'\n      },\n      itemsOwned: getObtainedItems()\n    }\n  }\n\n  componentDidMount () {\n    this.updateGatherableIngredients()\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    const { shoppingList } = this.props\n\n    if (!isEqual(shoppingList, prevProps.shoppingList)) {\n      this.updateGatherableIngredients()\n    }\n  }\n\n  updateGatherableIngredients () {\n    const { shoppingList } = this.props\n    const {\n      // ingredientsCrafted,\n      // ingredientsPurchased,\n      ingredientsGatherable\n      // ingredientsOther\n    } = shoppingList\n\n    const gatherableStateVars = {}\n    if (ingredientsGatherable) {\n      ingredientsGatherable.forEach(item => {\n        const key = `gatherable-${item.itemId}-location`\n        gatherableStateVars[key] = get(item, 'pointData[0]', {})\n      })\n    }\n\n    this.setState({\n      ...gatherableStateVars,\n      ingredientsGatherable: filter(ingredientsGatherable, ig => get(ig, 'itemCategory') !== 58),\n      ingredientsCrystals: filter(ingredientsGatherable, ig => get(ig, 'itemCategory') === 58)\n    })\n  }\n\n  handleLocationUpdate (event) {\n    event.preventDefault()\n\n    const { target: { value, id } } = event\n\n    this.setState({\n      [id]: JSON.parse(value)\n    })\n  }\n\n  handleApplyIngredientsGatherableSort (sortFunc) {\n    const { ingredientsGatherableSort } = this.state\n\n    const sortDirection =\n      // isEqual(JSON.stringify(sortFunc), JSON.stringify(ingredientsGatherableSort.func)) && ingredientsGatherableSort.direction === 'asc'\n      isEqual(\n        JSON.stringify(sortFunc),\n        JSON.stringify(ingredientsGatherableSort.func)\n      ) && ingredientsGatherableSort.direction === 'asc'\n        ? 'desc'\n        : 'asc'\n\n    const newIngredientsGatherableSort = {\n      func: sortFunc,\n      direction: sortDirection\n    }\n\n    this.setState({\n      ingredientsGatherableSort: newIngredientsGatherableSort\n    })\n  }\n\n  handleToggleItemOwned (itemId) {\n    const { scrollX, scrollY } = window\n    const itemsOwned = clone(get(this.state, 'itemsOwned', []))\n\n    if (includes(itemsOwned, itemId)) {\n      pull(itemsOwned, itemId)\n    } else {\n      itemsOwned.push(itemId)\n    }\n\n    storeObtainedItems(itemsOwned)\n\n    this.setState({\n      itemsOwned\n    }, scrollToPosition.bind(this, scrollX, scrollY))\n  }\n\n  handleOwnershipSort (item) {\n    const itemId = get(item, 'itemId', get(item, 'ItemResult.ID'))\n    return includes(get(this.state, 'itemsOwned', []), itemId)\n    // return !!itemId\n  }\n\n  handleClearOwnershipInfo () {\n    clearObtainedItems()\n    this.setState({\n      itemsOwned: []\n    })\n  }\n\n  render () {\n    const { shoppingList: { ingredientsCrafted, ingredientsPurchased, ingredientsOther } } = this.props\n    const { ingredientsCrystals, ingredientsGatherable, ingredientsGatherableSort } = this.state\n\n    if (!get(ingredientsGatherable, 'length') && !ingredientsCrafted && !ingredientsPurchased) {\n      return (\n        <div className=\"tc\">\n          No Results to Display\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <div className=\"flex flex-row justify-center items-center\">\n          {!!ingredientsCrystals && (\n            ingredientsCrystals.map(ic => {\n              const { amount, name, icon } = ic\n              return (\n                <span key={name} className=\"ph1\">\n                  <XivIcon\n                    badge={{ text: amount }}\n                    image={{ url: icon, altText: name }}\n                    tooltip={{ text: name }}\n                  />\n                </span>\n              )\n            })\n          )}\n        </div>\n        <Table hover striped className=\"shopping-list\">\n          {!!ingredientsGatherable && !!ingredientsGatherable.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Gatherable Items</th>\n              </tr>\n              <tr>\n                <th />\n                <SortableTableHeaderCell\n                  text=\"Name\"\n                  sortFunc=\"name\"\n                  applySorting={this.handleApplyIngredientsGatherableSort.bind(this)}\n                />\n                <th>Required Class</th>\n                <th>Required Level</th>\n                <th>Quantity</th>\n                <SortableTableHeaderCell\n                  text=\"Location\"\n                  sortFunc={ig => {\n                    const point = get(this.state, `gatherable-${ig.itemId}-location`)\n                    return `${point.region} - ${point.area} - ${point.name}`\n                  }}\n                  applySorting={this.handleApplyIngredientsGatherableSort.bind(this)}\n                />\n                <th>Obtained</th>\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsGatherable,\n                [this.handleOwnershipSort.bind(this), ingredientsGatherableSort.func],\n                ['asc', ingredientsGatherableSort.direction]\n              ).map(item => {\n                const { name, icon, itemId, amount, pointData } = item\n                const key = `gatherable-${itemId}`\n                const locationSelectId = `${key}-location`\n                const gatheringClass = get(this.state, `${locationSelectId}.gatheringClass`)\n                const gatheringType = get(this.state, `${locationSelectId}.type`)\n                const level = get(this.state, `${locationSelectId}.level`)\n                const owned = includes(get(this.state, 'itemsOwned', []), itemId)\n\n                return (\n                  <tr key={key} className={cx(owned ? 'owned' : '')}>\n                    <td><XivIcon image={{ url: icon, altText: name }} /></td>\n                    <td>{name}</td>\n                    <td>{gatheringClass}{!!gatheringType && ` (${gatheringType})`}</td>\n                    <td>{level}</td>\n                    <td>{amount}</td>\n                    <td>\n                      {pointData.length === 1 && (\n                        <React.Fragment>\n                          {pointData[0].region} - {pointData[0].area} {pointData[0].name ? `- ${pointData[0].name}` : '(Unspoiled)'}\n                        </React.Fragment>\n                      )}\n                      {pointData.length > 1 && (\n                        <FormControl\n                          id={locationSelectId}\n                          as=\"select\"\n                          onChange={this.handleLocationUpdate.bind(this)}\n                        >\n                          {pointData.map((point, key) => (\n                            <option key={key} value={JSON.stringify(point)}>\n                              {point.region} - {point.area} {point.name ? `- ${point.name}` : '(Unspoiled)'} (Level {point.level}, {point.gatheringClass})\n                            </option>\n                          ))}\n                        </FormControl>\n                      )}\n                    </td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={itemId}\n                        checked={owned}\n                        onChange={this.handleToggleItemOwned.bind(this, itemId)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n          {!!ingredientsOther && !!ingredientsOther.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Items Obtained Elsewhere</th>\n              </tr>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th />\n                <th />\n                <th>Quantity</th>\n                <th>Location</th>\n                <th>Obtained</th>\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsOther,\n                this.handleOwnershipSort.bind(this),\n                'asc'\n              ).map(item => {\n                const { name, icon, itemId, amount } = item\n                const owned = includes(get(this.state, 'itemsOwned', []), itemId)\n                return (\n                  <tr key={`purchasable-${itemId}`} className={cx(owned ? 'owned' : '')}>\n                    <td><XivIcon image={{ url: icon, altText: name }} /></td>\n                    <td>{name}</td>\n                    <td />\n                    <td />\n                    <td>{amount}</td>\n                    <td>???</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={itemId}\n                        checked={owned}\n                        onChange={this.handleToggleItemOwned.bind(this, itemId)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n          {!!ingredientsPurchased && !!ingredientsPurchased.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Purchasable Items</th>\n              </tr>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Currency</th>\n                <th>Cost</th>\n                <th>Quantity</th>\n                <th>Location</th>\n                <th>Obtained</th>\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsPurchased,\n                this.handleOwnershipSort.bind(this),\n                'asc'\n              ).map(item => {\n                const { name, icon, itemId, amount } = item\n                const owned = includes(get(this.state, 'itemsOwned', []), itemId)\n                return (\n                  <tr key={`purchasable-${itemId}`} className={cx(owned ? 'owned' : '')}>\n                    <td><XivIcon image={{ url: icon, altText: name }} /></td>\n                    <td>{name}</td>\n                    <td>???</td>\n                    <td>???</td>\n                    <td>{amount}</td>\n                    <td>???</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={itemId}\n                        checked={owned}\n                        onChange={this.handleToggleItemOwned.bind(this, itemId)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n          {!!ingredientsCrafted && !!ingredientsCrafted.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Prerequisite Crafts</th>\n              </tr>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Required Class</th>\n                <th>Required Level</th>\n                <th>Quantity</th>\n                <th>Location</th>\n                <th />\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsCrafted,\n                [this.handleOwnershipSort.bind(this), 'ItemResult.Name_en'],\n                ['asc', 'asc']\n              ).map(item => {\n                const name = get(item, 'ItemResult.Name_en')\n                const icon = get(item, 'ItemResult.Icon')\n                const id = get(item, 'ID')\n                const quantity = get(item, 'quantity')\n                const craftClass = get(item, 'ClassJob.NameEnglish')\n                const craftLevel = get(item, 'RecipeLevelTable.ClassJobLevel')\n                return (\n                  <tr key={`crafted-${id}`}>\n                    <td><XivIcon image={{ url: getIconUrl(icon), altText: name }} /></td>\n                    <td>{name}</td>\n                    <td>{craftClass}</td>\n                    <td>{craftLevel}</td>\n                    <td>{quantity}</td>\n                    <td>N/A</td>\n                    <td />\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n          <tfoot>\n          <tr>\n            <td colSpan={7} className=\"tc pv1\">\n              <Button variant=\"warning\" onClick={this.handleClearOwnershipInfo.bind(this)}>\n                Clear Owned Items Info\n              </Button>\n            </td>\n          </tr>\n          </tfoot>\n        </Table>\n      </div>\n    )\n  }\n}\n\nShoppingList.propTypes = {\n  shoppingList: PropTypes.shape().isRequired\n}\n\nShoppingList.defaultProps = {\n  shoppingList: {}\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Dropdown, DropdownButton } from 'react-bootstrap'\nimport { orderBy } from 'lodash'\nimport CRAFTING_CLASSES from '../../data/crafting-classes'\n\nexport default class FilterDropdown extends React.Component {\n  render () {\n    const { label, applyFilterFunc } = this.props\n    return (\n      <DropdownButton title={`Showing ${label}`}>\n        <Dropdown.Item onClick={applyFilterFunc.bind(this, c => !!c)}>\n          All\n        </Dropdown.Item>\n        <Dropdown.Divider/>\n        <Dropdown.Item onClick={applyFilterFunc.bind(this, c => c.type === 'crafting')}>\n          Crafting Classes\n        </Dropdown.Item>\n        <Dropdown.Item onClick={applyFilterFunc.bind(this, c => c.type === 'gathering')}>\n          Gathering Classes\n        </Dropdown.Item>\n        <Dropdown.Divider/>\n        {orderBy(CRAFTING_CLASSES, 'name').map((craftingClass, key) => (\n          <Dropdown.Item\n            key={key}\n            onClick={applyFilterFunc.bind(this, c => c.abbreviation === craftingClass.abbreviation)}\n          >\n            {craftingClass.name}\n          </Dropdown.Item>\n        ))}\n      </DropdownButton>\n    )\n  }\n}\n\nFilterDropdown.propTypes = {\n  label: PropTypes.string.isRequired,\n  applyFilterFunc: PropTypes.func.isRequired\n}\n","export function calculateRemainingExp (currentExp, totalExp) {\n  return Math.max(totalExp - currentExp, 0)\n}\n\nexport function calculateRemainingItems (remainingExp, expPerItem) {\n  return Math.ceil(remainingExp / expPerItem)\n}\n\nexport function calculateProgressPercentage (currentExp, totalExp) {\n  return totalExp <= 0 ? 0 : Math.floor((currentExp / totalExp) * 100)\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { calculateProgressPercentage, calculateRemainingExp, calculateRemainingItems } from '../../service/calculations'\nimport SortableTableHeaderCell from '../common/SortableTableHeaderCell'\n\nconst tableHeaders = [\n  { name: 'Class', sortFunc: 'name' },\n  { name: 'Level', sortFunc: 'currentLevel' },\n  { name: 'Current Exp.', sortFunc: 'currentExperience' },\n  { name: 'Required Exp.', sortFunc: undefined },\n  { name: 'Remaining Exp.', sortFunc: c => calculateRemainingExp(c.currentExperience, c.totalExperience) },\n  { name: 'Exp. Per Item', sortFunc: 'experiencePerItem' },\n  {\n    name: 'Remaining Items',\n    sortFunc: c => calculateRemainingItems(\n      calculateRemainingExp(c.currentExperience, c.totalExperience), c.experiencePerItem\n    )\n  },\n  { name: 'Progress', sortFunc: c => calculateProgressPercentage(c.currentExperience, c.totalExperience) }\n]\n\nexport default class CalculationsTableHeader extends React.Component {\n  render () {\n    const { applySortFunc } = this.props\n    return (\n      <thead>\n      <tr>\n        {tableHeaders.map((h, key) => {\n          if (h.sortFunc) {\n            return (\n              <SortableTableHeaderCell\n                key={key}\n                text={h.name}\n                sortFunc={h.sortFunc}\n                applySorting={applySortFunc}\n              />\n            )\n          } else {\n            return (\n              <th key={key}>\n                {h.name}\n              </th>\n            )\n          }\n        })}\n      </tr>\n      </thead>\n    )\n  }\n}\n\nCalculationsTableHeader.propTypes = {\n  applySortFunc: PropTypes.func.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { calculateProgressPercentage, calculateRemainingExp, calculateRemainingItems } from '../../service/calculations'\nimport Form from 'react-bootstrap/es/Form'\nimport { OverlayTrigger, Popover, ProgressBar } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfoCircle as faIcon } from '@fortawesome/free-solid-svg-icons'\nimport { find, set, toNumber } from 'lodash'\nimport LEVELING_GUIDE_LINKS from '../../data/leveling-guide-links'\n\nclass CalculationsTableBody extends React.Component {\n  state = {\n    focusedRow: undefined\n  }\n\n  getLevelingGuidePageUrl (abbreviation, currentLevel) {\n    const classGuideData = find(LEVELING_GUIDE_LINKS, g => g.abbreviation === abbreviation)\n    const { levelingGuide } = classGuideData\n\n    const matchedPage = find(levelingGuide.pages, p => {\n      const { maxLevel, minLevel } = p\n\n      if (currentLevel >= minLevel && currentLevel <= maxLevel) {\n        return true\n      }\n    })\n\n    return !!matchedPage ? `${levelingGuide.url}/${matchedPage.page}/` : levelingGuide.url\n  }\n\n  validateNumericFieldChange (abbreviation, event) {\n    const { target: { value, max, min } } = event\n    const { updateField } = this.props\n\n    if (!!min && toNumber(value) < min) {\n      set(event, 'target.value', min)\n    }\n\n    if (!!max && toNumber(value) > max) {\n      set(event, 'target.value', max)\n    }\n\n    updateField(abbreviation, event)\n  }\n\n  handleRowFocus (abbreviation, focused) {\n    this.setState({\n      focusedRow: focused ? abbreviation : undefined\n    })\n  }\n\n  render () {\n    const { craftingClasses } = this.props\n    return (\n      <tbody>\n      {craftingClasses.map(c => {\n        const remainingExperience = calculateRemainingExp(c.currentExperience, c.totalExperience)\n        const remainingItems = calculateRemainingItems(remainingExperience, c.experiencePerItem)\n        const progressPercentage = calculateProgressPercentage(c.currentExperience, c.totalExperience)\n\n        const popover = (\n          <Popover id={`links-${c.name}`}>\n            <a\n              href={this.getLevelingGuidePageUrl(c.abbreviation, c.currentLevel)}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Leveling Guide\n            </a>\n          </Popover>\n        )\n\n        return (\n          <tr\n            key={`calculationTableRow${c.abbreviation}`}\n            onFocus={this.handleRowFocus.bind(this, c.abbreviation, true)}\n            onBlur={this.handleRowFocus.bind(this, c.abbreviation, false)}\n            className={cx(this.state.focusedRow === c.abbreviation ? 'focused' : undefined)}\n          >\n            <td>\n              <div className=\"flex justify-between items-center\">\n                {c.name}\n                <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover} rootClose>\n                  <FontAwesomeIcon icon={faIcon} className=\"text-primary pointer\" />\n                </OverlayTrigger>\n              </div>\n            </td>\n            <td>\n              <Form.Control\n                name=\"currentLevel\"\n                type=\"number\"\n                value={c.currentLevel}\n                min=\"1\"\n                max=\"90\"\n                onChange={this.validateNumericFieldChange.bind(this, c.abbreviation)}\n              />\n            </td>\n            <td>\n              <Form.Control\n                name=\"currentExperience\"\n                type=\"number\"\n                value={c.currentExperience}\n                min=\"0\"\n                max={c.totalExperience}\n                onChange={this.validateNumericFieldChange.bind(this, c.abbreviation)}\n              />\n            </td>\n            <td>{c.totalExperience}</td>\n            <td>{remainingExperience}</td>\n            <td>\n              <Form.Control\n                name=\"experiencePerItem\"\n                type=\"number\"\n                value={c.experiencePerItem}\n                min=\"1\"\n                onChange={this.validateNumericFieldChange.bind(this, c.abbreviation)}\n              />\n            </td>\n            <td>{remainingItems}</td>\n            <td>\n              <ProgressBar\n                now={progressPercentage}\n                label={`${c.currentExperience} / ${c.totalExperience} (${progressPercentage}%)`}\n              />\n            </td>\n          </tr>\n        )\n      })}\n      </tbody>\n    )\n  }\n}\n\nCalculationsTableBody.propTypes = {\n  craftingClasses: PropTypes.arrayOf(PropTypes.shape()).isRequired\n}\n\nexport default CalculationsTableBody\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst TIME_TO_WAIT = 15\n\nexport default class FirstTimeImport extends React.Component {\n  state = {}\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const { show } = this.props\n    const { timer } = this.state\n\n    if (show !== prevProps.show) {\n      if (!timer && show) {\n        this.startTimer()\n      } else {\n        this.endTimer()\n      }\n    }\n  }\n\n  async executeTimer () {\n    const { getLodestoneCharacterData } = this.props\n    const { timeLeft = 0 } = this.state\n\n    if (!timeLeft) {\n      this.endTimer()\n      await getLodestoneCharacterData()\n      if (this.props.show) {\n        this.startTimer()\n      }\n    } else {\n      this.setState({\n        timeLeft: timeLeft - 1\n      })\n    }\n  }\n\n\n  startTimer () {\n    this.setState({\n      timeLeft: TIME_TO_WAIT,\n      timer: setInterval(this.executeTimer.bind(this), 1000)\n    })\n  }\n\n  endTimer () {\n    const { timer } = this.state\n    if (!!timer) {\n      this.setState({\n        timer: clearInterval(timer)\n      })\n    }\n  }\n\n  render () {\n    const { show } = this.props\n    const { timeLeft } = this.state\n\n    if (!show) {\n      return null\n    }\n\n    const timeLeftMessage = `Your data is currently being loaded.  Please wait ${timeLeft} `\n      + `second${timeLeft > 1 ? 's' : ''} while the import processes, after which your data will attempt to load `\n      + `automatically.  If you are experiencing continued difficulty, please try your import again.`\n    const doneMessage = `Checking your import for completeness, please wait...`\n\n    return (\n      <div className=\"w-100 pb3 tc alert alert-info\">\n        Thanks for importing! {timeLeft ? timeLeftMessage : doneMessage}\n      </div>\n    )\n  }\n}\n\nFirstTimeImport.propTypes = {\n  show: PropTypes.bool.isRequired,\n  getLodestoneCharacterData: PropTypes.func.isRequired\n}\n\nFirstTimeImport.defaultProps = {\n  show: false\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Table } from 'react-bootstrap'\nimport { concat, filter, find, get, isEqual, orderBy, set, toNumber } from 'lodash'\nimport FilterDropdown from './FilterDropdown'\nimport CalculationsTableHeader from './CalculationsTableHeader'\nimport CalculationsTableBody from './CalculationsTableBody'\nimport EXP_PER_LEVEL from '../../data/exp-per-level'\nimport { saveLocalClassData, getLodestoneCharacterData } from '../../store/local/actions'\nimport FirstTimeImport from './FirstTimeImport'\n\nclass CraftingGatheringCalculator extends React.Component {\n  state = {\n    sort: {\n      func: 'name',\n      direction: 'asc'\n    },\n    filter: {\n      func: undefined,\n      label: 'All'\n    }\n  }\n\n  applySort (sortFunc) {\n    const { sort } = this.state\n    const sortDirection = isEqual(sortFunc, sort.func) && sort.direction === 'asc' ? 'desc' : 'asc'\n    this.setState({\n      sort: {\n        func: sortFunc,\n        direction: sortDirection\n      }\n    })\n  }\n\n  applyFilter (filterFunc, event) {\n    this.setState({\n      filter: {\n        func: filterFunc,\n        label: event.target.innerText\n      }\n    })\n  }\n\n  getSortedCraftingClassData (craftingClassData) {\n    const { sort } = this.state\n    return orderBy(craftingClassData, sort.func, sort.direction)\n  }\n\n  getFilteredCraftingClassData (craftingClassData) {\n    const { filter: { func } } = this.state\n    return filter(craftingClassData, func)\n  }\n\n  updateField (abbreviation, event) {\n    const { target: { value, name } } = event\n    const { craftingClassData, saveLocalClassData } = this.props\n\n    const targetCraftingClass = find(craftingClassData, c => c.abbreviation === abbreviation)\n    const otherCraftingClasses = filter(craftingClassData, c => c.abbreviation !== abbreviation)\n    set(targetCraftingClass, name, toNumber(value))\n\n    if (name === 'currentLevel') {\n      set(targetCraftingClass, 'totalExperience', EXP_PER_LEVEL[value])\n    }\n\n    const updatedCraftingClasses = orderBy(concat(otherCraftingClasses, targetCraftingClass), ['type', 'name'])\n\n    saveLocalClassData(updatedCraftingClasses)\n  }\n\n  render () {\n    const { craftingClassData, characterData, getLodestoneCharacterData } = this.props\n    const sortedAndFilteredCraftingClassData = this.getSortedCraftingClassData(\n      this.getFilteredCraftingClassData(craftingClassData)\n    )\n\n    return (\n      <div>\n        <FirstTimeImport\n          show={get(characterData, 'Character') === null}\n          getLodestoneCharacterData={getLodestoneCharacterData.bind(this, get(characterData, 'characterId'))}\n        />\n        <div className=\"w-100 pb3 tc\">\n          <FilterDropdown label={this.state.filter.label} applyFilterFunc={this.applyFilter.bind(this)} />\n        </div>\n        <div className=\"table-responsive\">\n          <Table className=\"calculations\" striped hover>\n            <CalculationsTableHeader applySortFunc={this.applySort.bind(this)} />\n            <CalculationsTableBody\n              craftingClasses={sortedAndFilteredCraftingClassData}\n              updateField={this.updateField.bind(this)}\n            />\n          </Table>\n        </div>\n      </div>\n    )\n  }\n}\n\nCraftingGatheringCalculator.propTypes = {\n  craftingClassData: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  characterData: PropTypes.shape()\n}\n\nconst mapStateToProps = () => ({})\nconst mapDispatchToProps = dispatch => ({\n  saveLocalClassData: classData => dispatch(saveLocalClassData(classData)),\n  getLodestoneCharacterData: characterId => dispatch(getLodestoneCharacterData(characterId))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CraftingGatheringCalculator)\n","import React from 'react'\nimport { Badge, Tab, Tabs } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { cloneDeep, find, get, includes, indexOf, omit, reject, sortBy, toNumber } from 'lodash'\nimport { getCurrentTab, storeCurrentTab } from '../service/localStorage'\nimport RecipeSearch from './recipes/RecipeSearch'\nimport MyList from './recipes/MyList'\nimport * as recipeActions from '../store/recipeList/actions'\nimport ShoppingList from './recipes/ShoppingList'\nimport CraftingGatheringCalculator from './calculator/CraftingGatheringCalculator'\n\nclass RecipeHelper extends React.Component {\n  state = {\n    recipeSearchClasses: [],\n    recipeSearchExact: false,\n    recipeSearchString: '',\n    recipeSearchIncludeMaster: false,\n    recipeSearchIsInvalid: false,\n    myList: [],\n    lastSearch: undefined\n  }\n\n  componentDidMount () {\n    this.setState({\n      key: getCurrentTab()\n    })\n  }\n\n  handleToggleRecipeSearchClass (event) {\n    const recipeSearchClasses = cloneDeep(get(this.state, 'recipeSearchClasses', []))\n    const abbreviation = get(event, 'target.value', event)\n\n    if (includes(recipeSearchClasses, abbreviation)) {\n      recipeSearchClasses.splice(recipeSearchClasses.indexOf(abbreviation), 1)\n    } else {\n      recipeSearchClasses.push(abbreviation)\n    }\n\n    this.setState({\n      recipeSearchClasses: sortBy(recipeSearchClasses, s => s.toLowerCase())\n    })\n  }\n\n  handleToggleRecipeSearchExact (event) {\n    const recipeSearchExact = get(event, 'target.checked', false)\n    this.setState({\n      recipeSearchExact\n    })\n  }\n\n  handleToggleRecipeIncludeMaster (event) {\n    const checked = get(event, 'target.checked')\n\n    this.setState({\n      recipeSearchIncludeMaster: checked\n    })\n  }\n\n  handleFieldUpdate (event) {\n    const { target: { name, value } } = event\n\n    let recipeSearchIsInvalid = false\n    if (!value) {\n      recipeSearchIsInvalid = true\n    }\n\n    this.setState({\n      [name]: value,\n      recipeSearchIsInvalid\n    })\n  }\n\n  handleClearList () {\n    const { clearMyRecipeList } = this.props\n    clearMyRecipeList()\n    this.handleTabChange('search')\n  }\n\n  search (page = 1) {\n    const { searchRecipes } = this.props\n    const { recipeSearchClasses, recipeSearchExact, recipeSearchIncludeMaster, recipeSearchString } = this.state\n    const params = {\n      page,\n      abbreviation: recipeSearchClasses,\n      exact: recipeSearchExact,\n      includeMasterRecipes: recipeSearchIncludeMaster\n    }\n\n    searchRecipes(recipeSearchString, params)\n  }\n\n  handleUpdateQuantity (item, value) {\n    const newValue = Math.max(1, toNumber(value))\n\n    const { myRecipeList, saveMyRecipeList } = this.props\n    const myListItemIndex = indexOf(myRecipeList, item)\n    myRecipeList[myListItemIndex].quantity = newValue\n    saveMyRecipeList(myRecipeList)\n  }\n\n  handleSearch (event) {\n    event.preventDefault()\n    const page = get(event, 'target.value', 1)\n    const { recipeSearchString } = this.state\n    if (!recipeSearchString) {\n      document.getElementsByName('recipeSearchString')[0].focus()\n      this.setState({\n        recipeSearchIsInvalid: true\n      })\n      return\n    }\n\n    this.search(page)\n  }\n\n  handleClear () {\n    document.getElementsByName('recipeSearchString')[0].focus()\n    this.setState({\n      recipeSearchIsInvalid: false,\n      recipeSearchString: ''\n    })\n  }\n\n  handlePageChange (event) {\n    this.handleSearch(event)\n  }\n\n  handleTabChange (key) {\n    storeCurrentTab(key)\n    this.setState({ key })\n  }\n\n  toggleListItem (item) {\n    item = omit(item, 'quantity')\n    const { myRecipeList, saveMyRecipeList } = this.props\n    let myClonedList = cloneDeep(myRecipeList)\n    const foundItem = find(myRecipeList, i => get(i, 'ID') === get(item, 'ID'))\n\n    if (!!foundItem) {\n      myClonedList = reject(myRecipeList, item)\n    } else {\n      item.quantity = 1\n      myClonedList.push(item)\n    }\n\n    saveMyRecipeList(myClonedList)\n  }\n\n  render () {\n    const {\n      recipeSearchExact,\n      recipeSearchClasses,\n      recipeSearchIncludeMaster,\n      recipeSearchIsInvalid,\n      recipeSearchString\n    } = this.state\n\n    const {\n      characterData,\n      clearRecipeSearch,\n      craftingClassData,\n      myRecipeList,\n      myShoppingList,\n      recipeSearchResults\n    } = this.props\n\n    return (\n      <div className=\"recipe-list pt3\">\n        <Tabs\n          activeKey={this.state.key}\n          onSelect={this.handleTabChange.bind(this)}\n        >\n          <Tab eventKey=\"calculator\" title=\"Calculations\">\n            <div className=\"recipe-tab\">\n              <CraftingGatheringCalculator characterData={characterData} craftingClassData={craftingClassData} />\n            </div>\n          </Tab>\n          <Tab eventKey=\"search\" title=\"Recipe Search\">\n            <div className=\"recipe-tab\">\n              <RecipeSearch\n                clearRecipeSearch={clearRecipeSearch.bind(this)}\n                handleChange={this.handleFieldUpdate.bind(this)}\n                handlePageChange={this.handlePageChange.bind(this)}\n                handleReset={this.handleClear.bind(this)}\n                handleSubmit={this.handleSearch.bind(this)}\n                handleTabChange={this.handleTabChange.bind(this)}\n                handleToggleRecipeIncludeMaster={this.handleToggleRecipeIncludeMaster.bind(this)}\n                handleToggleListItem={this.toggleListItem.bind(this)}\n                handleToggleRecipeSearchClass={this.handleToggleRecipeSearchClass.bind(this)}\n                handleToggleRecipeSearchExact={this.handleToggleRecipeSearchExact.bind(this)}\n                myList={myRecipeList}\n                recipeSearchIncludeMaster={recipeSearchIncludeMaster}\n                recipeSearchClasses={recipeSearchClasses}\n                recipeSearchExact={recipeSearchExact}\n                recipeSearchResults={recipeSearchResults}\n                recipeSearchIsInvalid={recipeSearchIsInvalid}\n                recipeSearchString={recipeSearchString}\n              />\n            </div>\n          </Tab>\n          <Tab eventKey=\"recipe-list\" title={`My Recipe List (${myRecipeList.length})`}>\n            <div className=\"recipe-tab\">\n              <MyList\n                list={myRecipeList}\n                handleClearList={this.handleClearList.bind(this)}\n                handleTabChange={this.handleTabChange.bind(this)}\n                handleToggleListItem={this.toggleListItem.bind(this)}\n                handleUpdateQuantity={this.handleUpdateQuantity.bind(this)}\n              />\n            </div>\n          </Tab>\n          <Tab eventKey=\"shopping-list\" title={(\n            <span>\n              Shopping List <Badge variant=\"primary\">Beta</Badge>\n            </span>\n          )}>\n            <div className=\"recipe-tab\">\n              <ShoppingList\n                shoppingList={myShoppingList}\n              />\n            </div>\n          </Tab>\n        </Tabs>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  myRecipeList: get(state, 'recipeList.myRecipeList', []),\n  myShoppingList: get(state, 'recipeList.myShoppingList', {}),\n  recipeSearchResults: get(state, 'recipeList.recipeSearchResults', {})\n})\n\nconst mapDispatchToProps = dispatch => ({\n  saveMyRecipeList: recipeList => dispatch(recipeActions.saveMyRecipeList(recipeList)),\n  clearMyRecipeList: () => dispatch(recipeActions.clearMyRecipeList()),\n  createMyShoppingList: recipeList => dispatch(recipeActions.createMyShoppingList(recipeList)),\n  clearMyShoppingList: () => dispatch(recipeActions.clearMyShoppingList()),\n  searchRecipes: (string, params) => dispatch(recipeActions.searchRecipes(string, params)),\n  clearRecipeSearch: () => dispatch(recipeActions.clearRecipeSearch())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecipeHelper)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Spinner } from 'react-bootstrap'\n\nexport default class LoadingOverlay extends React.Component {\n  render () {\n    const { show } = this.props\n\n    if (!show) {\n      return null\n    }\n\n    return (\n      <div className=\"loading-overlay\">\n        <div>\n          <Spinner animation=\"border\" variant=\"light\" />\n        </div>\n      </div>\n    )\n  }\n}\n\nLoadingOverlay.propTypes = {\n  show: PropTypes.bool.isRequired\n}\n\nLoadingOverlay.defaultProps = {\n  show: false\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Container, Toast } from 'react-bootstrap'\nimport { get, isEqual, set } from 'lodash'\nimport * as actions from '../store/local/actions'\nimport Navigation from './navigation/Navigation'\nimport RecipeHelper from './RecipeHelper'\nimport LoadingOverlay from './common/LoadingOverlay'\n\nconst externalLink = (url, text) => (\n  <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n)\n\nclass XivCraftingGatheringHelper extends React.Component {\n  state = {\n    toast: {\n      show: false\n    }\n  }\n\n  componentDidMount () {\n    this.props.getLocalClassData()\n    this.props.getLocalCharacterData()\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const { toast } = this.props\n\n    if (!isEqual(toast, prevProps.toast) && get(toast, 'show')) {\n      this.setState({\n        toast\n      })\n    }\n  }\n\n  handleToastClose () {\n    const { toast } = this.state\n    toast.show = false\n    this.setState({\n      toast\n    })\n  }\n\n  render () {\n    const { characterData, craftingClassData, loading, toast } = this.props\n\n    return (\n      <React.Fragment>\n        <Navigation\n          characterData={characterData}\n          craftingClassData={craftingClassData}\n        />\n        <Container fluid>\n          <RecipeHelper characterData={characterData} craftingClassData={craftingClassData} />\n          <hr />\n          <div className=\"tc text-muted pb3\">\n            Created by {externalLink('https://na.finalfantasyxiv.com/lodestone/character/22858010/',\n            'Xythyt')} with the help of {externalLink('https://www.xivapi.com', 'XIVAPI')}.\n            <br />\n            Version {process.env.REACT_APP_VERSION}\n          </div>\n          <Toast\n            show={toast.show}\n            onClose={this.handleToastClose.bind(this)}\n            style={{\n              position: 'absolute',\n              top: '5em',\n              right: '1em',\n              zIndex: 99,\n              minWidth: '250px'\n            }}\n          >\n            <Toast.Header>\n              <strong className=\"mr-auto\">{toast.title}</strong>\n              <small>{toast.time}</small>\n            </Toast.Header>\n            <Toast.Body>\n              {toast.message}\n            </Toast.Body>\n          </Toast>\n        </Container>\n        <LoadingOverlay show={loading} />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  const error = get(state, 'local.error') || get(state, 'recipeList.error')\n\n  const toast = {\n    show: false\n  }\n\n  if (error) {\n    set(toast, 'message', get(error, 'message', error))\n    set(toast, 'show', true)\n    set(toast, 'title', 'Error')\n    set(toast, 'time', new Date().toISOString())\n  }\n\n  return {\n    craftingClassData: get(state, 'local.classData'),\n    characterData: get(state, 'local.characterData'),\n    loading: (\n      Object.keys(get(state, 'local.loading', {})).length > 0 ||\n      Object.keys(get(state, 'recipeList.loading', {})).length > 0\n    ),\n    toast\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getLocalCharacterData: () => dispatch(actions.getLocalCharacterData()),\n  getLocalClassData: () => dispatch(actions.getLocalClassData())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(XivCraftingGatheringHelper)\n","import { get, set, unset } from 'lodash'\nimport * as LocalStorage from '../../service/localStorage'\nimport * as T from './types'\n\nconst INITIAL_STATE = {\n  classData: LocalStorage.getDefaultCraftingClasses(),\n  loading: {}\n}\n\nexport default (state = INITIAL_STATE, action) => {\n  const { loading } = state\n  switch (action.type) {\n    case T.LODESTONE_CHARACTER_DATA_REQUEST:\n      set(loading, 'characterData', true)\n      return {\n        ...state,\n        loading\n      }\n    case T.LOCAL_CLASS_DATA_STORE:\n    case T.LOCAL_CLASS_DATA_RETRIEVAL:\n      return {\n        ...state,\n        classData: get(action, 'localData')\n      }\n    case T.LOCAL_CHARACTER_DATA_CLEAR:\n      return {\n        ...state,\n        characterData: undefined\n      }\n    case T.LOCAL_CHARACTER_DATA_STORE:\n    case T.LOCAL_CHARACTER_DATA_RETRIEVAL:\n      return {\n        ...state,\n        characterData: get(action, 'localData')\n      }\n    case T.LOCAL_CLASS_DATA_CLEAR:\n      return {\n        ...state,\n        classData: LocalStorage.getDefaultCraftingClasses()\n      }\n    case T.LODESTONE_CHARACTER_DATA_SUCCESS:\n      unset(loading, 'characterData')\n      return {\n        ...state,\n        characterData: get(action, 'payload'),\n        loading\n      }\n    case T.API_REQUEST_FAILURE:\n      unset(loading, 'characterData')\n      return {\n        ...state,\n        error: action.error,\n        loading\n      }\n    default:\n      return state\n  }\n}\n","import { set, unset } from 'lodash'\nimport * as LocalStorageService from '../../service/localStorage'\nimport * as T from './types'\n\nconst INITIAL_STATE = {\n  loading: {},\n  myRecipeList: LocalStorageService.getMyRecipeList(),\n  myShoppingList: LocalStorageService.getMyShoppingList(),\n  recipeSearchResults: {}\n}\n\nexport default (state = INITIAL_STATE, action) => {\n  const { loading } = state\n  unset(state, 'error')\n  switch (action.type) {\n    case T.SHOPPING_LIST_CREATE:\n      unset(loading, 'shoppingList')\n      return {\n        ...state,\n        myShoppingList: action.shoppingList,\n        loading\n      }\n    case T.SHOPPING_LIST_CLEAR:\n      return {\n        ...state,\n        myShoppingList: {}\n      }\n    case T.RECIPE_LIST_SAVE:\n      set(loading, 'shoppingList', true)\n      return {\n        ...state,\n        myRecipeList: action.recipeList,\n        loading\n      }\n    case T.RECIPE_LIST_CLEAR:\n      return {\n        ...state,\n        myRecipeList: []\n      }\n    case T.RECIPE_SEARCH_REQUEST:\n      set(loading, 'recipeSearch', true)\n      return {\n        ...state,\n        loading,\n        params: action.params\n      }\n    case T.RECIPE_SEARCH_SUCCESS:\n      unset(loading, 'recipeSearch')\n      return {\n        ...state,\n        loading,\n        recipeSearchResults: action.payload\n      }\n    case T.RECIPE_SEARCH_FAILURE:\n      unset(loading, 'recipeSearch')\n      return {\n        ...state,\n        loading,\n        error: action.error\n      }\n    case T.RECIPE_SEARCH_CLEAR:\n      unset(state, 'params')\n      return {\n        ...state,\n        recipeSearchResults: {}\n      }\n    case T.SHOPPING_LIST_ERROR:\n      unset(loading, 'shoppingList')\n      return {\n        ...state,\n        loading,\n        error: action.error\n      }\n    default:\n      return state\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducer from './local/reducer'\nimport recipeListReducer from './recipeList/reducer'\n\nconst rootReducer = combineReducers({\n  local: reducer,\n  recipeList: recipeListReducer\n})\n\nexport default createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n)\n","import React from 'react'\nimport XivCraftingGatheringHelper from './XivCraftingGatheringHelper'\nimport Provider from 'react-redux/es/components/Provider'\nimport store from '../store'\n\nclass App extends React.Component {\n  render () {\n    return (\n      <Provider store={store}>\n        <XivCraftingGatheringHelper />\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport './styles/index.scss'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}