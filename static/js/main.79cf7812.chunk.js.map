{"version":3,"sources":["service/localStorage.js","service/xivApi.js","store/local/types.js","store/local/actions.js","components/navigation/LodestoneCharacterModal.jsx","components/navigation/LodestoneCharacterMenu.jsx","components/navigation/Navigation.jsx","components/recipes/RecipeSearchForm.jsx","components/common/Pagination.jsx","components/recipes/RecipeSearchResult.jsx","components/recipes/RecipeSearch.jsx","components/recipes/MyList.jsx","store/recipeList/types.js","service/recipe.js","store/recipeList/actions.js","components/common/SortableTableHeaderCell.jsx","components/common/XivIcon.jsx","components/recipes/ShoppingList.jsx","components/calculator/FilterDropdown.jsx","service/calculations.js","components/calculator/CalculationsTableHeader.jsx","components/calculator/CalculationsTableBody.jsx","components/calculator/FirstTimeImport.jsx","components/calculator/CraftingGatheringCalculator.jsx","components/RecipeHelper.jsx","components/common/LoadingOverlay.jsx","components/XivCraftingGatheringHelper.jsx","store/local/reducer.js","store/recipeList/reducer.js","store/index.js","components/App.jsx","index.js"],"names":["KEYS","CHARACTER_DATA","CRAFTING_CLASS_DATA","MY_RECIPE_LIST","MY_SHOPPING_LIST","CURRENT_TAB","OWNED_ITEMS","get","key","defaultValue","data","localStorage","getItem","JSON","parse","store","setItem","stringify","clear","removeItem","retrieveAndUpdateCraftingClassData","defaultCraftingClasses","getDefaultCraftingClasses","storedData","craftingClasses","result","forEach","defaultCraftingClass","storedCraftingClass","_find","c","abbreviation","classDiffs","_filter","diff","d","type","length","applyChanges","levelingGuideDiffs","push","retrieveAndUpdateCharacterData","updateCraftingClassDataWithCharacterData","classJobCategories","craftingClassData","characterData","_values","_get","_includes","_map","lodestoneClassData","_set","totalExperience","CRAFTING_CLASSES","currentLevel","currentExperience","experiencePerItem","BASE_URL","getIconUrl","iconRelativePath","concat","findCharacterByServerAndName","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","server","name","page","_args","arguments","wrap","_context","prev","next","undefined","axios","sent","abrupt","stop","_x","_x2","apply","this","getCharacterById","_ref2","_callee2","id","_context2","set","_x3","recipeSearch","_ref3","_callee3","searchString","options","columns","_options$exact","exact","_options$page","_options$includeMaste","includeMasterRecipes","request","_args3","_context3","toLower","replace","indexes","body","query","bool","must","wildcard","NameCombined_en","match","ExpRewarded","ItemRequiredTargetID","size","from","sort","RecipeLevelTable.ClassJobLevel","limit","SecretRecipeBookTargetID","isArray","minimum_should_match","should","map","ClassJob.Abbreviation_en","post","getRecipesById","_ref4","_callee4","recipeIds","i","_context4","params","ids","join","_x4","getItemsById","_ref5","_callee5","itemIds","_context5","_x5","LOCAL_CLASS_DATA_RETRIEVAL","LOCAL_CLASS_DATA_STORE","LOCAL_CLASS_DATA_CLEAR","LOCAL_CHARACTER_DATA_RETRIEVAL","LOCAL_CHARACTER_DATA_STORE","LOCAL_CHARACTER_DATA_CLEAR","LODESTONE_CHARACTER_DATA_REQUEST","LODESTONE_CHARACTER_DATA_SUCCESS","API_REQUEST_FAILURE","lodestoneCharacterDataRequest","characterId","T","apiRequestSuccess","payload","getLocalClassData","dispatch","localData","localClassDataRetrieve","LocalStorage","saveLocalClassData","classData","clearLocalClassData","saveLocalCharacterData","getLocalCharacterData","localCharacterDataRetrieve","clearLocalCharacterData","getLodestoneCharacterData","XivApi","t0","error","LodestoneCharacterModal","state","event","_event$target","target","value","setState","defineProperty","preventDefault","loading","performSearch","lodestoneResults","onHide","props","handleClose","_this2","show","_this$state2","results","prevPage","nextPage","react_default","createElement","Modal","bind","Form","onSubmit","handleSearch","onReset","Header","closeButton","Title","Body","Group","Label","Control","as","onChange","handleSetField","XIV_SERVERS","Button","disabled","className","Spinner","animation","variant","Fragment","char","ID","Name","Avatar","Check","htmlFor","src","alt","onClick","Footer","handleSubmitCharacterSelection","React","Component","defaultProps","getDropdownTitle","_characterData$Charac","Character","LodestoneCharacterMenu","showModal","_this$props","searchLodestoneCharacterData","importText","NavDropdown","alignRight","title","Item","Divider","handleModalToggle","navigation_LodestoneCharacterModal","connect","Navigation","Navbar","bg","sticky","NavbarBrand","Nav","navigation_LodestoneCharacterMenu","RecipeSearchForm","craftingClassSelections","ButtonGroup","updateCraftingClassSelections","prevProps","prevState","snapshot","recipeSearchClasses","isEqual","handleToggleRecipeSearchClass","buttons","filter","cc","OverlayTrigger","overlay","Tooltip","includes","icon","_this$props2","handleChange","handleReset","handleSubmit","handleToggleRecipeIncludeMaster","recipeSearchIncludeMaster","handleToggleRecipeSearchExact","recipeSearchExact","recipeSearchIsInvalid","recipeSearchString","isInvalid","FormControl","Feedback","checked","Pagination","currentPage","handlePageChange","totalPages","minPage","Math","max","min","maxPage","activePage","option","paginate","RecipeSearchResult","_this","clearRecipeSearch","handleTabChange","handleToggleListItem","myList","pagination","recipeList","pageTotal","pageCurrent","Table","hover","striped","colSpan","Pagination_Pagination","r","iconUrl","craftingClassName","level","isOnList","find","item","index_es","faMinusSquare","faPlusSquare","ready","RecipeSearch","recipeSearchResults","RecipeSearchForm_RecipeSearchForm","RecipeSearchResult_RecipeSearchResult","MyList","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","mapping","createItemQuantityMapping","list","l","quantity","handleUpdateQuantity","toNumber","handleClearList","Icon","ClassJob","NameEnglish","RecipeLevelTable","ClassJobLevel","handleItemQuantityUpdate","onBlur","handleQuantityFieldBlur","RECIPE_SEARCH_REQUEST","RECIPE_SEARCH_SUCCESS","RECIPE_SEARCH_FAILURE","RECIPE_SEARCH_CLEAR","RECIPE_LIST_CLEAR","RECIPE_LIST_SAVE","SHOPPING_LIST_CREATE","SHOPPING_LIST_CLEAR","getIngredientListForRecipes","ingredientsGatherable","ingredientsCrafted","ingredientsOther","ingredientsPurchased","itemData","getAndSortRecipeResults","XivApiService","foundItem","ig","io","val","addGatheringItemData","orderBy","uniqBy","ic","gatheringItemId","filteredGatheringPoints","GATHERING_ITEM_POINTS","point","startsWith","pointData","getPointData","itemId","filteredFishingSpots","FISHING_SPOTS","spot","path","pd","namePath","areaPath","regionPath","levelPath","typePath","area","region","gatheringClass","Mining","Quarrying","Logging","Harvesting","hasFishingSpotMatch","matched","fishingId","recipeResults","nextRecipeResults","recipe","t1","t2","rr","recipeListEntry","rle","_loop","itemCategory","amount","gatheringMapNode","ITEM_TO_GATHERING_ITEM_MAPPING","ingredientRecipe","fishingSpotMatch","existingIngredientGatherable","existingAmount","existingIngredientCrafted","ir","existingIngredientOther","ip","_x6","recipeSearchRequest","apiRequestFailure","saveMyRecipeList","myRecipeList","recipeListSave","createMyShoppingList","clearMyRecipeList","clearMyShoppingList","RecipeListService","myShoppingList","shoppingList","SortableTableHeaderCell","text","sortFunc","applySorting","style","cursor","faSort","XivIcon","badge","image","tooltip","htmlImage","url","altText","content","htmlBadge","Badge","cx","ShoppingList","ingredientsGatherableSort","func","direction","itemsOwned","updateGatherableIngredients","gatherableStateVars","objectSpread","ingredientsCrystals","newIngredientsGatherableSort","obtainedItems","_window","window","scrollX","scrollY","clone","pull","x","y","scrollTo","_this$props$shoppingL","_this$state","XivIcon_XivIcon","common_SortableTableHeaderCell","handleApplyIngredientsGatherableSort","handleOwnershipSort","locationSelectId","gatheringType","owned","handleLocationUpdate","handleToggleItemOwned","craftClass","craftLevel","FilterDropdown","label","applyFilterFunc","DropdownButton","Dropdown","craftingClass","calculateRemainingExp","currentExp","totalExp","calculateRemainingItems","remainingExp","expPerItem","ceil","calculateProgressPercentage","floor","tableHeaders","CalculationsTableHeader","applySortFunc","h","CalculationsTableBody","focusedRow","levelingGuide","LEVELING_GUIDE_LINKS","g","matchedPage","pages","p","maxLevel","minLevel","updateField","focused","remainingExperience","remainingItems","progressPercentage","popover","Popover","href","getLevelingGuidePageUrl","rel","onFocus","handleRowFocus","trigger","placement","rootClose","faIcon","validateNumericFieldChange","ProgressBar","now","FirstTimeImport","timer","startTimer","endTimer","timeLeft","setInterval","executeTimer","clearInterval","timeLeftMessage","CraftingGatheringCalculator","sortDirection","filterFunc","innerText","targetCraftingClass","otherCraftingClasses","EXP_PER_LEVEL","sortedAndFilteredCraftingClassData","getSortedCraftingClassData","getFilteredCraftingClassData","FirstTimeImport_FirstTimeImport","FilterDropdown_FilterDropdown","applyFilter","CalculationsTableHeader_CalculationsTableHeader","applySort","calculator_CalculationsTableBody","RecipeHelper","lastSearch","cloneDeep","splice","indexOf","sortBy","s","toLowerCase","_this$setState","searchRecipes","newValue","document","getElementsByName","focus","search","currentTab","omit","myClonedList","reject","_this$props3","Tabs","activeKey","onSelect","Tab","eventKey","calculator_CraftingGatheringCalculator","RecipeSearch_RecipeSearch","handleFieldUpdate","handleClear","toggleListItem","MyList_MyList","ShoppingList_ShoppingList","recipeActions","string","LoadingOverlay","externalLink","XivCraftingGatheringHelper","Navigation_Navigation","Container","fluid","components_RecipeHelper","process","LoadingOverlay_LoadingOverlay","keys","actions","INITIAL_STATE","rootReducer","combineReducers","local","action","unset","createStore","applyMiddleware","thunk","App","Provider","components_XivCraftingGatheringHelper","ReactDOM","render","components_App","getElementById"],"mappings":"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","file":"static/js/main.79cf7812.chunk.js","sourcesContent":["import CRAFTING_CLASSES from '../data/crafting-classes'\nimport { applyChanges, diff } from 'diff-json'\nimport {\n  filter as _filter,\n  find as _find,\n  get as _get,\n  includes as _includes,\n  map as _map,\n  set as _set,\n  values as _values\n} from 'lodash'\n\nconst KEYS = {\n  CHARACTER_DATA: 'character',\n  CRAFTING_CLASS_DATA: 'craftingClasses',\n  MY_RECIPE_LIST: 'myRecipeList',\n  MY_SHOPPING_LIST: 'myShoppingList',\n  CURRENT_TAB: 'currentTab',\n  OWNED_ITEMS: 'ownedItems'\n}\n\nfunction get (key, defaultValue) {\n  const data = localStorage.getItem(key)\n  if (!!data) {\n    return JSON.parse(data)\n  }\n  return defaultValue\n}\n\nfunction store (key, data) {\n  localStorage.setItem(key, JSON.stringify(data))\n}\n\nfunction clear (key) {\n  if (!!localStorage.getItem(key)) {\n    localStorage.removeItem(key)\n  }\n}\n\nexport function getObtainedItems () {\n  return get(KEYS.OWNED_ITEMS, [])\n}\n\nexport function storeObtainedItems (obtainedItems) {\n  store(KEYS.OWNED_ITEMS, obtainedItems)\n}\n\nexport function getCurrentTab () {\n  return get(KEYS.CURRENT_TAB)\n}\n\nexport function storeCurrentTab (currentTab) {\n  store(KEYS.CURRENT_TAB, currentTab)\n}\n\nexport function getMyRecipeList () {\n  return get(KEYS.MY_RECIPE_LIST, [])\n}\n\nexport function getMyShoppingList () {\n  return get(KEYS.MY_SHOPPING_LIST, {})\n}\n\nexport function storeCharacterData (characterData) {\n  store(KEYS.CHARACTER_DATA, characterData)\n}\n\nexport function storeCraftingClassData (craftingClasses) {\n  store(KEYS.CRAFTING_CLASS_DATA, craftingClasses)\n}\n\nexport function storeMyRecipeList (myRecipeList) {\n  store(KEYS.MY_RECIPE_LIST, myRecipeList)\n}\n\nexport function storeMyShoppingList (myShoppingList) {\n  store(KEYS.MY_SHOPPING_LIST, myShoppingList)\n}\n\nexport function clearCharacterData () {\n  clear(KEYS.CHARACTER_DATA)\n}\n\nexport function clearCraftingClassData () {\n  clear(KEYS.CRAFTING_CLASS_DATA)\n}\n\nexport function clearMyRecipeList () {\n  clear(KEYS.MY_RECIPE_LIST)\n}\n\nexport function clearMyShoppingList () {\n  clear(KEYS.MY_SHOPPING_LIST)\n}\n\nexport function clearObtainedItems () {\n  clear(KEYS.OWNED_ITEMS)\n}\n\nexport function retrieveAndUpdateCraftingClassData () {\n  // get the default crafting class data\n  const defaultCraftingClasses = getDefaultCraftingClasses()\n\n  // retrieve the stored data from local storage\n  const storedData = localStorage.getItem(KEYS.CRAFTING_CLASS_DATA)\n\n  // if there is no stored data, return the default data\n  if (!storedData) {\n    return defaultCraftingClasses\n  }\n\n  // if there is stored data, convert it to JSON\n  const craftingClasses = JSON.parse(storedData)\n\n  // create a variable for the result\n  const result = []\n\n  // cycle through all \"default\" classes\n  defaultCraftingClasses.forEach(defaultCraftingClass => {\n    // retrieve the matching stored class\n    const storedCraftingClass = _find(craftingClasses, c => c.abbreviation === defaultCraftingClass.abbreviation)\n\n    // if there is no matching stored class data, add the default for this class to the result\n    if (!storedCraftingClass) {\n      result.push(defaultCraftingClass)\n      return\n    }\n\n    // get any added data to the default data set and apply it to the stored data\n    const classDiffs = _filter(diff(storedCraftingClass, defaultCraftingClass), d => d.type === 'add')\n    if (classDiffs.length > 0) {\n      applyChanges(storedCraftingClass, classDiffs)\n    }\n\n    // get any leveling guide data and remove it from stored data\n    const levelingGuideDiffs = _filter(diff(storedCraftingClass, defaultCraftingClass), d => d.key === 'levelingGuide')\n    if (levelingGuideDiffs.length > 0) {\n      applyChanges(storedCraftingClass, levelingGuideDiffs)\n    }\n\n    // add this record to the result to return\n    result.push(storedCraftingClass)\n  })\n\n  // send back the updated stored data\n  return result\n}\n\nexport function retrieveAndUpdateCharacterData () {\n  // get the stored character data\n  const storedData = localStorage.getItem(KEYS.CHARACTER_DATA)\n\n  // if there is no character data, return undefined\n  if (!storedData) {\n    return undefined\n  }\n\n  // if there is, update it\n  // TBD\n\n  // return the character data\n  return JSON.parse(storedData)\n}\n\nexport function updateCraftingClassDataWithCharacterData () {\n  const classJobCategories = ['Disciple of the Land', 'Disciple of the Hand']\n  const craftingClassData = retrieveAndUpdateCraftingClassData()\n  const characterData = _filter(_values(_get(retrieveAndUpdateCharacterData(), 'Character.ClassJobs')),\n    c => _includes(classJobCategories, _get(c, 'Class.ClassJobCategory.Name')))\n\n  return _map(craftingClassData, c => {\n    const lodestoneClassData = _find(characterData, d => _get(d, 'Class.Abbreviation') === _get(c, 'abbreviation'))\n    _set(c, 'currentLevel', _get(lodestoneClassData, 'Level', 1))\n    _set(c, 'currentExperience', _get(lodestoneClassData, 'ExpLevel', 0))\n    _set(c, 'totalExperience', _get(lodestoneClassData, 'ExpLevelMax', c.totalExperience))\n    return c\n  })\n}\n\nexport function getDefaultCraftingClasses () {\n  return _map(CRAFTING_CLASSES, c => {\n    c.currentLevel = 1\n    c.currentExperience = 0\n    c.experiencePerItem = 1\n    c.totalExperience = 300\n    return c\n  })\n}\n","import axios from 'axios'\nimport { map, get, isArray, set, toLower } from 'lodash'\n// import UNLOADED_CHARACTER from '../data/mock/unloadedCharacter'\n\n// const PRIVATE_KEY = '257f7d4532a74f15a429b5262d51d0f3938964ea78124b1ca8da9459accc15b7'\nconst BASE_URL = 'https://xivapi.com'\n\n// this is for testing\n// let attempt = 0\n\n/**\n * Retrieves the URL of an icon provided in a response from XIVAPI.\n * @param   {string}  iconRelativePath  The relative path of the icon.\n * @returns {string}                    The full URL path of the icon.\n */\nexport const getIconUrl = iconRelativePath => `${BASE_URL}${iconRelativePath}`\n\n/**\n * Finds a character by server and name.\n *\n * @param   {string}  server  The name of the server.\n * @param   {string}  name    The name of the character.\n * @param   {number}  page    The page of results to view.\n * @returns {object}          An object containing the search results.\n */\nexport const findCharacterByServerAndName = async (server, name, page = 1) => {\n  const result = await axios.get(`${BASE_URL}/character/search?name=${name}&server=${server}&page=${page}`)\n  return get(result, 'data', [])\n}\n\n/**\n * Retrieves character data by the character's ID.\n *\n * @param   {number}  id  The ID of the character to retrieve.\n * @returns {object}      An object containing the character's data.\n */\nexport const getCharacterById = async id => {\n  // use this for normal functionality\n  const result = await axios.get(`${BASE_URL}/character/${id}?extended=1`)\n\n  // use this when testing the \"first import\" message\n  // console.log('this is attempt', attempt.toString())\n  // let result\n  // if (!attempt) {\n  //   result = { data: UNLOADED_CHARACTER }\n  // } else {\n  //   result = await axios.get(`${BASE_URL}/character/${id}?extended=1`)\n  // }\n  // attempt++\n\n  // use this when testing the behavior when character does not load from Lodestone\n  // const result = { data: UNLOADED_CHARACTER }\n\n  set(result, 'data.characterId', id)\n  return get(result, 'data', {})\n}\n\n/**\n * Searches for recipes via the XIPAPI.\n *\n * @param   {string}          searchString                    The string for which to search.\n * @param   {object}          [options]                       Options to apply to this search.\n * @param   {boolean}         [options.exact]                 Whether we are searching for the exact string (true) or\n *                                                              should substitute spaces for wildcards (false).\n * @param   {number}          [options.page]                  The page on which to begin the search.\n * @param   {string|[string]} [options.abbreviation]          Any crafting class abbreviations that should be queried.\n * @param   {boolean}         [options.includeMasterRecipes]  Indicates whether master recipes should be included.\n * @returns {object}                                          An object containing search results.\n */\nexport const recipeSearch = async (searchString = '', options = {}) => {\n  const indexes = 'recipe'\n  const size = 20\n  const columns = [\n    'ID',\n    'ClassJob.Abbreviation_en',\n    'ClassJob.Icon',\n    'ClassJob.NameEnglish',\n    'RecipeLevelTable.ClassJobLevel',\n    'Name',\n    'Icon'\n  ]\n\n  const { exact = false, page = 1, includeMasterRecipes = false } = options\n\n  searchString = toLower(searchString)\n\n  if (!exact) {\n    searchString = searchString.replace(' ', '*')\n  }\n\n  const request = {\n    indexes,\n    body: {\n      query: {\n        bool: {\n          must: [\n            {\n              wildcard: {\n                'NameCombined_en': `*${searchString}*`\n              }\n            },\n            {\n              match: {\n                'ExpRewarded': 1\n              }\n            },\n            {\n              match: {\n                'ItemRequiredTargetID': 0\n              }\n            }\n            // {\n            //   match: {\n            //     'SecretRecipeBookTargetID': 0\n            //   }\n            // },\n            // {\n            //   match: {\n            //     'StatusRequiredTargetID': 0\n            //   }\n            // }\n          ]\n        }\n      },\n      size,\n      from: size * (page - 1),\n      sort: [\n        {\n          'RecipeLevelTable.ClassJobLevel': 'asc'\n        }\n      ]\n    },\n    columns,\n    limit: size,\n    page\n  }\n\n  if (!includeMasterRecipes) {\n    request.body.query.bool.must.push({\n      match: {\n        'SecretRecipeBookTargetID': 0\n      }\n    })\n  }\n\n  if (!!options.abbreviation && !!options.abbreviation.length && options.abbreviation.length < 8) {\n    let { abbreviation } = options\n    const minimum_should_match = 1\n\n    abbreviation = isArray(abbreviation) ? abbreviation : [abbreviation]\n\n    request.body.query.bool.minimum_should_match = minimum_should_match\n    request.body.query.bool.should = map(abbreviation, a => ({\n      match: {\n        'ClassJob.Abbreviation_en': a\n      }\n    }))\n  }\n\n  const result = await axios.post(`${BASE_URL}/search`,\n    request\n  )\n  return get(result, 'data', {})\n}\n\n/**\n * Retrieves a list of recipes by their IDs.\n *\n * @param   {[number]}  recipeIds The IDs of the recipes that should be retrieved.\n * @returns {object}              An object containing the recipe data retrieved.\n */\nexport const getRecipesById = async recipeIds => {\n  const columns = [\n    'ID',\n    'Name'\n  ]\n\n  for (let i = 0; i < 10; i++) {\n    columns.push(`AmountIngredient${i}`)\n    columns.push(`ItemIngredient${i}.ID`)\n    columns.push(`ItemIngredient${i}.Icon`)\n    columns.push(`ItemIngredient${i}.Name`)\n    columns.push(`ItemIngredient${i}.ItemSearchCategoryTargetID`)\n    columns.push(`ItemIngredientRecipe${i}`)\n  }\n\n  const result = await axios.get(`${BASE_URL}/recipe`, {\n    params: {\n      ids: recipeIds.join(','),\n      columns: columns.join(',')\n    }\n  })\n  return get(result, 'data', {})\n}\n\n/**\n * Retrieves a list of items by their IDs.\n *\n * @param   {[number]}  itemIds The IDs of the items that should be retrieved.\n * @returns {object}            An object containing the item data retrieved.\n */\nexport const getItemsById = async itemIds => {\n  const columns = [\n    'ID',\n    'Name',\n    'Icon',\n    'GameContentLinks'\n  ]\n\n  const result = await axios.get(`${BASE_URL}/item`, {\n    params: {\n      ids: itemIds.join(','),\n      columns: columns.join(',')\n    }\n  })\n\n  return get(result, 'data', {})\n}\n","const LODESTONE = 'LODESTONE'\nconst LOCAL = 'LOCAL'\n\nconst REQUEST = 'REQUEST'\nconst SUCCESS = 'SUCCESS'\nconst FAILURE = 'FAILURE'\n\nexport const LOCAL_CLASS_DATA_RETRIEVAL = `${LOCAL}_CLASS_DATA_RETRIEVAL`\nexport const LOCAL_CLASS_DATA_STORE = `${LOCAL}_CLASS_DATA_STORE`\nexport const LOCAL_CLASS_DATA_CLEAR = `${LOCAL}_CLASS_DATA_CLEAR`\n\nexport const LOCAL_CHARACTER_DATA_RETRIEVAL = `${LOCAL}_CHARACTER_DATA_RETRIEVAL`\nexport const LOCAL_CHARACTER_DATA_STORE = `${LOCAL}_CHARACTER_DATA_STORE`\nexport const LOCAL_CHARACTER_DATA_CLEAR = `${LOCAL}_CHARACTER_DATA_CLEAR`\n\nexport const LODESTONE_CHARACTER_DATA_REQUEST = `${LODESTONE}_CHARACTER_DATA_${REQUEST}`\nexport const LODESTONE_CHARACTER_DATA_SUCCESS = `${LODESTONE}_CHARACTER_DATA_${SUCCESS}`\nexport const API_REQUEST_FAILURE = `${LODESTONE}_CHARACTER_DATA_${FAILURE}`\n","import * as LocalStorage from '../../service/localStorage'\nimport * as XivApi from '../../service/xivApi'\nimport * as T from './types'\n\nconst localClassDataRetrieve = localData => ({\n  type: T.LOCAL_CLASS_DATA_RETRIEVAL,\n  localData\n})\n\nconst localClassDataStore = localData => ({\n  type: T.LOCAL_CLASS_DATA_STORE,\n  localData\n})\n\nconst localClassDataClear = () => ({\n  type: T.LOCAL_CLASS_DATA_CLEAR\n})\n\nconst localCharacterDataRetrieve = localData => ({\n  type: T.LOCAL_CHARACTER_DATA_RETRIEVAL,\n  localData\n})\n\nconst localCharacterDataStore = localData => ({\n  type: T.LOCAL_CHARACTER_DATA_STORE,\n  localData\n})\n\nconst localCharacterDataClear = () => ({\n  type: T.LOCAL_CHARACTER_DATA_CLEAR\n})\n\nconst lodestoneCharacterDataRequest = characterId => ({\n  type: T.LODESTONE_CHARACTER_DATA_REQUEST,\n  characterId\n})\n\nconst apiRequestSuccess = (type, payload) => ({\n  type,\n  payload\n})\n\nconst apiRequestFailure = (type, error) => ({\n  type,\n  error\n})\n\nexport const getLocalClassData = () => {\n  return dispatch => {\n    const localData = LocalStorage.retrieveAndUpdateCraftingClassData()\n    dispatch(localClassDataRetrieve(localData))\n  }\n}\n\nexport const saveLocalClassData = classData => {\n  return dispatch => {\n    LocalStorage.storeCraftingClassData(classData)\n    dispatch(localClassDataStore(classData))\n  }\n}\n\nexport const clearLocalClassData = () => {\n  return dispatch => {\n    LocalStorage.clearCraftingClassData()\n    dispatch(localClassDataClear())\n  }\n}\n\nexport const saveLocalCharacterData = characterData => {\n  return dispatch => {\n    LocalStorage.storeCharacterData(characterData)\n    dispatch(localCharacterDataStore(characterData))\n  }\n}\n\nexport const getLocalCharacterData = () => {\n  return dispatch => {\n    const localData = LocalStorage.retrieveAndUpdateCharacterData()\n    dispatch(localCharacterDataRetrieve(localData))\n  }\n}\n\nexport const clearLocalCharacterData = () => {\n  return dispatch => {\n    LocalStorage.clearCharacterData()\n    dispatch(localCharacterDataClear())\n  }\n}\n\nexport const getLodestoneCharacterData = characterId => {\n  return async dispatch => {\n    dispatch(lodestoneCharacterDataRequest(characterId))\n    try {\n      const payload = await XivApi.getCharacterById(characterId)\n      dispatch(apiRequestSuccess(T.LODESTONE_CHARACTER_DATA_SUCCESS, payload))\n      dispatch(saveLocalCharacterData(payload))\n      dispatch(saveLocalClassData(LocalStorage.updateCraftingClassDataWithCharacterData()))\n      dispatch(getLocalClassData())\n    } catch (err) {\n      dispatch(apiRequestFailure(T.API_REQUEST_FAILURE, err))\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Form, Spinner, Modal } from 'react-bootstrap'\nimport { get, map as _map } from 'lodash'\nimport XIV_SERVERS from '../../data/xiv-servers'\nimport * as XivApi from '../../service/xivApi'\n\nclass LodestoneCharacterModal extends React.Component {\n  state = {}\n\n  handleSetField (event) {\n    const { target: { name, value } } = event\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleSearch (page = 1, event) {\n    !!event && event.preventDefault()\n    this.setState({\n      loading: true,\n      page\n    }, this.performSearch)\n  }\n\n  async performSearch () {\n    const { name, server, page } = this.state\n    const result = await XivApi.findCharacterByServerAndName(server, name, page)\n    this.setState({\n      lodestoneResults: result,\n      loading: false\n    })\n  }\n\n  handleClose () {\n    const { onHide } = this.props\n    this.setState({\n      name: undefined,\n      server: undefined,\n      lodestoneResults: undefined,\n      characterId: undefined\n    }, onHide)\n  }\n\n  handleSubmitCharacterSelection () {\n    const { getLodestoneCharacterData } = this.props\n    const { characterId } = this.state\n\n    getLodestoneCharacterData(characterId)\n    this.handleClose()\n  }\n\n  render () {\n    const { show } = this.props\n    const { characterId, loading, lodestoneResults, name, server } = this.state\n\n    const results = get(lodestoneResults, 'Results', [])\n    const prevPage = get(lodestoneResults, 'Pagination.PagePrev')\n    const nextPage = get(lodestoneResults, 'Pagination.PageNext')\n\n    return (\n      <Modal show={show} onHide={this.handleClose.bind(this)}>\n        <Form\n          onSubmit={this.handleSearch.bind(this, 1)}\n          onReset={this.handleClose.bind(this)}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Import Character Data\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form.Group>\n              <Form.Label>Server</Form.Label>\n              <Form.Control name=\"server\" as=\"select\" onChange={this.handleSetField.bind(this)}>\n                <option>Choose a Server</option>\n                {_map(XIV_SERVERS, (server, key) => (\n                  <option key={key} value={server}>{server}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Name</Form.Label>\n              <Form.Control name=\"name\" type=\"text\" onChange={this.handleSetField.bind(this)} />\n            </Form.Group>\n            <Button type=\"submit\" disabled={!name || !server}>\n              Search\n            </Button>\n            <hr />\n            {!!loading && (\n              <div className=\"fullWidth text-center\">\n                <Spinner animation=\"grow\" variant=\"danger\" />\n                <Spinner animation=\"grow\" variant=\"warning\" />\n                <Spinner animation=\"grow\" variant=\"success\" />\n              </div>\n            )}\n            {!loading && !results.length && (\n              <div>\n                No results available.\n              </div>\n            )}\n            {!loading && !!results.length && (\n              <React.Fragment>\n                <div className=\"lodestoneResults\">\n                  {results.map((char, key) => {\n                    const { ID, Name, Avatar } = char\n                    return (\n                      <div\n                        key={key}\n                        className=\"flex justify-between items-center\"\n                      >\n                        <Form.Check\n                          id={ID}\n                          type=\"radio\"\n                          name=\"characterId\"\n                          value={ID}\n                          onChange={this.handleSetField.bind(this)}\n                        />\n                        <label htmlFor={ID}>{Name}</label>\n                        <label htmlFor={ID}>\n                          <img className=\"avatar\" src={Avatar} alt={Name} />\n                        </label>\n                      </div>\n                    )\n                  })}\n                </div>\n                <div className=\"flex justify-between items-center pt2\">\n                  <div className=\"w-50 tl\">\n                    {!!prevPage && (\n                      <Button type=\"button\" onClick={this.handleSearch.bind(this, prevPage)}>\n                        Prev Page\n                      </Button>\n                    )}\n                  </div>\n                  <div className=\"w-50 tr\">\n                    {nextPage && (\n                      <Button type=\"button\" onClick={this.handleSearch.bind(this, nextPage)}>\n                        Next Page\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </React.Fragment>\n            )}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"danger\"\n              type=\"reset\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              disabled={!characterId}\n              onClick={this.handleSubmitCharacterSelection.bind(this)}\n            >\n              Load Data\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    )\n  }\n}\n\nLodestoneCharacterModal.propTypes = {\n  show: PropTypes.bool.isRequired,\n  onHide: PropTypes.func.isRequired\n}\n\nLodestoneCharacterModal.defaultProps = {\n  show: false\n}\n\nexport default LodestoneCharacterModal\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { get } from 'lodash'\nimport { NavDropdown } from 'react-bootstrap'\nimport { clearLocalCharacterData, clearLocalClassData, getLodestoneCharacterData } from '../../store/local/actions'\nimport LodestoneCharacterModal from './LodestoneCharacterModal'\n\nconst getDropdownTitle = characterData => {\n  if (get(characterData, 'Character.Avatar')) {\n    const { Character: { Avatar, Name } } = characterData\n    return (\n      <span className=\"items-center\">\n        {Name}\n        <span className=\"ml2\"><img src={Avatar} alt={Name} className=\"avatar\" /></span>\n      </span>\n    )\n  }\n\n  return 'Options'\n}\n\nclass LodestoneCharacterMenu extends React.Component {\n  state = {\n    showModal: false\n  }\n\n  handleModalToggle (showModal) {\n    this.setState({\n      showModal: showModal\n    })\n  }\n\n  render () {\n    const {\n      characterData,\n      clearLocalCharacterData,\n      clearLocalClassData,\n      getLodestoneCharacterData,\n      lodestoneResults,\n      searchLodestoneCharacterData\n    } = this.props\n\n    const importText = `Import ${!characterData ? '' : 'Different'} Character Data`.replace('  ', ' ')\n\n    return (\n      <React.Fragment>\n        <NavDropdown\n          alignRight\n          title={getDropdownTitle(characterData)}\n        >\n          {!!characterData && (\n            <React.Fragment>\n              <NavDropdown.Item onClick={getLodestoneCharacterData.bind(this, characterData.characterId)}>\n                Refresh Character Data\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n            </React.Fragment>\n          )}\n          <NavDropdown.Item onClick={this.handleModalToggle.bind(this, true)}>\n            {importText}\n          </NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item onClick={clearLocalClassData}>\n            Clear Crafting Class Data\n          </NavDropdown.Item>\n          {!!characterData && (\n            <NavDropdown.Item onClick={clearLocalCharacterData}>\n              Clear Character Data\n            </NavDropdown.Item>\n          )}\n        </NavDropdown>\n        <LodestoneCharacterModal\n          lodestoneResults={lodestoneResults}\n          onHide={this.handleModalToggle.bind(this, false)}\n          searchLodestoneCharacterData={searchLodestoneCharacterData}\n          show={this.state.showModal}\n          getLodestoneCharacterData={getLodestoneCharacterData}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nLodestoneCharacterMenu.propTypes = {\n  characterData: PropTypes.shape()\n}\n\nconst mapStateToProps = () => ({})\n\nconst mapDispatchToProps = dispatch => ({\n  getLodestoneCharacterData: characterId => dispatch(getLodestoneCharacterData(characterId)),\n  clearLocalCharacterData: () => dispatch(clearLocalCharacterData()),\n  clearLocalClassData: () => dispatch(clearLocalClassData())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LodestoneCharacterMenu)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Nav, Navbar, NavbarBrand } from 'react-bootstrap'\nimport LodestoneCharacterMenu from './LodestoneCharacterMenu'\n\nexport default class Navigation extends React.Component {\n  render () {\n    const { characterData } = this.props\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <NavbarBrand>\n          FFXIV Crafting & Gathering Helper\n        </NavbarBrand>\n        <Nav className=\"mr-auto\" />\n        <Nav>\n          <LodestoneCharacterMenu\n            characterData={characterData}\n          />\n        </Nav>\n      </Navbar>\n    )\n  }\n}\n\nNavigation.propTypes = {\n  characterData: PropTypes.shape(),\n  craftingClassData: PropTypes.arrayOf(PropTypes.shape())\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, ButtonGroup, Form, FormControl, OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport { filter, forEach, includes, isEqual } from 'lodash'\nimport CRAFTING_CLASSES from '../../data/crafting-classes'\nimport { getIconUrl } from '../../service/xivApi'\n\nexport default class RecipeSearchForm extends React.Component {\n  state = {\n    craftingClassSelections: <ButtonGroup />\n  }\n\n  componentDidMount () {\n    this.updateCraftingClassSelections()\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    const { recipeSearchClasses } = this.props\n    if (!isEqual(recipeSearchClasses, prevProps.recipeSearchClasses)) {\n      this.updateCraftingClassSelections()\n    }\n  }\n\n  updateCraftingClassSelections () {\n    const { recipeSearchClasses, handleToggleRecipeSearchClass } = this.props\n\n    const buttons = []\n\n    forEach(filter(CRAFTING_CLASSES, cc => cc.type === 'crafting'), cc => {\n      buttons.push((\n        <OverlayTrigger\n          key={`overlayTrigger-${cc.abbreviation}`}\n          overlay={\n            <Tooltip id={`tooltip-${cc.abbreviation}`}>\n              {cc.name}\n            </Tooltip>\n          }\n        >\n          <Button\n            className=\"craftingClassSelections\"\n            key={cc.abbreviation}\n            value={cc.abbreviation}\n            variant={includes(recipeSearchClasses, cc.abbreviation) ? 'primary' : 'light'}\n          >\n            <img\n              src={getIconUrl(cc.icon)}\n              alt={cc.name}\n              onClick={handleToggleRecipeSearchClass.bind(this, cc.abbreviation)}\n            />\n          </Button>\n        </OverlayTrigger>\n      ))\n    })\n\n    const craftingClassSelections = (\n      <ButtonGroup>\n        {buttons}\n      </ButtonGroup>\n    )\n\n    this.setState({\n      craftingClassSelections\n    })\n  }\n\n  render () {\n    const {\n      handleChange,\n      handleReset,\n      handleSubmit,\n      handleToggleRecipeIncludeMaster,\n      handleToggleRecipeSearchExact,\n      recipeSearchExact,\n      recipeSearchIncludeMaster,\n      recipeSearchIsInvalid,\n      recipeSearchString\n    } = this.props\n\n    const { craftingClassSelections } = this.state\n\n    return (\n      <React.Fragment>\n        <Form onReset={handleReset} onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>Enter Your Search Term(s)</Form.Label>\n            <Form.Control\n              as=\"input\"\n              name=\"recipeSearchString\"\n              value={recipeSearchString}\n              onChange={handleChange}\n              isInvalid={!!recipeSearchIsInvalid}\n            />\n            <FormControl.Feedback type=\"invalid\">\n              Please enter a search term.\n            </FormControl.Feedback>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>\n              Choose Crafting Classes to Search\n              <br />\n              <small>(if none are selected, all will be searched)</small>\n            </Form.Label>\n            <br />\n            {craftingClassSelections}\n          </Form.Group>\n          <div className=\"flex flex-row\">\n            <Form.Check onChange={handleToggleRecipeIncludeMaster} checked={recipeSearchIncludeMaster} />\n            <Form.Label>Include Master Recipes</Form.Label>\n          </div>\n          {false && (\n            <div className=\"flex flex-row\">\n              <Form.Check onChange={handleToggleRecipeSearchExact} checked={recipeSearchExact} />\n              <Form.Label>Search Exact Phrase</Form.Label>\n            </div>\n          )}\n          <Button type=\"reset\" variant=\"danger\" className=\"mr1\">Clear</Button>\n          <Button type=\"submit\" variant=\"primary\" className=\"ml1\">Go!</Button>\n        </Form>\n      </React.Fragment>\n    )\n  }\n}\n\nRecipeSearchForm.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  handleReset: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  handleToggleRecipeIncludeMaster: PropTypes.func.isRequired,\n  handleToggleRecipeSearchClass: PropTypes.func.isRequired,\n  handleToggleRecipeSearchExact: PropTypes.func.isRequired,\n  recipeSearchClasses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  recipeSearchExact: PropTypes.bool.isRequired,\n  recipeSearchIncludeMaster: PropTypes.bool.isRequired,\n  recipeSearchIsInvalid: PropTypes.bool.isRequired,\n  recipeSearchString: PropTypes.string.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { isEqual } from 'lodash'\nimport { Button, ButtonGroup } from 'react-bootstrap'\n\nexport default class Pagination extends React.Component {\n  state = {}\n\n  paginate () {\n    const { currentPage, handlePageChange, totalPages } = this.props\n    const minPage = Math.max(1, Math.min(currentPage - 3, totalPages - 6))\n    const maxPage = Math.min(totalPages, minPage + 6)\n\n    const options = []\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"first\"\n          value={1}\n          onClick={handlePageChange}\n          disabled={currentPage === 1}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &lt;&lt;\n        </Button>\n      ))\n    }\n\n    if (totalPages > 1) {\n      options.push((\n        <Button\n          key=\"prev\"\n          value={Math.max(currentPage - 1, 1)}\n          onClick={handlePageChange}\n          disabled={currentPage === 1}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &lt;\n        </Button>\n      ))\n    }\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"prevGroup\"\n          value={Math.max(1, currentPage - 7)}\n          onClick={handlePageChange}\n          disabled={minPage === 1}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          ...\n        </Button>\n      ))\n    }\n\n    for (let i = minPage; i <= maxPage; i++) {\n      const activePage = i === currentPage\n      const option = (\n        <Button\n          key={i}\n          value={i}\n          onClick={handlePageChange}\n          variant={activePage ? 'primary' : 'light'}\n          // style={{ border: '1px solid #def' }}\n        >\n          {i}\n        </Button>\n      )\n\n      options.push(option)\n    }\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"nextGroup\"\n          value={Math.min(totalPages, currentPage + 7)}\n          onClick={handlePageChange}\n          disabled={maxPage === totalPages}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          ...\n        </Button>\n      ))\n    }\n\n    if (totalPages > 1) {\n      options.push((\n        <Button\n          key=\"next\"\n          value={Math.min(currentPage + 1, totalPages)}\n          onClick={handlePageChange}\n          disabled={currentPage === totalPages}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &gt;\n        </Button>\n      ))\n    }\n\n    if (totalPages > 7) {\n      options.push((\n        <Button\n          key=\"last\"\n          value={totalPages}\n          onClick={handlePageChange}\n          disabled={currentPage === totalPages}\n          variant=\"primary\"\n          // style={{ border: '1px solid #def' }}\n        >\n          &gt;&gt;\n        </Button>\n      ))\n    }\n\n    this.setState({\n      options\n    })\n  }\n\n  componentDidMount () {\n    this.paginate()\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    if (!isEqual(this.props, prevProps)) {\n      this.paginate()\n    }\n  }\n\n  render () {\n    const { options } = this.state\n    return (\n      <div>\n        <ButtonGroup>\n          {options}\n        </ButtonGroup>\n      </div>\n    )\n  }\n}\n\nPagination.propTypes = {\n  currentPage: PropTypes.number.isRequired,\n  handlePageChange: PropTypes.func.isRequired,\n  totalPages: PropTypes.number.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { find, get } from 'lodash'\nimport { Button, Table } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusSquare, faMinusSquare } from '@fortawesome/free-solid-svg-icons'\nimport { getIconUrl } from '../../service/xivApi'\nimport Pagination from '../common/Pagination'\n\nexport default class RecipeSearchResult extends React.Component {\n  render () {\n    const {\n      clearRecipeSearch,\n      handlePageChange,\n      handleTabChange,\n      handleToggleListItem,\n      myList,\n      pagination,\n      recipeList\n    } = this.props\n\n    if (!recipeList.length) {\n      return (\n        <div className=\"tc\">\n          No Results to Display\n        </div>\n      )\n    }\n\n    const pageTotal = get(pagination, 'PageTotal')\n    const pageCurrent = get(pagination, 'Page')\n\n    return (\n      <Table className=\"recipes\" hover striped>\n        <thead>\n        <tr>\n          <td colSpan={5} className=\"tc\">\n            <Pagination currentPage={pageCurrent} totalPages={pageTotal} handlePageChange={handlePageChange} />\n          </td>\n        </tr>\n        <tr>\n          <th />\n          <th>Crafting Class</th>\n          <th>Item Name</th>\n          <th>Required Level to Craft</th>\n          <th>Add/Remove</th>\n        </tr>\n        </thead>\n        <tbody>\n        {recipeList.map((r, key) => {\n          const iconUrl = getIconUrl(get(r, 'Icon', ''))\n          const name = get(r, 'Name')\n          const craftingClassName = get(r, 'ClassJob.NameEnglish')\n          const level = get(r, 'RecipeLevelTable.ClassJobLevel')\n          const isOnList = !!find(myList, item => get(item, 'ID') === get(r, 'ID'))\n\n          return (\n            <tr key={key}>\n              <td><img src={iconUrl} alt={name} /></td>\n              <td>{craftingClassName}</td>\n              <td>{name}</td>\n              <td>{level}</td>\n              <td>\n                <Button onClick={handleToggleListItem.bind(this, r)} variant={isOnList ? 'danger' : 'success'}>\n                  <FontAwesomeIcon\n                    icon={isOnList ? faMinusSquare : faPlusSquare}\n                  />\n                </Button>\n              </td>\n            </tr>\n          )\n        })}\n        </tbody>\n        <tfoot>\n        <tr>\n          <td colSpan={5} className=\"tc\">\n            <Pagination currentPage={pageCurrent} totalPages={pageTotal} handlePageChange={handlePageChange} />\n          </td>\n        </tr>\n        <tr>\n          <td colSpan={5}>\n            <div className=\"w-100 dib tc\">\n              <Button className=\"mh1\" onClick={clearRecipeSearch.bind(this)} variant=\"danger\">\n                Clear Recipe Search\n              </Button>\n              <Button className=\"mh1\" onClick={handleTabChange.bind(this, 'recipe-list')}>\n                Go to Recipe List\n              </Button>\n            </div>\n          </td>\n        </tr>\n        </tfoot>\n      </Table>\n    )\n  }\n}\n\nRecipeSearchResult.propTypes = {\n  clearRecipeSearch: PropTypes.func.isRequired,\n  handlePageChange: PropTypes.func.isRequired,\n  handleTabChange: PropTypes.func.isRequired,\n  handleToggleListItem: PropTypes.func.isRequired,\n  myList: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  pagination: PropTypes.shape().isRequired,\n  recipeList: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  ready: PropTypes.bool.isRequired\n}\n\nRecipeSearchResult.defaultProps = {\n  myList: [],\n  pagination: {},\n  recipeList: [],\n  ready: true\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { get } from 'lodash'\nimport RecipeSearchForm from './RecipeSearchForm'\nimport RecipeSearchResult from './RecipeSearchResult'\n\nexport default class RecipeSearch extends React.Component {\n  render () {\n    const {\n      clearRecipeSearch,\n      handleChange,\n      handlePageChange,\n      handleReset,\n      handleSubmit,\n      handleTabChange,\n      handleToggleListItem,\n      handleToggleRecipeIncludeMaster,\n      handleToggleRecipeSearchClass,\n      handleToggleRecipeSearchExact,\n      myList,\n      recipeSearchClasses,\n      recipeSearchExact,\n      recipeSearchIncludeMaster,\n      recipeSearchIsInvalid,\n      recipeSearchResults,\n      recipeSearchString\n    } = this.props\n\n    const pagination = get(recipeSearchResults, 'Pagination')\n    const recipeList = get(recipeSearchResults, 'Results')\n\n    return (\n      <React.Fragment>\n        <RecipeSearchForm\n          handleChange={handleChange}\n          handleReset={handleReset}\n          handleSubmit={handleSubmit}\n          handleToggleRecipeIncludeMaster={handleToggleRecipeIncludeMaster}\n          handleToggleRecipeSearchClass={handleToggleRecipeSearchClass}\n          handleToggleRecipeSearchExact={handleToggleRecipeSearchExact}\n          recipeSearchClasses={recipeSearchClasses}\n          recipeSearchExact={recipeSearchExact}\n          recipeSearchIncludeMaster={recipeSearchIncludeMaster}\n          recipeSearchIsInvalid={recipeSearchIsInvalid}\n          recipeSearchString={recipeSearchString}\n        />\n        <hr />\n        <RecipeSearchResult\n          clearRecipeSearch={clearRecipeSearch}\n          handlePageChange={handlePageChange}\n          handleTabChange={handleTabChange}\n          handleToggleListItem={handleToggleListItem}\n          myList={myList}\n          pagination={pagination}\n          recipeList={recipeList}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nRecipeSearch.propTypes = {\n  clearRecipeSearch: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handlePageChange: PropTypes.func.isRequired,\n  handleReset: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  handleTabChange: PropTypes.func.isRequired,\n  handleToggleListItem: PropTypes.func.isRequired,\n  handleToggleRecipeIncludeMaster: PropTypes.func.isRequired,\n  handleToggleRecipeSearchClass: PropTypes.func.isRequired,\n  handleToggleRecipeSearchExact: PropTypes.func.isRequired,\n  myList: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  recipeSearchClasses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  recipeSearchExact: PropTypes.bool.isRequired,\n  recipeSearchIncludeMaster: PropTypes.bool.isRequired,\n  recipeSearchIsInvalid: PropTypes.bool.isRequired,\n  recipeSearchResults: PropTypes.shape(),\n  recipeSearchString: PropTypes.string.isRequired\n}\n\nRecipeSearch.defaultProps = {\n  myList: [],\n  recipeSearchExact: false,\n  recipeSearchIncludeMaster: false,\n  recipeSearchResults: {}\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { isEqual, set, toNumber } from 'lodash'\nimport { Button, Form, Table } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMinusSquare } from '@fortawesome/free-solid-svg-icons'\nimport { getIconUrl } from '../../service/xivApi'\n\nexport default class MyList extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      mapping: this.createItemQuantityMapping()\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    const { list } = this.props\n    if (!isEqual(list, prevProps.list)) {\n      const mapping = this.createItemQuantityMapping()\n      this.setState({\n        mapping\n      })\n    }\n  }\n\n  createItemQuantityMapping () {\n    const { list } = this.props\n    const mapping = {}\n\n    list.forEach(l => {\n      mapping[l.ID] = l.quantity\n    })\n\n    return mapping\n  }\n\n  handleItemQuantityUpdate (i, event) {\n    const { mapping } = this.state\n    set(mapping, i.ID, event.target.value)\n    this.setState({\n      mapping\n    })\n  }\n\n  handleQuantityFieldBlur (item) {\n    const { handleUpdateQuantity } = this.props\n    const { mapping } = this.state\n\n    const quantity = toNumber(mapping[item.ID]) || 1\n\n    handleUpdateQuantity(item, quantity)\n  }\n\n  render () {\n    const {\n      handleClearList,\n      handleTabChange,\n      handleToggleListItem,\n      list\n    } = this.props\n\n    const { mapping } = this.state\n\n    if (!list.length) {\n      return (\n        <div className=\"tc\">\n          No Items in List\n          <hr />\n          <Button onClick={handleTabChange.bind(this, 'search')}>\n            Back to Search\n          </Button>\n        </div>\n      )\n    }\n\n    return (\n      <Table className=\"recipes\" hover striped>\n        <thead>\n        <tr>\n          <th />\n          <th>Crafting Class</th>\n          <th>Item Name</th>\n          <th>Required Level to Craft</th>\n          <th>Quantity</th>\n          <th>Remove</th>\n        </tr>\n        </thead>\n        <tbody>\n        {list.map((i) => {\n          return (\n            <tr key={i.ID}>\n              <td><img src={getIconUrl(i.Icon)} alt={i.Name} /></td>\n              <td>{i.ClassJob.NameEnglish}</td>\n              <td>{i.Name}</td>\n              <td>{i.RecipeLevelTable.ClassJobLevel}</td>\n              <td>\n                <Form.Control\n                  type=\"number\"\n                  value={mapping[i.ID] || 1}\n                  onChange={this.handleItemQuantityUpdate.bind(this, i)}\n                  onBlur={this.handleQuantityFieldBlur.bind(this, i)}\n                />\n              </td>\n              <td>\n                <Button variant=\"danger\" onClick={handleToggleListItem.bind(this, i)}>\n                  <FontAwesomeIcon icon={faMinusSquare} />\n                </Button>\n              </td>\n            </tr>\n          )\n        })}\n        </tbody>\n        {list.length && (\n          <tfoot>\n          <tr>\n            <td colSpan={6} className=\"tc\">\n              <div className=\"space-between\">\n                <Button variant=\"danger\" onClick={handleClearList}>\n                  Clear Recipe List\n                </Button>\n                <Button variant=\"primary\" onClick={handleTabChange.bind(this, 'shopping-list')}>\n                  View My Shopping List\n                </Button>\n              </div>\n            </td>\n          </tr>\n          </tfoot>\n        )}\n      </Table>\n    )\n  }\n}\n\nMyList.propTypes = {\n  handleClearList: PropTypes.func.isRequired,\n  handleTabChange: PropTypes.func.isRequired,\n  handleToggleListItem: PropTypes.func.isRequired,\n  handleUpdateQuantity: PropTypes.func.isRequired,\n  list: PropTypes.arrayOf(PropTypes.shape({\n    ClassJob: PropTypes.shape({\n      Abbreviation_en: PropTypes.string.isRequired,\n      NameEnglish: PropTypes.string.isRequired\n    }),\n    Icon: PropTypes.string.isRequired,\n    Name: PropTypes.string.isRequired,\n    quantity: PropTypes.number,\n    RecipeLevelTable: PropTypes.shape({\n      ClassJobLevel: PropTypes.number.isRequired\n    }).isRequired\n  })).isRequired\n}\n\nMyList.defaultProps = {\n  list: []\n}\n","const RECIPE_SEARCH = 'RECIPE_SEARCH'\nconst RECIPE_LIST = 'RECIPE_LIST'\nconst SHOPPING_LIST = 'SHOPPING_LIST'\n\nexport const RECIPE_SEARCH_REQUEST = `${RECIPE_SEARCH}_SEARCH`\nexport const RECIPE_SEARCH_SUCCESS = `${RECIPE_SEARCH}_SUCCESS`\nexport const RECIPE_SEARCH_FAILURE = `${RECIPE_SEARCH}_FAILURE`\nexport const RECIPE_SEARCH_CLEAR = `${RECIPE_SEARCH}_CLEAR`\n\n// export const RECIPE_LIST_ADD = `${RECIPE_LIST}_ADD`\n// export const RECIPE_LIST_REMOVE = `${RECIPE_LIST}_REMOVE`\nexport const RECIPE_LIST_CLEAR = `${RECIPE_LIST}_CLEAR`\nexport const RECIPE_LIST_SAVE = `${RECIPE_LIST}_SAVE`\n\nexport const SHOPPING_LIST_CREATE = `${SHOPPING_LIST}_CREATE`\nexport const SHOPPING_LIST_CLEAR = `${SHOPPING_LIST}_CLEAR`\n","import { concat, filter, find, forEach, get, includes, map, set, toLower, uniqBy, orderBy } from 'lodash'\nimport ITEM_TO_GATHERING_ITEM_MAPPING from '../data/item-to-gathering-item-mapping'\nimport GATHERING_ITEM_POINTS from '../data/gathering-item-points'\nimport FISHING_SPOTS from '../data/fishing-spots'\nimport * as XivApiService from './xivApi'\n\n/**\n * Gets a list of ingredients required to craft a given set of recipes.\n *\n * @param recipeList\n * @returns {Promise<*>}\n */\nexport const getIngredientListForRecipes = async recipeList => {\n  if (!recipeList || !recipeList.length) return {}\n\n  // we will want to keep the following lists:\n  // 1. Ingredients that can be gathered\n  const ingredientsGatherable = []\n\n  // 2. Ingredients that can be crafted\n  const ingredientsCrafted = []\n\n  // 3. Ingredients that can be obtained from monsters\n  const ingredientsOther = []\n\n  // 3. Ingredients that can be bought (that cannot be gathered or dropped by monsters)\n  const ingredientsPurchased = []\n\n  await getAndSortRecipeResults(recipeList,\n    ingredientsGatherable,\n    ingredientsCrafted,\n    ingredientsPurchased,\n    ingredientsOther\n  )\n\n  // get item IDs for the gatherable and purchasable things so we can get their info\n  const itemIds = map(concat(ingredientsGatherable, ingredientsOther), item => get(item, 'itemId'))\n  const itemData = await XivApiService.getItemsById(itemIds)\n\n  forEach(get(itemData, 'Results', []), item => {\n    const foundItem = find(ingredientsGatherable, ig => get(ig, 'itemId') === get(item, 'ID')) ||\n      find(ingredientsOther, io => get(io, 'itemId') === get(item, 'ID'))\n    set(foundItem, 'name', get(item, 'Name'))\n    set(foundItem, 'icon', XivApiService.getIconUrl(get(item, 'Icon')))\n    // set(foundItem, 'gameContentLinks', get(item, 'GameContentLinks', {}))\n    set(foundItem, 'gameContentLinks',\n      filter(\n        map(\n          get(item, 'GameContentLinks', {}), (value, key) => ({ key, value })\n        ), result => {\n          const val = toLower(result.key)\n          return includes(val, 'shop') && !includes(val, 'special')\n        }\n      )\n    )\n\n    if (!!get(foundItem, 'gameContentLinks.length')) {\n      ingredientsPurchased.push(foundItem)\n    }\n  })\n\n  // add gathering item data\n  addGatheringItemData(ingredientsGatherable)\n\n  // sort the results\n  return {\n    ingredientsCrafted: orderBy(uniqBy(ingredientsCrafted, ic => get(ic, 'ID')), 'Name'),\n    ingredientsGatherable: orderBy(ingredientsGatherable, 'name'),\n    ingredientsPurchased: orderBy(ingredientsPurchased, 'name'),\n    ingredientsOther: orderBy(ingredientsOther, 'name')\n  }\n}\n\nconst addGatheringItemData = ingredientsGatherable => {\n  forEach(ingredientsGatherable, item => {\n    const gatheringItemId = get(item, 'gatheringItemId')\n\n    if (!!gatheringItemId) {\n      const filteredGatheringPoints = filter(\n        GATHERING_ITEM_POINTS, point => get(point, 'ID', '').startsWith(`${gatheringItemId}.`)\n      )\n\n      const namePath = 'GatheringPoint.PlaceName.Name_en'\n      const areaPath = 'GatheringPoint.TerritoryType.PlaceName.Name_en'\n      const regionPath = 'GatheringPoint.TerritoryType.PlaceNameRegion.Name_en'\n      const levelPath = 'GatheringPoint.GatheringPointBase.GatheringLevel'\n      const typePath = 'GatheringPoint.GatheringPointBase.GatheringType.Name_en'\n      const aetherytePath = 'GatheringPoint.TerritoryType.AetheryteTargetID'\n\n      const pointData = map(filteredGatheringPoints, point => getPointData(\n        point,\n        namePath,\n        areaPath,\n        regionPath,\n        levelPath,\n        typePath,\n        aetherytePath\n      ))\n\n      set(item, 'pointData', orderBy(pointData, ['region', 'area', 'name']))\n    } else {\n      const itemId = get(item, 'itemId')\n      const filteredFishingSpots = filter(FISHING_SPOTS, spot => {\n        for (let i = 0; i < 10; i++) {\n          const path = `Item${i}TargetID`\n          const fishId = get(spot, path)\n          if (fishId === itemId) return true\n        }\n      })\n\n      const namePath = 'PlaceName.Name_en'\n      const areaPath = 'TerritoryType.PlaceName.Name_en'\n      const regionPath = 'TerritoryType.PlaceNameRegion.Name_en'\n      const levelPath = 'GatheringLevel'\n\n      const pointData = map(filteredFishingSpots, point => {\n        const pd = getPointData(\n          point,\n          namePath,\n          areaPath,\n          regionPath,\n          levelPath,\n          ''\n        )\n        set(pd, 'type', 'Fishing')\n        set(pd, 'gatheringClass', 'Fisherman')\n        return pd\n      })\n\n      set(item, 'pointData', orderBy(pointData, ['region', 'area', 'name']))\n    }\n  })\n}\n\nconst getPointData = (data, namePath, areaPath, regionPath, levelPath, typePath) => {\n  const typeMap = {\n    'Mining': 'Miner',\n    'Quarrying': 'Miner',\n    'Logging': 'Botanist',\n    'Harvesting': 'Botanist'\n  }\n  const name = get(data, namePath)\n  const area = get(data, areaPath)\n  const region = get(data, regionPath)\n  const level = get(data, levelPath)\n  const type = get(data, typePath)\n\n  return {\n    name,\n    area,\n    region,\n    level,\n    gatheringClass: get(typeMap, type),\n    type,\n    id: get(data, 'ID')\n  }\n}\n\nconst hasFishingSpotMatch = itemId => {\n  let matched = false\n  forEach(FISHING_SPOTS, spot => {\n    for (let i = 0; i < 10; i++) {\n      const path = `Item${i}TargetID`\n      const fishingId = get(spot, path)\n      if (itemId === fishingId) {\n        matched = true\n        return\n      }\n    }\n  })\n\n  return matched\n}\n\nconst getAndSortRecipeResults = async (\n  recipeList,\n  ingredientsGatherable,\n  ingredientsCrafted,\n  ingredientsPurchased,\n  ingredientsOther\n) => {\n  const recipeIds = map(recipeList, recipe => get(recipe, 'ID'))\n  const recipeResults = get(await XivApiService.getRecipesById(recipeIds), 'Results', [])\n  const nextRecipeResults = []\n  forEach(recipeResults, rr => {\n    const recipeListEntry = find(recipeList, rle => get(rle, 'ID') === get(rr, 'ID'))\n    set(rr, 'quantity', get(recipeListEntry, 'quantity'))\n\n    // go through each ingredient\n    for (let i = 0; i < 10; i++) {\n      const itemId = get(rr, `ItemIngredient${i}.ID`)\n      const itemCategory = get(rr, `ItemIngredient${i}.ItemSearchCategoryTargetID`)\n      const amount = get(rr, `AmountIngredient${i}`)\n      const gatheringMapNode = find(ITEM_TO_GATHERING_ITEM_MAPPING, mapping => get(mapping, 'ItemID') === itemId)\n      const gatheringItemId = get(gatheringMapNode, 'GatheringItemID')\n      const ingredientRecipe = get(rr, `ItemIngredientRecipe${i}[0]`)\n      const quantity = get(rr, 'quantity')\n      const fishingSpotMatch = hasFishingSpotMatch(itemId)\n\n      if (!!gatheringItemId || !!fishingSpotMatch) {\n        const existingIngredientGatherable = find(ingredientsGatherable, ig => get(ig, 'itemId') === itemId)\n        if (!!existingIngredientGatherable) {\n          const existingAmount = get(existingIngredientGatherable, 'amount')\n          set(existingIngredientGatherable, 'amount', existingAmount + (amount * quantity))\n        } else {\n          ingredientsGatherable.push({ itemId, gatheringItemId, amount: amount * quantity, itemCategory })\n        }\n      }\n\n      if (!!ingredientRecipe) {\n        const existingIngredientCrafted = find(ingredientsCrafted, ir => get(ingredientRecipe, 'ID') === get(ir, 'ID'))\n        const existingAmount = get(existingIngredientCrafted, 'quantity', 0)\n        set(existingIngredientCrafted || ingredientRecipe, 'quantity', existingAmount + (quantity * amount))\n        if (!existingIngredientCrafted) {\n          nextRecipeResults.push(ingredientRecipe)\n          ingredientsCrafted.push(ingredientRecipe)\n        }\n      }\n\n      if (!gatheringItemId && !ingredientRecipe && !fishingSpotMatch && !!itemId) {\n        const existingIngredientOther = find(ingredientsOther, ip => get(ip, 'itemId') === itemId)\n        if (!!existingIngredientOther) {\n          const existingAmount = get(existingIngredientOther, 'amount')\n          set(existingIngredientOther, 'amount', existingAmount + (amount * quantity))\n        } else {\n          ingredientsOther.push({ itemId, amount: amount * quantity })\n        }\n      }\n    }\n  })\n\n  if (!!nextRecipeResults.length) {\n    await getAndSortRecipeResults(nextRecipeResults,\n      ingredientsGatherable,\n      ingredientsCrafted,\n      ingredientsPurchased,\n      ingredientsOther\n    )\n  }\n}\n","import * as T from './types'\nimport * as LocalStorageService from '../../service/localStorage'\nimport * as RecipeListService from '../../service/recipe'\nimport * as XivApiService from '../../service/xivApi'\n\nconst recipeListClear = () => ({\n  type: T.RECIPE_LIST_CLEAR\n})\n\nconst recipeListSave = recipeList => ({\n  type: T.RECIPE_LIST_SAVE,\n  recipeList\n})\n\nconst shoppingListClear = () => ({\n  type: T.SHOPPING_LIST_CLEAR\n})\n\nconst shoppingListCreate = shoppingList => ({\n  type: T.SHOPPING_LIST_CREATE,\n  shoppingList\n})\n\nconst recipeSearchRequest = params => ({\n  type: T.RECIPE_SEARCH_REQUEST,\n  params\n})\n\nconst apiRequestSuccess = (type, payload) => ({\n  type,\n  payload\n})\n\nconst apiRequestFailure = (type, error) => ({\n  type, error\n})\n\nconst recipeSearchClear = () => ({\n  type: T.RECIPE_SEARCH_CLEAR\n})\n\nexport const saveMyRecipeList = recipeList => dispatch => {\n  LocalStorageService.storeMyRecipeList(recipeList)\n  dispatch(recipeListSave(recipeList))\n  dispatch(createMyShoppingList(recipeList))\n}\n\nexport const clearMyRecipeList = () => dispatch => {\n  LocalStorageService.clearMyRecipeList()\n  dispatch(recipeListClear())\n  dispatch(clearMyShoppingList())\n}\n\nexport const createMyShoppingList = recipeList => async dispatch => {\n  const result = await RecipeListService.getIngredientListForRecipes(recipeList)\n  LocalStorageService.storeMyShoppingList(result)\n  dispatch(shoppingListCreate(result))\n}\n\nexport const clearMyShoppingList = () => dispatch => {\n  LocalStorageService.clearMyShoppingList()\n  dispatch(shoppingListClear())\n}\n\nexport const searchRecipes = (string, params) => async dispatch => {\n  dispatch(recipeSearchRequest({string, ...params}))\n  try {\n    const result = await XivApiService.recipeSearch(string, params)\n    dispatch(apiRequestSuccess(T.RECIPE_SEARCH_SUCCESS, result))\n  } catch (err) {\n    dispatch(apiRequestFailure(T.RECIPE_SEARCH_FAILURE, err))\n  }\n}\n\nexport const clearRecipeSearch = () => dispatch => {\n  dispatch(recipeSearchClear())\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSort } from '@fortawesome/free-solid-svg-icons'\n\nclass SortableTableHeaderCell extends React.Component {\n  render () {\n    const { className, text, sortFunc, applySorting } = this.props\n    return (\n      <th className={className} onClick={applySorting.bind(this, sortFunc)}\n        style={{ cursor: 'pointer' }}\n      >\n        {text}\n        <FontAwesomeIcon\n          className=\"margin-left\"\n          icon={faSort}\n        />\n      </th>\n    )\n  }\n}\n\nSortableTableHeaderCell.propTypes = {\n  text: PropTypes.string.isRequired,\n  sortFunc: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  applySorting: PropTypes.func.isRequired\n}\n\nexport default SortableTableHeaderCell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { get } from 'lodash'\nimport { Badge, OverlayTrigger, Tooltip } from 'react-bootstrap'\n\nexport default class XivIcon extends React.Component {\n  render () {\n    const { badge, className, image, tooltip } = this.props\n\n    const htmlImage = (\n      <img src={image.url} alt={image.altText} />\n    )\n\n    const content = get(tooltip, 'text') ? (\n      <OverlayTrigger overlay={(\n        <Tooltip>\n          {get(tooltip, 'text')}\n        </Tooltip>\n      )}>\n        {htmlImage}\n      </OverlayTrigger>\n    ) : htmlImage\n\n    const htmlBadge = get(badge, 'text') ? (\n      <React.Fragment>\n        <br />\n        <Badge variant={get(badge, 'variant', 'primary')} className=\"xiv-icon-badge\">\n          {get(badge, 'text')}\n        </Badge>\n      </React.Fragment>\n    ) : null\n\n    return (\n      <div className={cx(className)}>\n        {content}\n        {htmlBadge}\n      </div>\n    )\n  }\n}\n\nXivIcon.propTypes = {\n  badge: PropTypes.shape({\n    variant: PropTypes.oneOf(['primary', 'secondary', 'success', 'warning', 'danger', 'light', 'dark']),\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired\n  }),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  image: PropTypes.shape({\n    altText: PropTypes.string.isRequired,\n    className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n    url: PropTypes.string.isRequired\n  }).isRequired,\n  tooltip: PropTypes.shape({\n    text: PropTypes.string.isRequired\n  })\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { FormControl, Table } from 'react-bootstrap'\nimport { clone, filter, get, includes, isEqual, orderBy, pull } from 'lodash'\nimport { getIconUrl } from '../../service/xivApi'\nimport { clearObtainedItems, getObtainedItems, storeObtainedItems } from '../../service/localStorage'\nimport SortableTableHeaderCell from '../common/SortableTableHeaderCell'\nimport XivIcon from '../common/XivIcon'\n\n/**\n * Scrolls to a position on the screen.\n *\n * @param {number} x The X coordinate for scrolling.\n * @param {number} y The Y coodrinate for scrolling.\n */\nfunction scrollToPosition (x, y) {\n  window.scrollTo(x, y)\n}\n\n/**\n * The number of columns in a row.  This allows the subheadings to take up the full width of the table.\n * @type {number}\n */\nconst headingColumns = 7\n\nexport default class ShoppingList extends React.Component {\n  state = {\n    ingredientsGatherableSort: {\n      func: 'name',\n      direction: 'asc'\n    },\n    itemsOwned: getObtainedItems()\n  }\n\n  componentDidMount () {\n    this.updateGatherableIngredients()\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    const { shoppingList } = this.props\n\n    if (!isEqual(shoppingList, prevProps.shoppingList)) {\n      this.updateGatherableIngredients()\n    }\n  }\n\n  updateGatherableIngredients () {\n    const { shoppingList } = this.props\n    const {\n      // ingredientsCrafted,\n      // ingredientsPurchased,\n      ingredientsGatherable\n      // ingredientsOther\n    } = shoppingList\n\n    const gatherableStateVars = {}\n    if (ingredientsGatherable) {\n      ingredientsGatherable.forEach(item => {\n        const key = `gatherable-${item.itemId}-location`\n        gatherableStateVars[key] = get(item, 'pointData[0]', {})\n      })\n    }\n\n    clearObtainedItems()\n\n    this.setState({\n      ...gatherableStateVars,\n      ingredientsGatherable: filter(ingredientsGatherable, ig => get(ig, 'itemCategory') !== 58),\n      ingredientsCrystals: filter(ingredientsGatherable, ig => get(ig, 'itemCategory') === 58),\n      itemsOwned: []\n    })\n  }\n\n  handleLocationUpdate (event) {\n    event.preventDefault()\n\n    const { target: { value, id } } = event\n\n    this.setState({\n      [id]: JSON.parse(value)\n    })\n  }\n\n  handleApplyIngredientsGatherableSort (sortFunc) {\n    const { ingredientsGatherableSort } = this.state\n\n    const sortDirection =\n      // isEqual(JSON.stringify(sortFunc), JSON.stringify(ingredientsGatherableSort.func)) && ingredientsGatherableSort.direction === 'asc'\n      isEqual(\n        JSON.stringify(sortFunc),\n        JSON.stringify(ingredientsGatherableSort.func)\n      ) && ingredientsGatherableSort.direction === 'asc'\n        ? 'desc'\n        : 'asc'\n\n    const newIngredientsGatherableSort = {\n      func: sortFunc,\n      direction: sortDirection\n    }\n\n    this.setState({\n      ingredientsGatherableSort: newIngredientsGatherableSort\n    })\n  }\n\n  handleToggleItemOwned (itemId) {\n    const { scrollX, scrollY } = window\n    const itemsOwned = clone(get(this.state, 'itemsOwned', []))\n\n    if (includes(itemsOwned, itemId)) {\n      pull(itemsOwned, itemId)\n    } else {\n      itemsOwned.push(itemId)\n    }\n\n    storeObtainedItems(itemsOwned)\n\n    this.setState({\n      itemsOwned\n    }, scrollToPosition.bind(this, scrollX, scrollY))\n  }\n\n  handleOwnershipSort (item) {\n    const itemId = get(item, 'itemId', get(item, 'ItemResult.ID'))\n    return includes(get(this.state, 'itemsOwned', []), itemId)\n    // return !!itemId\n  }\n\n  render () {\n    const { shoppingList: { ingredientsCrafted, ingredientsPurchased, ingredientsOther } } = this.props\n    const { ingredientsCrystals, ingredientsGatherable, ingredientsGatherableSort } = this.state\n\n    if (!get(ingredientsGatherable, 'length') && !ingredientsCrafted && !ingredientsPurchased) {\n      return (\n        <div className=\"tc\">\n          No Results to Display\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <div className=\"flex flex-row justify-center items-center\">\n          {!!ingredientsCrystals && (\n            ingredientsCrystals.map(ic => {\n              const { amount, name, icon } = ic\n              return (\n                <span key={name} className=\"ph1\">\n                  <XivIcon\n                    badge={{ text: amount }}\n                    image={{ url: icon, altText: name }}\n                    tooltip={{ text: name }}\n                  />\n                </span>\n              )\n            })\n          )}\n        </div>\n        <Table hover striped className=\"shopping-list\">\n          {!!ingredientsGatherable && !!ingredientsGatherable.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Gatherable Items</th>\n              </tr>\n              <tr>\n                <th />\n                <SortableTableHeaderCell\n                  text=\"Name\"\n                  sortFunc=\"name\"\n                  applySorting={this.handleApplyIngredientsGatherableSort.bind(this)}\n                />\n                <th>Required Class</th>\n                <th>Required Level</th>\n                <th>Quantity</th>\n                <SortableTableHeaderCell\n                  text=\"Location\"\n                  sortFunc={ig => {\n                    const point = get(this.state, `gatherable-${ig.itemId}-location`)\n                    return `${point.region} - ${point.area} - ${point.name}`\n                  }}\n                  applySorting={this.handleApplyIngredientsGatherableSort.bind(this)}\n                />\n                <th>Obtained</th>\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsGatherable,\n                [this.handleOwnershipSort.bind(this), ingredientsGatherableSort.func],\n                ['asc', ingredientsGatherableSort.direction]\n              ).map(item => {\n                const { name, icon, itemId, amount, pointData } = item\n                const key = `gatherable-${itemId}`\n                const locationSelectId = `${key}-location`\n                const gatheringClass = get(this.state, `${locationSelectId}.gatheringClass`)\n                const gatheringType = get(this.state, `${locationSelectId}.type`)\n                const level = get(this.state, `${locationSelectId}.level`)\n                const owned = includes(get(this.state, 'itemsOwned', []), itemId)\n\n                return (\n                  <tr key={key} className={cx(owned ? 'owned' : '')}>\n                    <td><XivIcon image={{ url: icon, altText: name }} /></td>\n                    <td>{name}</td>\n                    <td>{gatheringClass}{!!gatheringType && ` (${gatheringType})`}</td>\n                    <td>{level}</td>\n                    <td>{amount}</td>\n                    <td>\n                      {pointData.length === 1 && (\n                        <React.Fragment>\n                          {pointData[0].region} - {pointData[0].area} {pointData[0].name ? `- ${pointData[0].name}` : '(Unspoiled)'}\n                        </React.Fragment>\n                      )}\n                      {pointData.length > 1 && (\n                        <FormControl\n                          id={locationSelectId}\n                          as=\"select\"\n                          onChange={this.handleLocationUpdate.bind(this)}\n                        >\n                          {pointData.map((point, key) => (\n                            <option key={key} value={JSON.stringify(point)}>\n                              {point.region} - {point.area} {point.name ? `- ${point.name}` : '(Unspoiled)'} (Level {point.level}, {point.gatheringClass})\n                            </option>\n                          ))}\n                        </FormControl>\n                      )}\n                    </td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={itemId}\n                        checked={owned}\n                        onChange={this.handleToggleItemOwned.bind(this, itemId)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n          {!!ingredientsOther && !!ingredientsOther.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Items Obtained Elsewhere</th>\n              </tr>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th />\n                <th />\n                <th>Quantity</th>\n                <th>Location</th>\n                <th>Obtained</th>\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsOther,\n                this.handleOwnershipSort.bind(this),\n                'asc'\n              ).map(item => {\n                const { name, icon, itemId, amount } = item\n                const owned = includes(get(this.state, 'itemsOwned', []), itemId)\n                return (\n                  <tr key={`purchasable-${itemId}`} className={cx(owned ? 'owned' : '')}>\n                    <td><XivIcon image={{ url: icon, altText: name }} /></td>\n                    <td>{name}</td>\n                    <td />\n                    <td />\n                    <td>{amount}</td>\n                    <td>???</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={itemId}\n                        checked={owned}\n                        onChange={this.handleToggleItemOwned.bind(this, itemId)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n          {!!ingredientsPurchased && !!ingredientsPurchased.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Purchasable Items</th>\n              </tr>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Currency</th>\n                <th>Cost</th>\n                <th>Quantity</th>\n                <th>Location</th>\n                <th>Obtained</th>\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsPurchased,\n                this.handleOwnershipSort.bind(this),\n                'asc'\n              ).map(item => {\n                const { name, icon, itemId, amount } = item\n                const owned = includes(get(this.state, 'itemsOwned', []), itemId)\n                return (\n                  <tr key={`purchasable-${itemId}`} className={cx(owned ? 'owned' : '')}>\n                    <td><XivIcon image={{ url: icon, altText: name }} /></td>\n                    <td>{name}</td>\n                    <td>???</td>\n                    <td>???</td>\n                    <td>{amount}</td>\n                    <td>???</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={itemId}\n                        checked={owned}\n                        onChange={this.handleToggleItemOwned.bind(this, itemId)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n          {!!ingredientsCrafted && !!ingredientsCrafted.length && (\n            <React.Fragment>\n              <thead>\n              <tr className=\"section-head\">\n                <th colSpan={headingColumns}>Prerequisite Crafts</th>\n              </tr>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Required Class</th>\n                <th>Required Level</th>\n                <th>Quantity</th>\n                <th>Location</th>\n                <th>Obtained</th>\n              </tr>\n              </thead>\n              <tbody>\n              {orderBy(\n                ingredientsCrafted,\n                [this.handleOwnershipSort.bind(this), 'ItemResult.Name_en'],\n                ['asc', 'asc']\n              ).map(item => {\n                const name = get(item, 'ItemResult.Name_en')\n                const icon = get(item, 'ItemResult.Icon')\n                const id = get(item, 'ID')\n                const quantity = get(item, 'quantity')\n                const craftClass = get(item, 'ClassJob.NameEnglish')\n                const craftLevel = get(item, 'RecipeLevelTable.ClassJobLevel')\n                const itemId = get(item, 'ItemResult.ID')\n                const owned = includes(get(this.state, 'itemsOwned', []), itemId)\n                return (\n                  <tr key={`crafted-${id}`} className={cx(owned ? 'owned' : '')}>\n                    <td><XivIcon image={{ url: getIconUrl(icon), altText: name }} /></td>\n                    <td>{name}</td>\n                    <td>{craftClass}</td>\n                    <td>{craftLevel}</td>\n                    <td>{quantity}</td>\n                    <td>N/A</td>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={itemId}\n                        checked={owned}\n                        onChange={this.handleToggleItemOwned.bind(this, itemId)}\n                      />\n                    </td>\n                  </tr>\n                )\n              })}\n              </tbody>\n            </React.Fragment>\n          )}\n        </Table>\n      </div>\n    )\n  }\n}\n\nShoppingList.propTypes = {\n  shoppingList: PropTypes.shape().isRequired\n}\n\nShoppingList.defaultProps = {\n  shoppingList: {}\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Dropdown, DropdownButton } from 'react-bootstrap'\nimport { orderBy } from 'lodash'\nimport CRAFTING_CLASSES from '../../data/crafting-classes'\n\nexport default class FilterDropdown extends React.Component {\n  render () {\n    const { label, applyFilterFunc } = this.props\n    return (\n      <DropdownButton title={`Showing ${label}`}>\n        <Dropdown.Item onClick={applyFilterFunc.bind(this, c => !!c)}>\n          All\n        </Dropdown.Item>\n        <Dropdown.Divider/>\n        <Dropdown.Item onClick={applyFilterFunc.bind(this, c => c.type === 'crafting')}>\n          Crafting Classes\n        </Dropdown.Item>\n        <Dropdown.Item onClick={applyFilterFunc.bind(this, c => c.type === 'gathering')}>\n          Gathering Classes\n        </Dropdown.Item>\n        <Dropdown.Divider/>\n        {orderBy(CRAFTING_CLASSES, 'name').map((craftingClass, key) => (\n          <Dropdown.Item\n            key={key}\n            onClick={applyFilterFunc.bind(this, c => c.abbreviation === craftingClass.abbreviation)}\n          >\n            {craftingClass.name}\n          </Dropdown.Item>\n        ))}\n      </DropdownButton>\n    )\n  }\n}\n\nFilterDropdown.propTypes = {\n  label: PropTypes.string.isRequired,\n  applyFilterFunc: PropTypes.func.isRequired\n}\n","export function calculateRemainingExp (currentExp, totalExp) {\n  return Math.max(totalExp - currentExp, 0)\n}\n\nexport function calculateRemainingItems (remainingExp, expPerItem) {\n  return Math.ceil(remainingExp / expPerItem)\n}\n\nexport function calculateProgressPercentage (currentExp, totalExp) {\n  return totalExp <= 0 ? 0 : Math.floor((currentExp / totalExp) * 100)\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { calculateProgressPercentage, calculateRemainingExp, calculateRemainingItems } from '../../service/calculations'\nimport SortableTableHeaderCell from '../common/SortableTableHeaderCell'\n\nconst tableHeaders = [\n  { name: 'Class', sortFunc: 'name' },\n  { name: 'Level', sortFunc: 'currentLevel' },\n  { name: 'Current Exp.', sortFunc: 'currentExperience' },\n  { name: 'Required Exp.', sortFunc: undefined },\n  { name: 'Remaining Exp.', sortFunc: c => calculateRemainingExp(c.currentExperience, c.totalExperience) },\n  { name: 'Exp. Per Item', sortFunc: 'experiencePerItem' },\n  {\n    name: 'Remaining Items',\n    sortFunc: c => calculateRemainingItems(\n      calculateRemainingExp(c.currentExperience, c.totalExperience), c.experiencePerItem\n    )\n  },\n  { name: 'Progress', sortFunc: c => calculateProgressPercentage(c.currentExperience, c.totalExperience) }\n]\n\nexport default class CalculationsTableHeader extends React.Component {\n  render () {\n    const { applySortFunc } = this.props\n    return (\n      <thead>\n      <tr>\n        {tableHeaders.map((h, key) => {\n          if (h.sortFunc) {\n            return (\n              <SortableTableHeaderCell\n                key={key}\n                text={h.name}\n                sortFunc={h.sortFunc}\n                applySorting={applySortFunc}\n              />\n            )\n          } else {\n            return (\n              <th key={key}>\n                {h.name}\n              </th>\n            )\n          }\n        })}\n      </tr>\n      </thead>\n    )\n  }\n}\n\nCalculationsTableHeader.propTypes = {\n  applySortFunc: PropTypes.func.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { calculateProgressPercentage, calculateRemainingExp, calculateRemainingItems } from '../../service/calculations'\nimport Form from 'react-bootstrap/es/Form'\nimport { OverlayTrigger, Popover, ProgressBar } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfoCircle as faIcon } from '@fortawesome/free-solid-svg-icons'\nimport { find, set, toNumber } from 'lodash'\nimport LEVELING_GUIDE_LINKS from '../../data/leveling-guide-links'\n\nclass CalculationsTableBody extends React.Component {\n  state = {\n    focusedRow: undefined\n  }\n\n  getLevelingGuidePageUrl (abbreviation, currentLevel) {\n    const classGuideData = find(LEVELING_GUIDE_LINKS, g => g.abbreviation === abbreviation)\n    const { levelingGuide } = classGuideData\n\n    const matchedPage = find(levelingGuide.pages, p => {\n      const { maxLevel, minLevel } = p\n\n      if (currentLevel >= minLevel && currentLevel <= maxLevel) {\n        return true\n      }\n    })\n\n    return !!matchedPage ? `${levelingGuide.url}/${matchedPage.page}/` : levelingGuide.url\n  }\n\n  validateNumericFieldChange (abbreviation, event) {\n    const { target: { value, max, min } } = event\n    const { updateField } = this.props\n\n    if (!!min && toNumber(value) < min) {\n      set(event, 'target.value', min)\n    }\n\n    if (!!max && toNumber(value) > max) {\n      set(event, 'target.value', max)\n    }\n\n    updateField(abbreviation, event)\n  }\n\n  handleRowFocus (abbreviation, focused) {\n    this.setState({\n      focusedRow: focused ? abbreviation : undefined\n    })\n  }\n\n  render () {\n    const { craftingClasses } = this.props\n    return (\n      <tbody>\n      {craftingClasses.map(c => {\n        const remainingExperience = calculateRemainingExp(c.currentExperience, c.totalExperience)\n        const remainingItems = calculateRemainingItems(remainingExperience, c.experiencePerItem)\n        const progressPercentage = calculateProgressPercentage(c.currentExperience, c.totalExperience)\n\n        const popover = (\n          <Popover id={`links-${c.name}`}>\n            <a\n              href={this.getLevelingGuidePageUrl(c.abbreviation, c.currentLevel)}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Leveling Guide\n            </a>\n          </Popover>\n        )\n\n        return (\n          <tr\n            key={`calculationTableRow${c.abbreviation}`}\n            onFocus={this.handleRowFocus.bind(this, c.abbreviation, true)}\n            onBlur={this.handleRowFocus.bind(this, c.abbreviation, false)}\n            className={cx(this.state.focusedRow === c.abbreviation ? 'focused' : undefined)}\n          >\n            <td>\n              <div className=\"flex justify-between items-center\">\n                {c.name}\n                <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover} rootClose>\n                  <FontAwesomeIcon icon={faIcon} className=\"text-primary pointer\" />\n                </OverlayTrigger>\n              </div>\n            </td>\n            <td>\n              <Form.Control\n                name=\"currentLevel\"\n                type=\"number\"\n                value={c.currentLevel}\n                min=\"1\"\n                max=\"70\"\n                onChange={this.validateNumericFieldChange.bind(this, c.abbreviation)}\n              />\n            </td>\n            <td>\n              <Form.Control\n                name=\"currentExperience\"\n                type=\"number\"\n                value={c.currentExperience}\n                min=\"0\"\n                max={c.totalExperience}\n                onChange={this.validateNumericFieldChange.bind(this, c.abbreviation)}\n              />\n            </td>\n            <td>{c.totalExperience}</td>\n            <td>{remainingExperience}</td>\n            <td>\n              <Form.Control\n                name=\"experiencePerItem\"\n                type=\"number\"\n                value={c.experiencePerItem}\n                min=\"1\"\n                onChange={this.validateNumericFieldChange.bind(this, c.abbreviation)}\n              />\n            </td>\n            <td>{remainingItems}</td>\n            <td>\n              <ProgressBar\n                now={progressPercentage}\n                label={`${c.currentExperience} / ${c.totalExperience} (${progressPercentage}%)`}\n              />\n            </td>\n          </tr>\n        )\n      })}\n      </tbody>\n    )\n  }\n}\n\nCalculationsTableBody.propTypes = {\n  craftingClasses: PropTypes.arrayOf(PropTypes.shape()).isRequired\n}\n\nexport default CalculationsTableBody\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst TIME_TO_WAIT = 15\n\nexport default class FirstTimeImport extends React.Component {\n  state = {}\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const { show } = this.props\n    const { timer } = this.state\n\n    if (show !== prevProps.show) {\n      if (!timer && show) {\n        this.startTimer()\n      } else {\n        this.endTimer()\n      }\n    }\n  }\n\n  async executeTimer () {\n    const { getLodestoneCharacterData } = this.props\n    const { timeLeft = 0 } = this.state\n\n    if (!timeLeft) {\n      this.endTimer()\n      await getLodestoneCharacterData()\n      if (this.props.show) {\n        this.startTimer()\n      }\n    } else {\n      this.setState({\n        timeLeft: timeLeft - 1\n      })\n    }\n  }\n\n\n  startTimer () {\n    this.setState({\n      timeLeft: TIME_TO_WAIT,\n      timer: setInterval(this.executeTimer.bind(this), 1000)\n    })\n  }\n\n  endTimer () {\n    const { timer } = this.state\n    if (!!timer) {\n      this.setState({\n        timer: clearInterval(timer)\n      })\n    }\n  }\n\n  render () {\n    const { show } = this.props\n    const { timeLeft } = this.state\n\n    if (!show) {\n      return null\n    }\n\n    const timeLeftMessage = `Your data is currently being loaded.  Please wait ${timeLeft} `\n      + `second${timeLeft > 1 ? 's' : ''} while the import processes, after which your data will attempt to load `\n      + `automatically.  If you are experiencing continued difficulty, please try your import again.`\n    const doneMessage = `Checking your import for completeness, please wait...`\n\n    return (\n      <div className=\"w-100 pb3 tc alert alert-info\">\n        Thanks for importing! {timeLeft ? timeLeftMessage : doneMessage}\n      </div>\n    )\n  }\n}\n\nFirstTimeImport.propTypes = {\n  show: PropTypes.bool.isRequired,\n  getLodestoneCharacterData: PropTypes.func.isRequired\n}\n\nFirstTimeImport.defaultProps = {\n  show: false\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Table } from 'react-bootstrap'\nimport { concat, filter, find, get, isEqual, orderBy, set, toNumber } from 'lodash'\nimport FilterDropdown from './FilterDropdown'\nimport CalculationsTableHeader from './CalculationsTableHeader'\nimport CalculationsTableBody from './CalculationsTableBody'\nimport EXP_PER_LEVEL from '../../data/exp-per-level'\nimport { saveLocalClassData, getLodestoneCharacterData } from '../../store/local/actions'\nimport FirstTimeImport from './FirstTimeImport'\n\nclass CraftingGatheringCalculator extends React.Component {\n  state = {\n    sort: {\n      func: 'name',\n      direction: 'asc'\n    },\n    filter: {\n      func: undefined,\n      label: 'All'\n    }\n  }\n\n  applySort (sortFunc) {\n    const { sort } = this.state\n    const sortDirection = isEqual(sortFunc, sort.func) && sort.direction === 'asc' ? 'desc' : 'asc'\n    this.setState({\n      sort: {\n        func: sortFunc,\n        direction: sortDirection\n      }\n    })\n  }\n\n  applyFilter (filterFunc, event) {\n    this.setState({\n      filter: {\n        func: filterFunc,\n        label: event.target.innerText\n      }\n    })\n  }\n\n  getSortedCraftingClassData (craftingClassData) {\n    const { sort } = this.state\n    return orderBy(craftingClassData, sort.func, sort.direction)\n  }\n\n  getFilteredCraftingClassData (craftingClassData) {\n    const { filter: { func } } = this.state\n    return filter(craftingClassData, func)\n  }\n\n  updateField (abbreviation, event) {\n    const { target: { value, name } } = event\n    const { craftingClassData, saveLocalClassData } = this.props\n\n    const targetCraftingClass = find(craftingClassData, c => c.abbreviation === abbreviation)\n    const otherCraftingClasses = filter(craftingClassData, c => c.abbreviation !== abbreviation)\n    set(targetCraftingClass, name, toNumber(value))\n\n    if (name === 'currentLevel') {\n      set(targetCraftingClass, 'totalExperience', EXP_PER_LEVEL[value])\n    }\n\n    const updatedCraftingClasses = orderBy(concat(otherCraftingClasses, targetCraftingClass), ['type', 'name'])\n\n    saveLocalClassData(updatedCraftingClasses)\n  }\n\n  render () {\n    const { craftingClassData, characterData, getLodestoneCharacterData } = this.props\n    const sortedAndFilteredCraftingClassData = this.getSortedCraftingClassData(\n      this.getFilteredCraftingClassData(craftingClassData)\n    )\n\n    return (\n      <div>\n        <FirstTimeImport\n          show={get(characterData, 'Character') === null}\n          getLodestoneCharacterData={getLodestoneCharacterData.bind(this, get(characterData, 'characterId'))}\n        />\n        <div className=\"w-100 pb3 tc\">\n          <FilterDropdown label={this.state.filter.label} applyFilterFunc={this.applyFilter.bind(this)} />\n        </div>\n        <div className=\"table-responsive\">\n          <Table className=\"calculations\" striped hover>\n            <CalculationsTableHeader applySortFunc={this.applySort.bind(this)} />\n            <CalculationsTableBody\n              craftingClasses={sortedAndFilteredCraftingClassData}\n              updateField={this.updateField.bind(this)}\n            />\n          </Table>\n        </div>\n      </div>\n    )\n  }\n}\n\nCraftingGatheringCalculator.propTypes = {\n  craftingClassData: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  characterData: PropTypes.shape()\n}\n\nconst mapStateToProps = () => ({})\nconst mapDispatchToProps = dispatch => ({\n  saveLocalClassData: classData => dispatch(saveLocalClassData(classData)),\n  getLodestoneCharacterData: characterId => dispatch(getLodestoneCharacterData(characterId))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CraftingGatheringCalculator)\n","import React from 'react'\nimport { Badge, Tab, Tabs } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { cloneDeep, find, get, includes, indexOf, omit, reject, sortBy, toNumber } from 'lodash'\nimport { getCurrentTab, storeCurrentTab } from '../service/localStorage'\nimport RecipeSearch from './recipes/RecipeSearch'\nimport MyList from './recipes/MyList'\nimport * as recipeActions from '../store/recipeList/actions'\nimport ShoppingList from './recipes/ShoppingList'\nimport CraftingGatheringCalculator from './calculator/CraftingGatheringCalculator'\n\nclass RecipeHelper extends React.Component {\n  state = {\n    recipeSearchClasses: [],\n    recipeSearchExact: false,\n    recipeSearchString: '',\n    recipeSearchIncludeMaster: false,\n    recipeSearchIsInvalid: false,\n    myList: [],\n    lastSearch: undefined\n  }\n\n  componentDidMount () {\n    this.setState({\n      key: getCurrentTab()\n    })\n  }\n\n  handleToggleRecipeSearchClass (event) {\n    const recipeSearchClasses = cloneDeep(get(this.state, 'recipeSearchClasses', []))\n    const abbreviation = get(event, 'target.value', event)\n\n    if (includes(recipeSearchClasses, abbreviation)) {\n      recipeSearchClasses.splice(recipeSearchClasses.indexOf(abbreviation), 1)\n    } else {\n      recipeSearchClasses.push(abbreviation)\n    }\n\n    this.setState({\n      recipeSearchClasses: sortBy(recipeSearchClasses, s => s.toLowerCase())\n    })\n  }\n\n  handleToggleRecipeSearchExact (event) {\n    const recipeSearchExact = get(event, 'target.checked', false)\n    this.setState({\n      recipeSearchExact\n    })\n  }\n\n  handleToggleRecipeIncludeMaster (event) {\n    const checked = get(event, 'target.checked')\n\n    this.setState({\n      recipeSearchIncludeMaster: checked\n    })\n  }\n\n  handleFieldUpdate (event) {\n    const { target: { name, value } } = event\n\n    let recipeSearchIsInvalid = false\n    if (!value) {\n      recipeSearchIsInvalid = true\n    }\n\n    this.setState({\n      [name]: value,\n      recipeSearchIsInvalid\n    })\n  }\n\n  handleClearList () {\n    const { clearMyRecipeList } = this.props\n    clearMyRecipeList()\n    this.handleTabChange('search')\n  }\n\n  search (page = 1) {\n    const { searchRecipes } = this.props\n    const { recipeSearchClasses, recipeSearchExact, recipeSearchIncludeMaster, recipeSearchString } = this.state\n    const params = {\n      page,\n      abbreviation: recipeSearchClasses,\n      exact: recipeSearchExact,\n      includeMasterRecipes: recipeSearchIncludeMaster\n    }\n\n    searchRecipes(recipeSearchString, params)\n  }\n\n  handleUpdateQuantity (item, value) {\n    const newValue = Math.max(1, toNumber(value))\n\n    const { myRecipeList, saveMyRecipeList } = this.props\n    const myListItemIndex = indexOf(myRecipeList, item)\n    myRecipeList[myListItemIndex].quantity = newValue\n    saveMyRecipeList(myRecipeList)\n  }\n\n  handleSearch (event) {\n    event.preventDefault()\n    const page = get(event, 'target.value', 1)\n    const { recipeSearchString } = this.state\n    if (!recipeSearchString) {\n      document.getElementsByName('recipeSearchString')[0].focus()\n      this.setState({\n        recipeSearchIsInvalid: true\n      })\n      return\n    }\n\n    this.search(page)\n  }\n\n  handleClear () {\n    document.getElementsByName('recipeSearchString')[0].focus()\n    this.setState({\n      recipeSearchIsInvalid: false,\n      recipeSearchString: ''\n    })\n  }\n\n  handlePageChange (event) {\n    this.handleSearch(event)\n  }\n\n  handleTabChange (key) {\n    storeCurrentTab(key)\n    this.setState({ key })\n  }\n\n  toggleListItem (item) {\n    item = omit(item, 'quantity')\n    const { myRecipeList, saveMyRecipeList } = this.props\n    let myClonedList = cloneDeep(myRecipeList)\n    const foundItem = find(myRecipeList, i => get(i, 'ID') === get(item, 'ID'))\n\n    if (!!foundItem) {\n      myClonedList = reject(myRecipeList, item)\n    } else {\n      item.quantity = 1\n      myClonedList.push(item)\n    }\n\n    saveMyRecipeList(myClonedList)\n  }\n\n  render () {\n    const {\n      recipeSearchExact,\n      recipeSearchClasses,\n      recipeSearchIncludeMaster,\n      recipeSearchIsInvalid,\n      recipeSearchString\n    } = this.state\n\n    const {\n      characterData,\n      clearRecipeSearch,\n      craftingClassData,\n      myRecipeList,\n      myShoppingList,\n      recipeSearchResults\n    } = this.props\n\n    return (\n      <div className=\"recipe-list pt3\">\n        <Tabs\n          activeKey={this.state.key}\n          onSelect={this.handleTabChange.bind(this)}\n        >\n          <Tab eventKey=\"calculator\" title=\"Calculations\">\n            <div className=\"recipe-tab\">\n              <CraftingGatheringCalculator characterData={characterData} craftingClassData={craftingClassData} />\n            </div>\n          </Tab>\n          <Tab eventKey=\"search\" title=\"Recipe Search\">\n            <div className=\"recipe-tab\">\n              <RecipeSearch\n                clearRecipeSearch={clearRecipeSearch.bind(this)}\n                handleChange={this.handleFieldUpdate.bind(this)}\n                handlePageChange={this.handlePageChange.bind(this)}\n                handleReset={this.handleClear.bind(this)}\n                handleSubmit={this.handleSearch.bind(this)}\n                handleTabChange={this.handleTabChange.bind(this)}\n                handleToggleRecipeIncludeMaster={this.handleToggleRecipeIncludeMaster.bind(this)}\n                handleToggleListItem={this.toggleListItem.bind(this)}\n                handleToggleRecipeSearchClass={this.handleToggleRecipeSearchClass.bind(this)}\n                handleToggleRecipeSearchExact={this.handleToggleRecipeSearchExact.bind(this)}\n                myList={myRecipeList}\n                recipeSearchIncludeMaster={recipeSearchIncludeMaster}\n                recipeSearchClasses={recipeSearchClasses}\n                recipeSearchExact={recipeSearchExact}\n                recipeSearchResults={recipeSearchResults}\n                recipeSearchIsInvalid={recipeSearchIsInvalid}\n                recipeSearchString={recipeSearchString}\n              />\n            </div>\n          </Tab>\n          <Tab eventKey=\"recipe-list\" title={`My Recipe List (${myRecipeList.length})`}>\n            <div className=\"recipe-tab\">\n              <MyList\n                list={myRecipeList}\n                handleClearList={this.handleClearList.bind(this)}\n                handleTabChange={this.handleTabChange.bind(this)}\n                handleToggleListItem={this.toggleListItem.bind(this)}\n                handleUpdateQuantity={this.handleUpdateQuantity.bind(this)}\n              />\n            </div>\n          </Tab>\n          <Tab eventKey=\"shopping-list\" title={(\n            <span>\n              Shopping List <Badge variant=\"primary\">Beta</Badge>\n            </span>\n          )}>\n            <div className=\"recipe-tab\">\n              <ShoppingList\n                shoppingList={myShoppingList}\n              />\n            </div>\n          </Tab>\n        </Tabs>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  myRecipeList: get(state, 'recipeList.myRecipeList', []),\n  myShoppingList: get(state, 'recipeList.myShoppingList', {}),\n  recipeSearchResults: get(state, 'recipeList.recipeSearchResults', {})\n})\n\nconst mapDispatchToProps = dispatch => ({\n  saveMyRecipeList: recipeList => dispatch(recipeActions.saveMyRecipeList(recipeList)),\n  clearMyRecipeList: () => dispatch(recipeActions.clearMyRecipeList()),\n  createMyShoppingList: recipeList => dispatch(recipeActions.createMyShoppingList(recipeList)),\n  clearMyShoppingList: () => dispatch(recipeActions.clearMyShoppingList()),\n  searchRecipes: (string, params) => dispatch(recipeActions.searchRecipes(string, params)),\n  clearRecipeSearch: () => dispatch(recipeActions.clearRecipeSearch())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RecipeHelper)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Spinner } from 'react-bootstrap'\n\nexport default class LoadingOverlay extends React.Component {\n  render () {\n    const { show } = this.props\n\n    if (!show) {\n      return null\n    }\n\n    return (\n      <div className=\"loading-overlay\">\n        <div>\n          <Spinner animation=\"border\" variant=\"light\" />\n        </div>\n      </div>\n    )\n  }\n}\n\nLoadingOverlay.propTypes = {\n  show: PropTypes.bool.isRequired\n}\n\nLoadingOverlay.defaultProps = {\n  show: false\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Container } from 'react-bootstrap'\nimport { get } from 'lodash'\nimport * as actions from '../store/local/actions'\nimport Navigation from './navigation/Navigation'\nimport RecipeHelper from './RecipeHelper'\nimport LoadingOverlay from './common/LoadingOverlay'\n\nconst externalLink = (url, text) => (\n  <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n)\n\nclass XivCraftingGatheringHelper extends React.Component {\n  componentDidMount () {\n    this.props.getLocalClassData()\n    this.props.getLocalCharacterData()\n  }\n\n  render () {\n    const { characterData, craftingClassData, loading } = this.props\n\n    return (\n      <React.Fragment>\n        <Navigation\n          characterData={characterData}\n          craftingClassData={craftingClassData}\n        />\n        <Container fluid>\n          <RecipeHelper characterData={characterData} craftingClassData={craftingClassData} />\n          <hr />\n          <div className=\"tc text-muted pb3\">\n            Created by {externalLink('https://na.finalfantasyxiv.com/lodestone/character/22858010/',\n            'Xythyt')} with the help of {externalLink('https://www.xivapi.com', 'XIVAPI')}.\n            <br />\n            Version {process.env.REACT_APP_VERSION}\n          </div>\n        </Container>\n        <LoadingOverlay show={loading} />\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  craftingClassData: get(state, 'local.classData'),\n  characterData: get(state, 'local.characterData'),\n  loading: (\n    Object.keys(get(state, 'local.loading', {})).length > 0 ||\n    Object.keys(get(state, 'recipeList.loading', {})).length > 0\n  )\n})\n\nconst mapDispatchToProps = dispatch => ({\n  getLocalCharacterData: () => dispatch(actions.getLocalCharacterData()),\n  getLocalClassData: () => dispatch(actions.getLocalClassData())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(XivCraftingGatheringHelper)\n","import { get, set, unset } from 'lodash'\nimport * as LocalStorage from '../../service/localStorage'\nimport * as T from './types'\n\nconst INITIAL_STATE = {\n  classData: LocalStorage.getDefaultCraftingClasses(),\n  loading: {}\n}\n\nexport default (state = INITIAL_STATE, action) => {\n  const { loading } = state\n  switch (action.type) {\n    case T.LODESTONE_CHARACTER_DATA_REQUEST:\n      set(loading, 'characterData', true)\n      return {\n        ...state,\n        loading\n      }\n    case T.LOCAL_CLASS_DATA_STORE:\n    case T.LOCAL_CLASS_DATA_RETRIEVAL:\n      return {\n        ...state,\n        classData: get(action, 'localData')\n      }\n    case T.LOCAL_CHARACTER_DATA_CLEAR:\n      return {\n        ...state,\n        characterData: undefined\n      }\n    case T.LOCAL_CHARACTER_DATA_STORE:\n    case T.LOCAL_CHARACTER_DATA_RETRIEVAL:\n      return {\n        ...state,\n        characterData: get(action, 'localData')\n      }\n    case T.LOCAL_CLASS_DATA_CLEAR:\n      return {\n        ...state,\n        classData: LocalStorage.getDefaultCraftingClasses()\n      }\n    case T.LODESTONE_CHARACTER_DATA_SUCCESS:\n      unset(loading, 'characterData')\n      return {\n        ...state,\n        characterData: get(action, 'payload'),\n        loading\n      }\n    case T.API_REQUEST_FAILURE:\n      unset(loading, 'characterData')\n      return {\n        ...state,\n        error: action.error,\n        loading\n      }\n    default:\n      return state\n  }\n}\n","import { set, unset } from 'lodash'\nimport * as LocalStorageService from '../../service/localStorage'\nimport * as T from './types'\n\nconst INITIAL_STATE = {\n  loading: {},\n  myRecipeList: LocalStorageService.getMyRecipeList(),\n  myShoppingList: LocalStorageService.getMyShoppingList(),\n  recipeSearchResults: {}\n}\n\nexport default (state = INITIAL_STATE, action) => {\n  const { loading } = state\n  unset(state, 'error')\n  switch (action.type) {\n    case T.SHOPPING_LIST_CREATE:\n      unset(loading, 'shoppingList')\n      return {\n        ...state,\n        myShoppingList: action.shoppingList,\n        loading\n      }\n    case T.SHOPPING_LIST_CLEAR:\n      return {\n        ...state,\n        myShoppingList: {}\n      }\n    case T.RECIPE_LIST_SAVE:\n      set(loading, 'shoppingList', true)\n      return {\n        ...state,\n        myRecipeList: action.recipeList,\n        loading\n      }\n    case T.RECIPE_LIST_CLEAR:\n      return {\n        ...state,\n        myRecipeList: []\n      }\n    case T.RECIPE_SEARCH_REQUEST:\n      set(loading, 'recipeSearch', true)\n      return {\n        ...state,\n        loading,\n        params: action.params\n      }\n    case T.RECIPE_SEARCH_SUCCESS:\n      unset(loading, 'recipeSearch')\n      return {\n        ...state,\n        loading,\n        recipeSearchResults: action.payload\n      }\n    case T.RECIPE_SEARCH_FAILURE:\n      unset(loading, 'recipeSearch')\n      return {\n        ...state,\n        loading,\n        error: action.error\n      }\n    case T.RECIPE_SEARCH_CLEAR:\n      unset(state, 'params')\n      return {\n        ...state,\n        recipeSearchResults: {}\n      }\n    default:\n      return state\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducer from './local/reducer'\nimport recipeListReducer from './recipeList/reducer'\n\nconst rootReducer = combineReducers({\n  local: reducer,\n  recipeList: recipeListReducer\n})\n\nexport default createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n)\n","import React from 'react'\nimport XivCraftingGatheringHelper from './XivCraftingGatheringHelper'\nimport Provider from 'react-redux/es/components/Provider'\nimport store from '../store'\n\nclass App extends React.Component {\n  render () {\n    return (\n      <Provider store={store}>\n        <XivCraftingGatheringHelper />\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport './styles/index.scss'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}